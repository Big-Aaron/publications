-rwxrwxr-x 2 ubuntu ubuntu 85128 Oct 28 1926 /home/ubuntu/par/jotterp/challenge/framework/chall/target/sbf-solana-solana/release/chall.so
ELF Header
  Magic   7f 45 4c 46 02 01 01 00 00 00 00 00 00 00 00 00
  Class                             ELF64
  Data                              2's complement, little endian
  Version                           1 (current)
  OS/ABI                            UNIX - System V
  ABI Version                       0
  Type                              DYN (Shared object file)
  Machine                           EM_BPF
  Version                           0x1
  Entry point address               0x710
  Start of program headers          64 (bytes into file)
  Start of section headers          84360 (bytes into file)
  Flags                             0x0
  Size of this header               64 (bytes)
  Size of program headers           56 (bytes)
  Number of program headers         4
  Size of section headers           64 (bytes)
  Number of section headers         12
  Section header string table index 10
There are 12 section headers, starting at offset 0x14988

Section Headers
  [Nr] Name              Type            Address          Off    Size   ES Flg Lk Inf Al
  [ 0]                   NULL            0000000000000000 000000 000000 00      0   0  0
  [ 1] .text             PROGBITS        0000000000000120 000120 0092f8 00  AX  0   0  8
  [ 2] .rodata           PROGBITS        0000000000009418 009418 000e8f 00  AM  0   0  8
  [ 3] .data.rel.ro      PROGBITS        000000000000a2a8 00a2a8 0004f0 00  WA  0   0  8
  [ 4] .dynamic          DYNAMIC         000000000000a798 00a798 0000b0 10  WA  6   0  8
  [ 5] .dynsym           DYNSYM          000000000000a848 00a848 0000a8 18   A  6   1  8
  [ 6] .dynstr           STRTAB          000000000000a8f0 00a8f0 00004b 00   A  0   0  1
  [ 7] .rel.dyn          REL             000000000000a940 00a940 001160 10   A  5   0  8
  [ 8] .comment          PROGBITS        0000000000000000 00baa0 000013 01  MS  0   0  1
  [ 9] .symtab           SYMTAB          0000000000000000 00bab8 004ae8 18     11 793  8
  [10] .shstrtab         STRTAB          0000000000000000 0105a0 000061 00      0   0  1
  [11] .strtab           STRTAB          0000000000000000 010601 004387 00      0   0  1
Key to Flags
  W (write), A (alloc), X (execute), M (merge), S (strings), I (info),
  L (link order), O (extra OS processing required), G (group), T (TLS),
  C (compressed), x (unknown), o (OS specific), E (exclude),
  R (retain), p (processor specific)

Elf file type is DYN (Shared object file)
Entry point 0x710
There are 4 program headers, starting at offset 64

Program Headers
  Type           Offset   VirtAddr           PhysAddr           FileSiz  MemSiz   Flg Align
  LOAD           0x000120 0x0000000000000120 0x0000000000000120 0x0092f8 0x0092f8 R E 0x1000
  LOAD           0x009418 0x0000000000009418 0x0000000000009418 0x001380 0x001380 RW  0x1000
  LOAD           0x00a848 0x000000000000a848 0x000000000000a848 0x001258 0x001258 R   0x1000
  DYNAMIC        0x00a798 0x000000000000a798 0x000000000000a798 0x0000b0 0x0000b0 RW  0x8

 Section to Segment mapping
  Segment Sections...
   00     .text
   01     .rodata .data.rel.ro
   02     .dynsym .dynstr .rel.dyn
   03     .dynamic
   None   .comment .symtab .shstrtab .strtab
Dynamic section at offset 0xa798 contains 11 entries
  Tag                Type       Name/Value
  0x000000000000001e (FLAGS)    TEXTREL
  0x0000000000000011 (REL)      0xa940
  0x0000000000000012 (RELSZ)    4448 (bytes)
  0x0000000000000013 (RELENT)   16 (bytes)
  0x000000006ffffffa (RELCOUNT) 204
  0x0000000000000006 (SYMTAB)   0xa848
  0x000000000000000b (SYMENT)   24 (bytes)
  0x0000000000000005 (STRTAB)   0xa8f0
  0x000000000000000a (STRSZ)    75 (bytes)
  0x0000000000000016 (TEXTREL)  0x0
  0x0000000000000000 (NULL)     0x0

Relocation section '.rel.dyn' at offset 0xa940 contains 278 entries
    Offset             Info             Type               Symbol's Value  Symbol's Name
00000000000001a8  0000000000000008 R_BPF_64_RELATIVE
00000000000001e0  0000000000000008 R_BPF_64_RELATIVE
0000000000000238  0000000000000008 R_BPF_64_RELATIVE
0000000000000270  0000000000000008 R_BPF_64_RELATIVE
00000000000002c0  0000000000000008 R_BPF_64_RELATIVE
00000000000002f0  0000000000000008 R_BPF_64_RELATIVE
00000000000003c0  0000000000000008 R_BPF_64_RELATIVE
00000000000005a0  0000000000000008 R_BPF_64_RELATIVE
00000000000005e8  0000000000000008 R_BPF_64_RELATIVE
00000000000006c8  0000000000000008 R_BPF_64_RELATIVE
00000000000006e0  0000000000000008 R_BPF_64_RELATIVE
00000000000006f0  0000000000000008 R_BPF_64_RELATIVE
0000000000000b40  0000000000000008 R_BPF_64_RELATIVE
0000000000000ba0  0000000000000008 R_BPF_64_RELATIVE
00000000000017e0  0000000000000008 R_BPF_64_RELATIVE
0000000000002388  0000000000000008 R_BPF_64_RELATIVE
00000000000023f0  0000000000000008 R_BPF_64_RELATIVE
0000000000002408  0000000000000008 R_BPF_64_RELATIVE
0000000000002440  0000000000000008 R_BPF_64_RELATIVE
0000000000002480  0000000000000008 R_BPF_64_RELATIVE
00000000000024b8  0000000000000008 R_BPF_64_RELATIVE
00000000000024e8  0000000000000008 R_BPF_64_RELATIVE
0000000000002518  0000000000000008 R_BPF_64_RELATIVE
0000000000002548  0000000000000008 R_BPF_64_RELATIVE
0000000000002588  0000000000000008 R_BPF_64_RELATIVE
00000000000025a0  0000000000000008 R_BPF_64_RELATIVE
00000000000025c8  0000000000000008 R_BPF_64_RELATIVE
00000000000025f0  0000000000000008 R_BPF_64_RELATIVE
0000000000002618  0000000000000008 R_BPF_64_RELATIVE
0000000000002640  0000000000000008 R_BPF_64_RELATIVE
0000000000002660  0000000000000008 R_BPF_64_RELATIVE
0000000000002688  0000000000000008 R_BPF_64_RELATIVE
00000000000026b0  0000000000000008 R_BPF_64_RELATIVE
00000000000026d8  0000000000000008 R_BPF_64_RELATIVE
0000000000002700  0000000000000008 R_BPF_64_RELATIVE
0000000000002720  0000000000000008 R_BPF_64_RELATIVE
0000000000002740  0000000000000008 R_BPF_64_RELATIVE
0000000000002768  0000000000000008 R_BPF_64_RELATIVE
0000000000002788  0000000000000008 R_BPF_64_RELATIVE
00000000000027b0  0000000000000008 R_BPF_64_RELATIVE
00000000000027d8  0000000000000008 R_BPF_64_RELATIVE
0000000000002858  0000000000000008 R_BPF_64_RELATIVE
0000000000002908  0000000000000008 R_BPF_64_RELATIVE
0000000000002e48  0000000000000008 R_BPF_64_RELATIVE
0000000000002e60  0000000000000008 R_BPF_64_RELATIVE
0000000000002ea0  0000000000000008 R_BPF_64_RELATIVE
00000000000030a8  0000000000000008 R_BPF_64_RELATIVE
0000000000003130  0000000000000008 R_BPF_64_RELATIVE
0000000000003148  0000000000000008 R_BPF_64_RELATIVE
0000000000003158  0000000000000008 R_BPF_64_RELATIVE
0000000000003488  0000000000000008 R_BPF_64_RELATIVE
00000000000034a0  0000000000000008 R_BPF_64_RELATIVE
0000000000003580  0000000000000008 R_BPF_64_RELATIVE
00000000000035c8  0000000000000008 R_BPF_64_RELATIVE
0000000000003620  0000000000000008 R_BPF_64_RELATIVE
00000000000036d8  0000000000000008 R_BPF_64_RELATIVE
0000000000003730  0000000000000008 R_BPF_64_RELATIVE
00000000000037b8  0000000000000008 R_BPF_64_RELATIVE
00000000000037f0  0000000000000008 R_BPF_64_RELATIVE
0000000000003840  0000000000000008 R_BPF_64_RELATIVE
00000000000038c8  0000000000000008 R_BPF_64_RELATIVE
00000000000038e0  0000000000000008 R_BPF_64_RELATIVE
0000000000003940  0000000000000008 R_BPF_64_RELATIVE
00000000000039b8  0000000000000008 R_BPF_64_RELATIVE
0000000000003a28  0000000000000008 R_BPF_64_RELATIVE
0000000000003aa8  0000000000000008 R_BPF_64_RELATIVE
0000000000003b00  0000000000000008 R_BPF_64_RELATIVE
0000000000003b30  0000000000000008 R_BPF_64_RELATIVE
0000000000003f10  0000000000000008 R_BPF_64_RELATIVE
0000000000003fe0  0000000000000008 R_BPF_64_RELATIVE
0000000000003ff8  0000000000000008 R_BPF_64_RELATIVE
00000000000040c8  0000000000000008 R_BPF_64_RELATIVE
00000000000041b8  0000000000000008 R_BPF_64_RELATIVE
0000000000004238  0000000000000008 R_BPF_64_RELATIVE
0000000000004498  0000000000000008 R_BPF_64_RELATIVE
0000000000004710  0000000000000008 R_BPF_64_RELATIVE
00000000000049b8  0000000000000008 R_BPF_64_RELATIVE
0000000000004a58  0000000000000008 R_BPF_64_RELATIVE
0000000000005bb8  0000000000000008 R_BPF_64_RELATIVE
0000000000005c08  0000000000000008 R_BPF_64_RELATIVE
00000000000064d8  0000000000000008 R_BPF_64_RELATIVE
0000000000006600  0000000000000008 R_BPF_64_RELATIVE
0000000000006ca8  0000000000000008 R_BPF_64_RELATIVE
0000000000006e28  0000000000000008 R_BPF_64_RELATIVE
0000000000006e98  0000000000000008 R_BPF_64_RELATIVE
0000000000006f18  0000000000000008 R_BPF_64_RELATIVE
0000000000006f88  0000000000000008 R_BPF_64_RELATIVE
0000000000007008  0000000000000008 R_BPF_64_RELATIVE
0000000000007078  0000000000000008 R_BPF_64_RELATIVE
0000000000007770  0000000000000008 R_BPF_64_RELATIVE
00000000000077b0  0000000000000008 R_BPF_64_RELATIVE
0000000000007820  0000000000000008 R_BPF_64_RELATIVE
0000000000007870  0000000000000008 R_BPF_64_RELATIVE
00000000000078c0  0000000000000008 R_BPF_64_RELATIVE
0000000000007930  0000000000000008 R_BPF_64_RELATIVE
0000000000007968  0000000000000008 R_BPF_64_RELATIVE
0000000000007a48  0000000000000008 R_BPF_64_RELATIVE
0000000000007b20  0000000000000008 R_BPF_64_RELATIVE
0000000000007d00  0000000000000008 R_BPF_64_RELATIVE
0000000000007df8  0000000000000008 R_BPF_64_RELATIVE
0000000000007e68  0000000000000008 R_BPF_64_RELATIVE
0000000000007ea0  0000000000000008 R_BPF_64_RELATIVE
0000000000007ed0  0000000000000008 R_BPF_64_RELATIVE
0000000000007f00  0000000000000008 R_BPF_64_RELATIVE
0000000000008178  0000000000000008 R_BPF_64_RELATIVE
0000000000008190  0000000000000008 R_BPF_64_RELATIVE
00000000000081f0  0000000000000008 R_BPF_64_RELATIVE
0000000000008220  0000000000000008 R_BPF_64_RELATIVE
00000000000082c8  0000000000000008 R_BPF_64_RELATIVE
0000000000008308  0000000000000008 R_BPF_64_RELATIVE
0000000000008320  0000000000000008 R_BPF_64_RELATIVE
0000000000008338  0000000000000008 R_BPF_64_RELATIVE
0000000000008378  0000000000000008 R_BPF_64_RELATIVE
0000000000008390  0000000000000008 R_BPF_64_RELATIVE
00000000000086a0  0000000000000008 R_BPF_64_RELATIVE
0000000000008748  0000000000000008 R_BPF_64_RELATIVE
0000000000008818  0000000000000008 R_BPF_64_RELATIVE
00000000000088c0  0000000000000008 R_BPF_64_RELATIVE
0000000000008aa0  0000000000000008 R_BPF_64_RELATIVE
0000000000008b50  0000000000000008 R_BPF_64_RELATIVE
0000000000008c18  0000000000000008 R_BPF_64_RELATIVE
0000000000008c50  0000000000000008 R_BPF_64_RELATIVE
0000000000008d28  0000000000000008 R_BPF_64_RELATIVE
0000000000008d88  0000000000000008 R_BPF_64_RELATIVE
0000000000008e18  0000000000000008 R_BPF_64_RELATIVE
0000000000008ea8  0000000000000008 R_BPF_64_RELATIVE
0000000000009080  0000000000000008 R_BPF_64_RELATIVE
0000000000009118  0000000000000008 R_BPF_64_RELATIVE
0000000000009128  0000000000000008 R_BPF_64_RELATIVE
00000000000091e8  0000000000000008 R_BPF_64_RELATIVE
00000000000092b0  0000000000000008 R_BPF_64_RELATIVE
00000000000092e0  0000000000000008 R_BPF_64_RELATIVE
000000000000a2a8  0000000000000008 R_BPF_64_RELATIVE
000000000000a2c0  0000000000000008 R_BPF_64_RELATIVE
000000000000a2d8  0000000000000008 R_BPF_64_RELATIVE
000000000000a2f0  0000000000000008 R_BPF_64_RELATIVE
000000000000a308  0000000000000008 R_BPF_64_RELATIVE
000000000000a320  0000000000000008 R_BPF_64_RELATIVE
000000000000a338  0000000000000008 R_BPF_64_RELATIVE
000000000000a350  0000000000000008 R_BPF_64_RELATIVE
000000000000a368  0000000000000008 R_BPF_64_RELATIVE
000000000000a370  0000000000000008 R_BPF_64_RELATIVE
000000000000a388  0000000000000008 R_BPF_64_RELATIVE
000000000000a398  0000000000000008 R_BPF_64_RELATIVE
000000000000a3b0  0000000000000008 R_BPF_64_RELATIVE
000000000000a3c8  0000000000000008 R_BPF_64_RELATIVE
000000000000a3d0  0000000000000008 R_BPF_64_RELATIVE
000000000000a3e8  0000000000000008 R_BPF_64_RELATIVE
000000000000a3f0  0000000000000008 R_BPF_64_RELATIVE
000000000000a408  0000000000000008 R_BPF_64_RELATIVE
000000000000a410  0000000000000008 R_BPF_64_RELATIVE
000000000000a418  0000000000000008 R_BPF_64_RELATIVE
000000000000a420  0000000000000008 R_BPF_64_RELATIVE
000000000000a430  0000000000000008 R_BPF_64_RELATIVE
000000000000a448  0000000000000008 R_BPF_64_RELATIVE
000000000000a460  0000000000000008 R_BPF_64_RELATIVE
000000000000a468  0000000000000008 R_BPF_64_RELATIVE
000000000000a480  0000000000000008 R_BPF_64_RELATIVE
000000000000a490  0000000000000008 R_BPF_64_RELATIVE
000000000000a4a0  0000000000000008 R_BPF_64_RELATIVE
000000000000a4b0  0000000000000008 R_BPF_64_RELATIVE
000000000000a4c0  0000000000000008 R_BPF_64_RELATIVE
000000000000a4d0  0000000000000008 R_BPF_64_RELATIVE
000000000000a4e0  0000000000000008 R_BPF_64_RELATIVE
000000000000a4f0  0000000000000008 R_BPF_64_RELATIVE
000000000000a500  0000000000000008 R_BPF_64_RELATIVE
000000000000a518  0000000000000008 R_BPF_64_RELATIVE
000000000000a520  0000000000000008 R_BPF_64_RELATIVE
000000000000a530  0000000000000008 R_BPF_64_RELATIVE
000000000000a540  0000000000000008 R_BPF_64_RELATIVE
000000000000a558  0000000000000008 R_BPF_64_RELATIVE
000000000000a560  0000000000000008 R_BPF_64_RELATIVE
000000000000a568  0000000000000008 R_BPF_64_RELATIVE
000000000000a570  0000000000000008 R_BPF_64_RELATIVE
000000000000a588  0000000000000008 R_BPF_64_RELATIVE
000000000000a5a0  0000000000000008 R_BPF_64_RELATIVE
000000000000a5a8  0000000000000008 R_BPF_64_RELATIVE
000000000000a5b0  0000000000000008 R_BPF_64_RELATIVE
000000000000a5b8  0000000000000008 R_BPF_64_RELATIVE
000000000000a5d0  0000000000000008 R_BPF_64_RELATIVE
000000000000a5e8  0000000000000008 R_BPF_64_RELATIVE
000000000000a600  0000000000000008 R_BPF_64_RELATIVE
000000000000a610  0000000000000008 R_BPF_64_RELATIVE
000000000000a620  0000000000000008 R_BPF_64_RELATIVE
000000000000a630  0000000000000008 R_BPF_64_RELATIVE
000000000000a640  0000000000000008 R_BPF_64_RELATIVE
000000000000a650  0000000000000008 R_BPF_64_RELATIVE
000000000000a660  0000000000000008 R_BPF_64_RELATIVE
000000000000a670  0000000000000008 R_BPF_64_RELATIVE
000000000000a680  0000000000000008 R_BPF_64_RELATIVE
000000000000a690  0000000000000008 R_BPF_64_RELATIVE
000000000000a6a0  0000000000000008 R_BPF_64_RELATIVE
000000000000a6b0  0000000000000008 R_BPF_64_RELATIVE
000000000000a6c0  0000000000000008 R_BPF_64_RELATIVE
000000000000a6d0  0000000000000008 R_BPF_64_RELATIVE
000000000000a6e0  0000000000000008 R_BPF_64_RELATIVE
000000000000a6f0  0000000000000008 R_BPF_64_RELATIVE
000000000000a700  0000000000000008 R_BPF_64_RELATIVE
000000000000a710  0000000000000008 R_BPF_64_RELATIVE
000000000000a720  0000000000000008 R_BPF_64_RELATIVE
000000000000a738  0000000000000008 R_BPF_64_RELATIVE
000000000000a750  0000000000000008 R_BPF_64_RELATIVE
000000000000a768  0000000000000008 R_BPF_64_RELATIVE
000000000000a780  0000000000000008 R_BPF_64_RELATIVE
0000000000002830  000000010000000a R_BPF_64_32            0000000000000b38 custom_panic
00000000000001c0  000000030000000a R_BPF_64_32            0000000000000000 abort
00000000000001f8  000000030000000a R_BPF_64_32            0000000000000000 abort
0000000000000250  000000030000000a R_BPF_64_32            0000000000000000 abort
0000000000000288  000000030000000a R_BPF_64_32            0000000000000000 abort
00000000000002d8  000000030000000a R_BPF_64_32            0000000000000000 abort
0000000000000308  000000030000000a R_BPF_64_32            0000000000000000 abort
00000000000003d8  000000030000000a R_BPF_64_32            0000000000000000 abort
0000000000000498  000000030000000a R_BPF_64_32            0000000000000000 abort
00000000000004f8  000000030000000a R_BPF_64_32            0000000000000000 abort
0000000000000708  000000030000000a R_BPF_64_32            0000000000000000 abort
0000000000001030  000000030000000a R_BPF_64_32            0000000000000000 abort
0000000000001040  000000030000000a R_BPF_64_32            0000000000000000 abort
0000000000001160  000000030000000a R_BPF_64_32            0000000000000000 abort
00000000000011d8  000000030000000a R_BPF_64_32            0000000000000000 abort
00000000000013b8  000000030000000a R_BPF_64_32            0000000000000000 abort
00000000000013c0  000000030000000a R_BPF_64_32            0000000000000000 abort
00000000000017f8  000000030000000a R_BPF_64_32            0000000000000000 abort
0000000000001810  000000030000000a R_BPF_64_32            0000000000000000 abort
0000000000001910  000000030000000a R_BPF_64_32            0000000000000000 abort
0000000000001980  000000030000000a R_BPF_64_32            0000000000000000 abort
0000000000001af8  000000030000000a R_BPF_64_32            0000000000000000 abort
00000000000020c0  000000030000000a R_BPF_64_32            0000000000000000 abort
0000000000002808  000000030000000a R_BPF_64_32            0000000000000000 abort
0000000000002818  000000030000000a R_BPF_64_32            0000000000000000 abort
0000000000002838  000000030000000a R_BPF_64_32            0000000000000000 abort
0000000000002840  000000030000000a R_BPF_64_32            0000000000000000 abort
0000000000002848  000000030000000a R_BPF_64_32            0000000000000000 abort
0000000000002850  000000030000000a R_BPF_64_32            0000000000000000 abort
0000000000002880  000000030000000a R_BPF_64_32            0000000000000000 abort
0000000000002890  000000030000000a R_BPF_64_32            0000000000000000 abort
0000000000002b40  000000030000000a R_BPF_64_32            0000000000000000 abort
0000000000002b50  000000030000000a R_BPF_64_32            0000000000000000 abort
0000000000002cb8  000000030000000a R_BPF_64_32            0000000000000000 abort
0000000000002cc8  000000030000000a R_BPF_64_32            0000000000000000 abort
0000000000002eb8  000000030000000a R_BPF_64_32            0000000000000000 abort
0000000000002ec8  000000030000000a R_BPF_64_32            0000000000000000 abort
0000000000002ed8  000000030000000a R_BPF_64_32            0000000000000000 abort
0000000000003008  000000030000000a R_BPF_64_32            0000000000000000 abort
0000000000003118  000000030000000a R_BPF_64_32            0000000000000000 abort
0000000000003170  000000030000000a R_BPF_64_32            0000000000000000 abort
0000000000003438  000000030000000a R_BPF_64_32            0000000000000000 abort
0000000000003440  000000030000000a R_BPF_64_32            0000000000000000 abort
0000000000003910  000000030000000a R_BPF_64_32            0000000000000000 abort
00000000000039a0  000000030000000a R_BPF_64_32            0000000000000000 abort
0000000000003a80  000000030000000a R_BPF_64_32            0000000000000000 abort
0000000000003b80  000000030000000a R_BPF_64_32            0000000000000000 abort
00000000000064f0  000000030000000a R_BPF_64_32            0000000000000000 abort
0000000000006618  000000030000000a R_BPF_64_32            0000000000000000 abort
0000000000006cc0  000000030000000a R_BPF_64_32            0000000000000000 abort
0000000000006e10  000000030000000a R_BPF_64_32            0000000000000000 abort
0000000000006ef0  000000030000000a R_BPF_64_32            0000000000000000 abort
0000000000006f00  000000030000000a R_BPF_64_32            0000000000000000 abort
0000000000006fe0  000000030000000a R_BPF_64_32            0000000000000000 abort
0000000000006ff0  000000030000000a R_BPF_64_32            0000000000000000 abort
00000000000070d0  000000030000000a R_BPF_64_32            0000000000000000 abort
00000000000076c8  000000030000000a R_BPF_64_32            0000000000000000 abort
00000000000079b8  000000030000000a R_BPF_64_32            0000000000000000 abort
0000000000007a08  000000030000000a R_BPF_64_32            0000000000000000 abort
0000000000007b38  000000030000000a R_BPF_64_32            0000000000000000 abort
0000000000007d28  000000030000000a R_BPF_64_32            0000000000000000 abort
0000000000007d78  000000030000000a R_BPF_64_32            0000000000000000 abort
00000000000081a8  000000030000000a R_BPF_64_32            0000000000000000 abort
0000000000008208  000000030000000a R_BPF_64_32            0000000000000000 abort
0000000000008238  000000030000000a R_BPF_64_32            0000000000000000 abort
00000000000086b8  000000030000000a R_BPF_64_32            0000000000000000 abort
0000000000008830  000000030000000a R_BPF_64_32            0000000000000000 abort
0000000000008ab8  000000030000000a R_BPF_64_32            0000000000000000 abort
00000000000092c8  000000030000000a R_BPF_64_32            0000000000000000 abort
00000000000092f8  000000030000000a R_BPF_64_32            0000000000000000 abort
0000000000000c10  000000040000000a R_BPF_64_32            0000000000000000 sol_log_
0000000000002820  000000040000000a R_BPF_64_32            0000000000000000 sol_log_
0000000000001bc8  000000050000000a R_BPF_64_32            0000000000000000 sol_invoke_signed_rust
0000000000009400  000000060000000a R_BPF_64_32            0000000000000000 sol_memcpy_

Symbol table '.dynsym' contains 7 entries
   Num    Value          Size Type    Bind   Vis       Ndx Name
     0 0000000000000000     0 NOTYPE  LOCAL  DEFAULT   UND
     1 0000000000000b38   272 FUNC    GLOBAL DEFAULT     1 custom_panic
     2 0000000000000710   584 FUNC    GLOBAL DEFAULT     1 entrypoint
     3 0000000000000000     0 NOTYPE  GLOBAL DEFAULT   UND abort
     4 0000000000000000     0 NOTYPE  GLOBAL DEFAULT   UND sol_log_
     5 0000000000000000     0 NOTYPE  GLOBAL DEFAULT   UND sol_invoke_signed_rust
     6 0000000000000000     0 NOTYPE  GLOBAL DEFAULT   UND sol_memcpy_

Symbol table '.symtab' contains 799 entries
   Num    Value          Size Type    Bind   Vis       Ndx Name
     0 0000000000000000     0 NOTYPE  LOCAL  DEFAULT   UND
     1 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS chall.66aebc9c-cgu.0
     2 0000000000000120    24 FUNC    LOCAL  DEFAULT     1 <&T as core::fmt::Display>::fmt
     3 0000000000000138    72 FUNC    LOCAL  DEFAULT     1 core::ptr::drop_in_place<solana_program::program_error::ProgramError>
     4 0000000000000150     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_2
     5 0000000000000148     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_1
     6 00000000000001c8     0 NOTYPE  LOCAL  DEFAULT     1 LBB2_2
     7 000000000000a2a8    24 OBJECT  LOCAL  DEFAULT     3 .L__unnamed_1
     8 0000000000000200     0 NOTYPE  LOCAL  DEFAULT     1 LBB2_4
     9 000000000000a2c0    24 OBJECT  LOCAL  DEFAULT     3 .L__unnamed_2
    10 0000000000000258     0 NOTYPE  LOCAL  DEFAULT     1 LBB2_6
    11 000000000000a2d8    24 OBJECT  LOCAL  DEFAULT     3 .L__unnamed_3
    12 0000000000000290     0 NOTYPE  LOCAL  DEFAULT     1 LBB2_8
    13 000000000000a2f0    24 OBJECT  LOCAL  DEFAULT     3 .L__unnamed_4
    14 00000000000002e0     0 NOTYPE  LOCAL  DEFAULT     1 LBB3_2
    15 000000000000a308    24 OBJECT  LOCAL  DEFAULT     3 .L__unnamed_5
    16 0000000000000310     0 NOTYPE  LOCAL  DEFAULT     1 LBB3_4
    17 000000000000a320    24 OBJECT  LOCAL  DEFAULT     3 .L__unnamed_6
    18 00000000000003b0     0 NOTYPE  LOCAL  DEFAULT     1 LBB4_3
    19 0000000000000380     0 NOTYPE  LOCAL  DEFAULT     1 LBB4_4
    20 0000000000000370     0 NOTYPE  LOCAL  DEFAULT     1 LBB4_5
    21 0000000000000390     0 NOTYPE  LOCAL  DEFAULT     1 LBB4_6
    22 0000000000000398     0 NOTYPE  LOCAL  DEFAULT     1 LBB4_7
    23 000000000000a338    24 OBJECT  LOCAL  DEFAULT     3 .L__unnamed_7
    24 0000000000000500     0 NOTYPE  LOCAL  DEFAULT     1 LBB5_5
    25 00000000000004a0     0 NOTYPE  LOCAL  DEFAULT     1 LBB5_3
    26 0000000000009418     0 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_8
    27 0000000000000678     0 NOTYPE  LOCAL  DEFAULT     1 LBB5_11
    28 0000000000000648     0 NOTYPE  LOCAL  DEFAULT     1 LBB5_8
    29 0000000000000670     0 NOTYPE  LOCAL  DEFAULT     1 LBB5_10
    30 0000000000009422    43 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_9
    31 000000000000a350    32 OBJECT  LOCAL  DEFAULT     3 .L__unnamed_10
    32 000000000000a370    24 OBJECT  LOCAL  DEFAULT     3 .L__unnamed_11
    33 0000000000000808     0 NOTYPE  LOCAL  DEFAULT     1 LBB6_2
    34 00000000000008a8     0 NOTYPE  LOCAL  DEFAULT     1 LBB6_11
    35 00000000000008e0     0 NOTYPE  LOCAL  DEFAULT     1 LBB6_4
    36 0000000000000830     0 NOTYPE  LOCAL  DEFAULT     1 LBB6_7
    37 0000000000000890     0 NOTYPE  LOCAL  DEFAULT     1 LBB6_10
    38 0000000000000948     0 NOTYPE  LOCAL  DEFAULT     1 LBB6_13
    39 0000000000000990     0 NOTYPE  LOCAL  DEFAULT     1 LBB7_2
    40 00000000000009c0     0 NOTYPE  LOCAL  DEFAULT     1 LBB7_4
    41 00000000000009d8     0 NOTYPE  LOCAL  DEFAULT     1 LBB7_6
    42 0000000000000a20     0 NOTYPE  LOCAL  DEFAULT     1 LBB7_8
    43 0000000000000a78     0 NOTYPE  LOCAL  DEFAULT     1 LBB9_2
    44 0000000000000aa8     0 NOTYPE  LOCAL  DEFAULT     1 LBB9_4
    45 0000000000000ac0     0 NOTYPE  LOCAL  DEFAULT     1 LBB9_6
    46 0000000000000b30     0 NOTYPE  LOCAL  DEFAULT     1 LBB9_10
    47 0000000000000b10     0 NOTYPE  LOCAL  DEFAULT     1 LBB9_9
    48 000000000000a388    16 OBJECT  LOCAL  DEFAULT     3 .L__unnamed_12
    49 0000000000000c40     0 NOTYPE  LOCAL  DEFAULT     1 LBB11_2
    50 0000000000009418    10 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_13
    51 0000000000000180   304 FUNC    LOCAL  DEFAULT     1 chall::process
    52 00000000000002b0   128 FUNC    LOCAL  DEFAULT     1 chall::write
    53 0000000000000330   176 FUNC    LOCAL  DEFAULT     1 chall::process_instruction
    54 00000000000003e0   816 FUNC    LOCAL  DEFAULT     1 chall::call
    55 0000000000000958   208 FUNC    LOCAL  HIDDEN      1 __rg_alloc
    56 0000000000000a28     8 FUNC    LOCAL  HIDDEN      1 __rg_dealloc
    57 0000000000000a30   264 FUNC    LOCAL  HIDDEN      1 __rg_realloc
    58 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS 5evohngjwsjydmg3
    59 0000000000000c48     0 NOTYPE  LOCAL  DEFAULT     1
    60 0000000000000c58     0 NOTYPE  LOCAL  DEFAULT     1
    61 0000000000000c68     0 NOTYPE  LOCAL  DEFAULT     1
    62 0000000000000c78     0 NOTYPE  LOCAL  DEFAULT     1
    63 0000000000000c58    16 FUNC    LOCAL  DEFAULT     1 __rust_dealloc
    64 0000000000000c48    16 FUNC    LOCAL  DEFAULT     1 __rust_alloc
    65 0000000000000c68    16 FUNC    LOCAL  DEFAULT     1 __rust_realloc
    66 0000000000000c78    16 FUNC    LOCAL  DEFAULT     1 __rust_alloc_error_handler
    67 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS solana_program.5707a8de-cgu.0
    68 000000000000a3b0    32 OBJECT  LOCAL  DEFAULT     3 .L__unnamed_71
    69 000000000000a3d0    32 OBJECT  LOCAL  DEFAULT     3 .L__unnamed_87
    70 0000000000000c88    48 FUNC    LOCAL  DEFAULT     1 <&T as core::fmt::Debug>::fmt
    71 0000000000000cb8   168 FUNC    LOCAL  DEFAULT     1 <&T as core::fmt::Debug>::fmt
    72 0000000000000d20     0 NOTYPE  LOCAL  DEFAULT     1 LBB71_2
    73 0000000000000d00     0 NOTYPE  LOCAL  DEFAULT     1 LBB71_4
    74 0000000000000d40     0 NOTYPE  LOCAL  DEFAULT     1 LBB71_3
    75 0000000000000d58     0 NOTYPE  LOCAL  DEFAULT     1 LBB71_5
    76 0000000000000d60     8 FUNC    LOCAL  DEFAULT     1 core::ptr::drop_in_place<&[(solana_program::pubkey::Pubkey,u64,u64,u64); 32]>
    77 0000000000000d68   320 FUNC    LOCAL  DEFAULT     1 alloc::raw_vec::finish_grow
    78 0000000000000dd8     0 NOTYPE  LOCAL  DEFAULT     1 LBB149_2
    79 0000000000000e20     0 NOTYPE  LOCAL  DEFAULT     1 LBB149_9
    80 0000000000000df0     0 NOTYPE  LOCAL  DEFAULT     1 LBB149_8
    81 0000000000000e70     0 NOTYPE  LOCAL  DEFAULT     1 LBB149_11
    82 0000000000000e50     0 NOTYPE  LOCAL  DEFAULT     1 LBB149_13
    83 0000000000000e80     0 NOTYPE  LOCAL  DEFAULT     1 LBB149_12
    84 0000000000000e58     0 NOTYPE  LOCAL  DEFAULT     1 LBB149_3
    85 0000000000000e98     0 NOTYPE  LOCAL  DEFAULT     1 LBB149_4
    86 0000000000000ea8   416 FUNC    LOCAL  DEFAULT     1 alloc::raw_vec::RawVec<T,A>::reserve_for_push
    87 0000000000000ed0     0 NOTYPE  LOCAL  DEFAULT     1 LBB154_2
    88 0000000000001028     0 NOTYPE  LOCAL  DEFAULT     1 LBB154_17
    89 0000000000000f08     0 NOTYPE  LOCAL  DEFAULT     1 LBB154_5
    90 0000000000000f18     0 NOTYPE  LOCAL  DEFAULT     1 LBB154_7
    91 0000000000000f40     0 NOTYPE  LOCAL  DEFAULT     1 LBB154_9
    92 0000000000000f98     0 NOTYPE  LOCAL  DEFAULT     1 LBB154_11
    93 0000000000000fa8     0 NOTYPE  LOCAL  DEFAULT     1 LBB154_12
    94 0000000000001000     0 NOTYPE  LOCAL  DEFAULT     1 LBB154_15
    95 0000000000000ff8     0 NOTYPE  LOCAL  DEFAULT     1 LBB154_14
    96 0000000000001038     0 NOTYPE  LOCAL  DEFAULT     1 LBB154_18
    97 000000000000952f    12 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_257
    98 000000000000956a     6 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_260
    99 0000000000001128     0 NOTYPE  LOCAL  DEFAULT     1 LBB274_3
   100 0000000000001090     0 NOTYPE  LOCAL  DEFAULT     1 LBB274_2
   101 0000000000001150     0 NOTYPE  LOCAL  DEFAULT     1 LBB274_5
   102 0000000000001168     0 NOTYPE  LOCAL  DEFAULT     1 LBB274_7
   103 00000000000011e0     0 NOTYPE  LOCAL  DEFAULT     1 LBB274_10
   104 00000000000011c0     0 NOTYPE  LOCAL  DEFAULT     1 LBB274_9
   105 00000000000011e8     0 NOTYPE  LOCAL  DEFAULT     1 LBB274_11
   106 0000000000001318     0 NOTYPE  LOCAL  DEFAULT     1 LBB274_14
   107 0000000000001230     0 NOTYPE  LOCAL  DEFAULT     1 LBB274_12
   108 00000000000012d8     0 NOTYPE  LOCAL  DEFAULT     1 LBB274_13
   109 00000000000014d8     0 NOTYPE  LOCAL  DEFAULT     1 LBB274_26
   110 0000000000001350     0 NOTYPE  LOCAL  DEFAULT     1 LBB274_16
   111 00000000000017e0     0 NOTYPE  LOCAL  DEFAULT     1 LBB274_39
   112 00000000000013a0     0 NOTYPE  LOCAL  DEFAULT     1 LBB274_18
   113 00000000000013c8     0 NOTYPE  LOCAL  DEFAULT     1 LBB274_20
   114 00000000000013b8     0 NOTYPE  LOCAL  DEFAULT     1 LBB274_19
   115 0000000000001408     0 NOTYPE  LOCAL  DEFAULT     1 LBB274_22
   116 0000000000001420     0 NOTYPE  LOCAL  DEFAULT     1 LBB274_24
   117 0000000000001550     0 NOTYPE  LOCAL  DEFAULT     1 LBB274_28
   118 0000000000001800     0 NOTYPE  LOCAL  DEFAULT     1 LBB274_40
   119 00000000000015e0     0 NOTYPE  LOCAL  DEFAULT     1 LBB274_30
   120 0000000000001620     0 NOTYPE  LOCAL  DEFAULT     1 LBB274_32
   121 0000000000001648     0 NOTYPE  LOCAL  DEFAULT     1 LBB274_34
   122 0000000000001670     0 NOTYPE  LOCAL  DEFAULT     1 LBB274_36
   123 0000000000001750     0 NOTYPE  LOCAL  DEFAULT     1 LBB274_38
   124 000000000000a398    24 OBJECT  LOCAL  DEFAULT     3 .L__unnamed_293
   125 0000000000001a58     0 NOTYPE  LOCAL  DEFAULT     1 LBB404_12
   126 00000000000018f8     0 NOTYPE  LOCAL  DEFAULT     1 LBB404_3
   127 0000000000001918     0 NOTYPE  LOCAL  DEFAULT     1 LBB404_5
   128 0000000000001908     0 NOTYPE  LOCAL  DEFAULT     1 LBB404_4
   129 0000000000001988     0 NOTYPE  LOCAL  DEFAULT     1 LBB404_8
   130 0000000000001968     0 NOTYPE  LOCAL  DEFAULT     1 LBB404_7
   131 0000000000001990     0 NOTYPE  LOCAL  DEFAULT     1 LBB404_9
   132 00000000000019a0     0 NOTYPE  LOCAL  DEFAULT     1 LBB404_10
   133 0000000000001b00     0 NOTYPE  LOCAL  DEFAULT     1 LBB404_17
   134 0000000000001a98     0 NOTYPE  LOCAL  DEFAULT     1 LBB404_15
   135 0000000000001bf8     0 NOTYPE  LOCAL  DEFAULT     1 LBB404_19
   136 0000000000001c10     0 NOTYPE  LOCAL  DEFAULT     1 LBB404_20
   137 0000000000001c40     0 NOTYPE  LOCAL  DEFAULT     1 LBB404_22
   138 0000000000001c68     0 NOTYPE  LOCAL  DEFAULT     1 LBB404_24
   139 0000000000001cc8     0 NOTYPE  LOCAL  DEFAULT     1 LBB408_16
   140 0000000000001d00     0 NOTYPE  LOCAL  DEFAULT     1 LBB408_9
   141 0000000000001d60     0 NOTYPE  LOCAL  DEFAULT     1 LBB408_6
   142 0000000000001e00     0 NOTYPE  LOCAL  DEFAULT     1 LBB408_31
   143 0000000000001f78     0 NOTYPE  LOCAL  DEFAULT     1 LBB408_46
   144 0000000000001d30     0 NOTYPE  LOCAL  DEFAULT     1 LBB408_24
   145 0000000000001d88     0 NOTYPE  LOCAL  DEFAULT     1 LBB408_21
   146 0000000000001e30     0 NOTYPE  LOCAL  DEFAULT     1 LBB408_38
   147 0000000000001e48     0 NOTYPE  LOCAL  DEFAULT     1 LBB408_39
   148 0000000000001db0     0 NOTYPE  LOCAL  DEFAULT     1 LBB408_13
   149 0000000000001e60     0 NOTYPE  LOCAL  DEFAULT     1 LBB408_34
   150 0000000000001e78     0 NOTYPE  LOCAL  DEFAULT     1 LBB408_35
   151 0000000000001dd8     0 NOTYPE  LOCAL  DEFAULT     1 LBB408_28
   152 0000000000001e90     0 NOTYPE  LOCAL  DEFAULT     1 LBB408_42
   153 0000000000001ea8     0 NOTYPE  LOCAL  DEFAULT     1 LBB408_43
   154 0000000000001ec0     0 NOTYPE  LOCAL  DEFAULT     1 LBB408_32
   155 0000000000001ed8     0 NOTYPE  LOCAL  DEFAULT     1 LBB408_33
   156 0000000000001ef0     0 NOTYPE  LOCAL  DEFAULT     1 LBB408_40
   157 0000000000001f08     0 NOTYPE  LOCAL  DEFAULT     1 LBB408_41
   158 0000000000001f20     0 NOTYPE  LOCAL  DEFAULT     1 LBB408_36
   159 0000000000001f38     0 NOTYPE  LOCAL  DEFAULT     1 LBB408_37
   160 0000000000001f50     0 NOTYPE  LOCAL  DEFAULT     1 LBB408_44
   161 0000000000001f68     0 NOTYPE  LOCAL  DEFAULT     1 LBB408_45
   162 0000000000001fa8     0 NOTYPE  LOCAL  DEFAULT     1 LBB408_49
   163 0000000000002050     0 NOTYPE  LOCAL  DEFAULT     1 LBB409_16
   164 00000000000020c8     0 NOTYPE  LOCAL  DEFAULT     1 LBB409_9
   165 0000000000002138     0 NOTYPE  LOCAL  DEFAULT     1 LBB409_6
   166 00000000000021f8     0 NOTYPE  LOCAL  DEFAULT     1 LBB409_32
   167 0000000000002340     0 NOTYPE  LOCAL  DEFAULT     1 LBB409_57
   168 0000000000002040     0 NOTYPE  LOCAL  DEFAULT     1 LBB409_33
   169 00000000000021e0     0 NOTYPE  LOCAL  DEFAULT     1 LBB409_31
   170 0000000000002100     0 NOTYPE  LOCAL  DEFAULT     1 LBB409_24
   171 0000000000002168     0 NOTYPE  LOCAL  DEFAULT     1 LBB409_21
   172 0000000000002210     0 NOTYPE  LOCAL  DEFAULT     1 LBB409_43
   173 0000000000002220     0 NOTYPE  LOCAL  DEFAULT     1 LBB409_44
   174 0000000000002080     0 NOTYPE  LOCAL  DEFAULT     1 LBB409_45
   175 0000000000002300     0 NOTYPE  LOCAL  DEFAULT     1 LBB409_47
   176 0000000000002198     0 NOTYPE  LOCAL  DEFAULT     1 LBB409_13
   177 0000000000002230     0 NOTYPE  LOCAL  DEFAULT     1 LBB409_37
   178 0000000000002240     0 NOTYPE  LOCAL  DEFAULT     1 LBB409_38
   179 00000000000020f0     0 NOTYPE  LOCAL  DEFAULT     1 LBB409_39
   180 00000000000021c8     0 NOTYPE  LOCAL  DEFAULT     1 LBB409_28
   181 0000000000002250     0 NOTYPE  LOCAL  DEFAULT     1 LBB409_51
   182 0000000000002260     0 NOTYPE  LOCAL  DEFAULT     1 LBB409_52
   183 0000000000002128     0 NOTYPE  LOCAL  DEFAULT     1 LBB409_53
   184 0000000000002270     0 NOTYPE  LOCAL  DEFAULT     1 LBB409_34
   185 0000000000002280     0 NOTYPE  LOCAL  DEFAULT     1 LBB409_35
   186 0000000000002158     0 NOTYPE  LOCAL  DEFAULT     1 LBB409_36
   187 0000000000002290     0 NOTYPE  LOCAL  DEFAULT     1 LBB409_48
   188 00000000000022a0     0 NOTYPE  LOCAL  DEFAULT     1 LBB409_49
   189 0000000000002188     0 NOTYPE  LOCAL  DEFAULT     1 LBB409_50
   190 00000000000022b0     0 NOTYPE  LOCAL  DEFAULT     1 LBB409_40
   191 00000000000022c0     0 NOTYPE  LOCAL  DEFAULT     1 LBB409_41
   192 00000000000021b8     0 NOTYPE  LOCAL  DEFAULT     1 LBB409_42
   193 00000000000022d0     0 NOTYPE  LOCAL  DEFAULT     1 LBB409_54
   194 00000000000022e0     0 NOTYPE  LOCAL  DEFAULT     1 LBB409_55
   195 00000000000022f0     0 NOTYPE  LOCAL  DEFAULT     1 LBB409_56
   196 0000000000009470    19 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_439
   197 000000000000945e    18 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_441
   198 0000000000009612    22 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_576
   199 00000000000095ab    25 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_580
   200 0000000000009549    12 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_581
   201 0000000000009570    19 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_582
   202 00000000000094ec    12 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_583
   203 00000000000095ee    17 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_589
   204 0000000000009583    20 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_591
   205 0000000000009483    38 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_595
   206 0000000000009628    15 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_597
   207 00000000000095dc    18 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_604
   208 00000000000095c4    24 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_605
   209 0000000000009555    21 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_607
   210 0000000000009509    18 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_610
   211 00000000000094f8    17 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_611
   212 0000000000009597    20 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_614
   213 000000000000953b    14 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_615
   214 00000000000094ca    34 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_617
   215 00000000000095ff    19 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_618
   216 000000000000951b    20 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_622
   217 00000000000094a9    33 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_625
   218 00000000000023a8     0 NOTYPE  LOCAL  DEFAULT     1 LBB800_6
   219 0000000000002420     0 NOTYPE  LOCAL  DEFAULT     1 LBB800_11
   220 00000000000024a0     0 NOTYPE  LOCAL  DEFAULT     1 LBB800_19
   221 0000000000002560     0 NOTYPE  LOCAL  DEFAULT     1 LBB800_31
   222 00000000000025c0     0 NOTYPE  LOCAL  DEFAULT     1 LBB800_33
   223 00000000000027f0     0 NOTYPE  LOCAL  DEFAULT     1 LBB800_53
   224 0000000000002460     0 NOTYPE  LOCAL  DEFAULT     1 LBB800_15
   225 00000000000024d0     0 NOTYPE  LOCAL  DEFAULT     1 LBB800_22
   226 00000000000025e8     0 NOTYPE  LOCAL  DEFAULT     1 LBB800_34
   227 0000000000002610     0 NOTYPE  LOCAL  DEFAULT     1 LBB800_35
   228 00000000000025b0     0 NOTYPE  LOCAL  DEFAULT     1 LBB800_32
   229 0000000000002500     0 NOTYPE  LOCAL  DEFAULT     1 LBB800_25
   230 0000000000002638     0 NOTYPE  LOCAL  DEFAULT     1 LBB800_37
   231 0000000000002658     0 NOTYPE  LOCAL  DEFAULT     1 LBB800_38
   232 0000000000002530     0 NOTYPE  LOCAL  DEFAULT     1 LBB800_28
   233 0000000000002680     0 NOTYPE  LOCAL  DEFAULT     1 LBB800_39
   234 00000000000026a8     0 NOTYPE  LOCAL  DEFAULT     1 LBB800_40
   235 00000000000026d0     0 NOTYPE  LOCAL  DEFAULT     1 LBB800_41
   236 00000000000026f8     0 NOTYPE  LOCAL  DEFAULT     1 LBB800_43
   237 0000000000002750     0 NOTYPE  LOCAL  DEFAULT     1 LBB800_46
   238 0000000000002718     0 NOTYPE  LOCAL  DEFAULT     1 LBB800_44
   239 0000000000002738     0 NOTYPE  LOCAL  DEFAULT     1 LBB800_45
   240 0000000000002628     0 NOTYPE  LOCAL  DEFAULT     1 LBB800_36
   241 0000000000002760     0 NOTYPE  LOCAL  DEFAULT     1 LBB800_47
   242 0000000000002780     0 NOTYPE  LOCAL  DEFAULT     1 LBB800_48
   243 00000000000027e8     0 NOTYPE  LOCAL  DEFAULT     1 LBB800_52
   244 00000000000027a8     0 NOTYPE  LOCAL  DEFAULT     1 LBB800_50
   245 00000000000027d0     0 NOTYPE  LOCAL  DEFAULT     1 LBB800_51
   246 00000000000026e8     0 NOTYPE  LOCAL  DEFAULT     1 LBB800_42
   247 00000000000027f8     0 NOTYPE  LOCAL  DEFAULT     1 LBB800_54
   248 0000000000002798     0 NOTYPE  LOCAL  DEFAULT     1 LBB800_49
   249 000000000000944d    17 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_1174
   250 0000000000001818    72 FUNC    LOCAL  DEFAULT     1 solana_program::pubkey::Pubkey::new_from_array
   251 0000000000001860  1040 FUNC    LOCAL  DEFAULT     1 solana_program::program::invoke_signed_unchecked
   252 0000000000001048  2000 FUNC    LOCAL  DEFAULT     1 solana_program::entrypoint::deserialize
   253 0000000000001c70   840 FUNC    LOCAL  DEFAULT     1 solana_program::program_error::<impl core::convert::From<solana_program::program_error::ProgramError> for u64>::from
   254 0000000000002350  1200 FUNC    LOCAL  DEFAULT     1 <solana_program::program_error::ProgramError as core::fmt::Debug>::fmt
   255 0000000000001818    72 FUNC    LOCAL  DEFAULT     1 solana_program::hash::Hash::new_from_array
   256 0000000000001fb8   920 FUNC    LOCAL  DEFAULT     1 <solana_program::program_error::ProgramError as core::convert::From<u64>>::from
   257 0000000000001818    72 FUNC    LOCAL  DEFAULT     1 <solana_program::hash::Hash as core::convert::From<[u8; _]>>::from
   258 0000000000001818    72 FUNC    LOCAL  DEFAULT     1 solana_program::blake3::Hash::new_from_array
   259 0000000000001818    72 FUNC    LOCAL  DEFAULT     1 solana_program::keccak::Hash::new_from_array
   260 0000000000001818    72 FUNC    LOCAL  DEFAULT     1 solana_program::poseidon::PoseidonHash::new
   261 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS borsh.2b9d5515-cgu.0
   262 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS blake3.16b12cb4-cgu.0
   263 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS solana_frozen_abi.306a4dc5-cgu.0
   264 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS bs58.8f95417d-cgu.0
   265 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS keccak.19ec53ef-cgu.0
   266 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS bincode.809811e2-cgu.0
   267 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS sha2.81e645d3-cgu.0
   268 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS log.f09b90c4-cgu.0
   269 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS borsh.fad84bb8-cgu.0
   270 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS serde.68c74688-cgu.0
   271 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS std.d7b7b33a-cgu.0
   272 0000000000002820    16 FUNC    LOCAL  DEFAULT     1 std::sys::sbf::sol_log
   273 0000000000009637    46 OBJECT  LOCAL  DEFAULT     2 .Lanon.fb4e1c59d0159df624f7a95b26a9fe09.583
   274 0000000000002810    16 FUNC    LOCAL  DEFAULT     1 rust_begin_unwind
   275 0000000000002888    16 FUNC    LOCAL  HIDDEN      1 __rg_oom
   276 0000000000002830    24 FUNC    LOCAL  DEFAULT     1 std::sys::sbf::panic
   277 0000000000002848    16 FUNC    LOCAL  DEFAULT     1 std::sys::sbf::abort_internal
   278 0000000000002800    16 FUNC    LOCAL  DEFAULT     1 std::process::abort
   279 0000000000002858    48 FUNC    LOCAL  DEFAULT     1 std::alloc::rust_oom
   280 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS panic_abort.0b6bece0-cgu.0
   281 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS hashbrown.c1047d68-cgu.0
   282 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS alloc.8cf698d7-cgu.0
   283 0000000000002898     8 FUNC    LOCAL  DEFAULT     1 core::ptr::drop_in_place<&u8>
   284 00000000000028a0    32 FUNC    LOCAL  DEFAULT     1 <&mut W as core::fmt::Write>::write_char
   285 0000000000003178   696 FUNC    LOCAL  DEFAULT     1 alloc::string::String::push
   286 00000000000028c0   112 FUNC    LOCAL  DEFAULT     1 <&mut W as core::fmt::Write>::write_fmt
   287 000000000000a3f0    48 OBJECT  LOCAL  DEFAULT     3 .Lanon.1cbdf950b7101fa7b327899e6763c1e7.1
   288 0000000000002930   168 FUNC    LOCAL  DEFAULT     1 <&mut W as core::fmt::Write>::write_str
   289 0000000000002990     0 NOTYPE  LOCAL  DEFAULT     1 LBB20_2
   290 00000000000029d8   384 FUNC    LOCAL  DEFAULT     1 alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle
   291 0000000000002a08     0 NOTYPE  LOCAL  DEFAULT     1 LBB21_2
   292 0000000000002b38     0 NOTYPE  LOCAL  DEFAULT     1 LBB21_15
   293 0000000000002a40     0 NOTYPE  LOCAL  DEFAULT     1 LBB21_5
   294 0000000000002a50     0 NOTYPE  LOCAL  DEFAULT     1 LBB21_7
   295 0000000000002aa0     0 NOTYPE  LOCAL  DEFAULT     1 LBB21_9
   296 0000000000002ab0     0 NOTYPE  LOCAL  DEFAULT     1 LBB21_10
   297 0000000000002cd0   360 FUNC    LOCAL  DEFAULT     1 alloc::raw_vec::finish_grow
   298 0000000000002b10     0 NOTYPE  LOCAL  DEFAULT     1 LBB21_13
   299 0000000000002b08     0 NOTYPE  LOCAL  DEFAULT     1 LBB21_12
   300 0000000000002b48     0 NOTYPE  LOCAL  DEFAULT     1 LBB21_16
   301 0000000000002b58   376 FUNC    LOCAL  DEFAULT     1 alloc::raw_vec::RawVec<T,A>::reserve_for_push
   302 0000000000002b80     0 NOTYPE  LOCAL  DEFAULT     1 LBB22_2
   303 0000000000002cb0     0 NOTYPE  LOCAL  DEFAULT     1 LBB22_15
   304 0000000000002bb8     0 NOTYPE  LOCAL  DEFAULT     1 LBB22_5
   305 0000000000002bc8     0 NOTYPE  LOCAL  DEFAULT     1 LBB22_7
   306 0000000000002c18     0 NOTYPE  LOCAL  DEFAULT     1 LBB22_9
   307 0000000000002c28     0 NOTYPE  LOCAL  DEFAULT     1 LBB22_10
   308 0000000000002c88     0 NOTYPE  LOCAL  DEFAULT     1 LBB22_13
   309 0000000000002c80     0 NOTYPE  LOCAL  DEFAULT     1 LBB22_12
   310 0000000000002cc0     0 NOTYPE  LOCAL  DEFAULT     1 LBB22_16
   311 0000000000002d50     0 NOTYPE  LOCAL  DEFAULT     1 LBB23_2
   312 0000000000002dd0     0 NOTYPE  LOCAL  DEFAULT     1 LBB23_8
   313 0000000000002d78     0 NOTYPE  LOCAL  DEFAULT     1 LBB23_7
   314 0000000000002e10     0 NOTYPE  LOCAL  DEFAULT     1 LBB23_10
   315 0000000000002db0     0 NOTYPE  LOCAL  DEFAULT     1 LBB23_11
   316 0000000000002e28     0 NOTYPE  LOCAL  DEFAULT     1 LBB23_3
   317 000000000000a420    16 OBJECT  LOCAL  DEFAULT     3 .Lanon.1cbdf950b7101fa7b327899e6763c1e7.6
   318 0000000000009668     0 OBJECT  LOCAL  DEFAULT     2 .Lanon.1cbdf950b7101fa7b327899e6763c1e7.3
   319 000000000000a430    24 OBJECT  LOCAL  DEFAULT     3 .Lanon.1cbdf950b7101fa7b327899e6763c1e7.7
   320 0000000000003010     0 NOTYPE  LOCAL  DEFAULT     1 LBB73_4
   321 0000000000002f28     0 NOTYPE  LOCAL  DEFAULT     1 LBB73_2
   322 0000000000002fe0     0 NOTYPE  LOCAL  DEFAULT     1 LBB73_11
   323 0000000000002f90     0 NOTYPE  LOCAL  DEFAULT     1 LBB73_7
   324 0000000000003040     0 NOTYPE  LOCAL  DEFAULT     1 LBB73_16
   325 0000000000002fc8     0 NOTYPE  LOCAL  DEFAULT     1 LBB73_9
   326 00000000000030d8     0 NOTYPE  LOCAL  DEFAULT     1 LBB73_14
   327 0000000000003120     0 NOTYPE  LOCAL  DEFAULT     1 LBB73_18
   328 0000000000009695    51 OBJECT  LOCAL  DEFAULT     2 .Lanon.1cbdf950b7101fa7b327899e6763c1e7.35
   329 000000000000a448    32 OBJECT  LOCAL  DEFAULT     3 .Lanon.1cbdf950b7101fa7b327899e6763c1e7.36
   330 000000000000a468    24 OBJECT  LOCAL  DEFAULT     3 .Lanon.1cbdf950b7101fa7b327899e6763c1e7.38
   331 0000000000009684    17 OBJECT  LOCAL  DEFAULT     2 .Lanon.1cbdf950b7101fa7b327899e6763c1e7.5
   332 0000000000003220     0 NOTYPE  LOCAL  DEFAULT     1 LBB84_2
   333 00000000000031d8     0 NOTYPE  LOCAL  DEFAULT     1 LBB84_8
   334 0000000000003280     0 NOTYPE  LOCAL  DEFAULT     1 LBB84_5
   335 00000000000033a0     0 NOTYPE  LOCAL  DEFAULT     1 LBB84_9
   336 0000000000003250     0 NOTYPE  LOCAL  DEFAULT     1 LBB84_4
   337 0000000000003428     0 NOTYPE  LOCAL  DEFAULT     1 LBB84_12
   338 0000000000003340     0 NOTYPE  LOCAL  DEFAULT     1 LBB84_7
   339 00000000000033e8     0 NOTYPE  LOCAL  DEFAULT     1 LBB84_11
   340 0000000000009668    28 OBJECT  LOCAL  DEFAULT     2 .Lanon.1cbdf950b7101fa7b327899e6763c1e7.4
   341 00000000000096c8    24 OBJECT  LOCAL  DEFAULT     2 .Lanon.1cbdf950b7101fa7b327899e6763c1e7.37
   342 0000000000002e38   136 FUNC    LOCAL  DEFAULT     1 alloc::raw_vec::capacity_overflow
   343 0000000000002ec0    16 FUNC    LOCAL  DEFAULT     1 alloc::alloc::handle_alloc_error
   344 0000000000002ee0   664 FUNC    LOCAL  DEFAULT     1 alloc::fmt::format::format_inner
   345 0000000000002ed0    16 FUNC    LOCAL  DEFAULT     1 alloc::alloc::handle_alloc_error::rt_error
   346 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS core.b81ce177-cgu.0
   347 0000000000003430    24 FUNC    LOCAL  DEFAULT     1 core::ops::function::FnOnce::call_once
   348 0000000000003448     8 FUNC    LOCAL  DEFAULT     1 core::ptr::drop_in_place<&core::iter::adapters::copied::Copied<core::slice::iter::Iter<u8>>>
   349 00000000000096e0     0 OBJECT  LOCAL  DEFAULT     2 .Lanon.31293869ba758d6c2145a6f3863327cb.2
   350 000000000000a480    16 OBJECT  LOCAL  DEFAULT     3 .Lanon.31293869ba758d6c2145a6f3863327cb.164
   351 0000000000003450   240 FUNC    LOCAL  DEFAULT     1 <core::ops::range::Range<Idx> as core::fmt::Debug>::fmt
   352 00000000000088e8   656 FUNC    LOCAL  DEFAULT     1 core::fmt::num::<impl core::fmt::Debug for usize>::fmt
   353 0000000000003500     0 NOTYPE  LOCAL  DEFAULT     1 LBB96_2
   354 0000000000003510     0 NOTYPE  LOCAL  DEFAULT     1 LBB96_3
   355 0000000000003540    24 FUNC    LOCAL  DEFAULT     1 <T as core::any::Any>::type_id
   356 000000000000a490    32 OBJECT  LOCAL  DEFAULT     3 .Lanon.31293869ba758d6c2145a6f3863327cb.206
   357 0000000000008f00    48 FUNC    LOCAL  DEFAULT     1 <&T as core::fmt::Display>::fmt
   358 000000000000a4b0    48 OBJECT  LOCAL  DEFAULT     3 .Lanon.31293869ba758d6c2145a6f3863327cb.226
   359 0000000000009789    12 OBJECT  LOCAL  DEFAULT     2 .Lanon.31293869ba758d6c2145a6f3863327cb.227
   360 0000000000003898     0 NOTYPE  LOCAL  DEFAULT     1 LBB168_6
   361 0000000000003690     0 NOTYPE  LOCAL  DEFAULT     1 LBB168_3
   362 0000000000008f30   104 FUNC    LOCAL  DEFAULT     1 <&T as core::fmt::Display>::fmt
   363 000000000000a4e0    32 OBJECT  LOCAL  DEFAULT     3 .Lanon.31293869ba758d6c2145a6f3863327cb.230
   364 0000000000003798     0 NOTYPE  LOCAL  DEFAULT     1 LBB168_5
   365 0000000000008f98    56 FUNC    LOCAL  DEFAULT     1 <&T as core::fmt::Display>::fmt
   366 000000000000a500    32 OBJECT  LOCAL  DEFAULT     3 .Lanon.31293869ba758d6c2145a6f3863327cb.231
   367 0000000000008ed0    48 FUNC    LOCAL  DEFAULT     1 <&T as core::fmt::Debug>::fmt
   368 000000000000a520    32 OBJECT  LOCAL  DEFAULT     3 .Lanon.31293869ba758d6c2145a6f3863327cb.250
   369 0000000000003c80     0 NOTYPE  LOCAL  DEFAULT     1 LBB184_1
   370 0000000000003c38     0 NOTYPE  LOCAL  DEFAULT     1 LBB184_19
   371 0000000000003f38     0 NOTYPE  LOCAL  DEFAULT     1 LBB184_21
   372 0000000000003ee8     0 NOTYPE  LOCAL  DEFAULT     1 LBB184_14
   373 0000000000003eb8     0 NOTYPE  LOCAL  DEFAULT     1 LBB184_13
   374 0000000000003ca8     0 NOTYPE  LOCAL  DEFAULT     1 LBB184_3
   375 0000000000003d28     0 NOTYPE  LOCAL  DEFAULT     1 LBB184_5
   376 0000000000003db0     0 NOTYPE  LOCAL  DEFAULT     1 LBB184_10
   377 0000000000003d98     0 NOTYPE  LOCAL  DEFAULT     1 LBB184_9
   378 0000000000003d48     0 NOTYPE  LOCAL  DEFAULT     1 LBB184_7
   379 0000000000003de8     0 NOTYPE  LOCAL  DEFAULT     1 LBB184_12
   380 0000000000003dd0     0 NOTYPE  LOCAL  DEFAULT     1 LBB184_11
   381 0000000000003e30     0 NOTYPE  LOCAL  DEFAULT     1 LBB184_15
   382 0000000000003ef8     0 NOTYPE  LOCAL  DEFAULT     1 LBB184_20
   383 0000000000003e48     0 NOTYPE  LOCAL  DEFAULT     1 LBB184_16
   384 0000000000003f40     0 NOTYPE  LOCAL  DEFAULT     1 LBB184_22
   385 000000000000979e     2 OBJECT  LOCAL  DEFAULT     2 .Lanon.31293869ba758d6c2145a6f3863327cb.255
   386 000000000000979a     2 OBJECT  LOCAL  DEFAULT     2 .Lanon.31293869ba758d6c2145a6f3863327cb.249
   387 000000000000a540    48 OBJECT  LOCAL  DEFAULT     3 .Lanon.31293869ba758d6c2145a6f3863327cb.251
   388 000000000000979c     2 OBJECT  LOCAL  DEFAULT     2 .Lanon.31293869ba758d6c2145a6f3863327cb.254
   389 0000000000003fa0     0 NOTYPE  LOCAL  DEFAULT     1 LBB188_2
   390 0000000000003f78     0 NOTYPE  LOCAL  DEFAULT     1 LBB188_15
   391 00000000000040a0     0 NOTYPE  LOCAL  DEFAULT     1 LBB188_8
   392 00000000000097a2     1 OBJECT  LOCAL  DEFAULT     2 .Lanon.31293869ba758d6c2145a6f3863327cb.263
   393 0000000000004008     0 NOTYPE  LOCAL  DEFAULT     1 LBB188_5
   394 0000000000004030     0 NOTYPE  LOCAL  DEFAULT     1 LBB188_7
   395 0000000000004108     0 NOTYPE  LOCAL  DEFAULT     1 LBB188_11
   396 00000000000097a0     2 OBJECT  LOCAL  DEFAULT     2 .Lanon.31293869ba758d6c2145a6f3863327cb.262
   397 0000000000004260     0 NOTYPE  LOCAL  DEFAULT     1 LBB188_13
   398 000000000000970b     1 OBJECT  LOCAL  DEFAULT     2 .Lanon.31293869ba758d6c2145a6f3863327cb.157
   399 00000000000097a3     1 OBJECT  LOCAL  DEFAULT     2 .Lanon.31293869ba758d6c2145a6f3863327cb.264
   400 00000000000097c1   200 OBJECT  LOCAL  DEFAULT     2 .Lanon.31293869ba758d6c2145a6f3863327cb.287
   401 0000000000004270   488 FUNC    LOCAL  DEFAULT     1 core::fmt::Write::write_char
   402 0000000000004378     0 NOTYPE  LOCAL  DEFAULT     1 LBB210_6
   403 0000000000004390     0 NOTYPE  LOCAL  DEFAULT     1 LBB210_5
   404 00000000000043d8     0 NOTYPE  LOCAL  DEFAULT     1 LBB210_4
   405 0000000000004438     0 NOTYPE  LOCAL  DEFAULT     1 LBB210_7
   406 0000000000004458   104 FUNC    LOCAL  DEFAULT     1 core::fmt::Write::write_fmt
   407 000000000000a588    48 OBJECT  LOCAL  DEFAULT     3 .Lanon.31293869ba758d6c2145a6f3863327cb.290
   408 00000000000044c0    24 FUNC    LOCAL  DEFAULT     1 <&mut W as core::fmt::Write>::write_str
   409 00000000000044d8   496 FUNC    LOCAL  DEFAULT     1 <&mut W as core::fmt::Write>::write_char
   410 00000000000045e8     0 NOTYPE  LOCAL  DEFAULT     1 LBB213_6
   411 0000000000004600     0 NOTYPE  LOCAL  DEFAULT     1 LBB213_5
   412 0000000000004648     0 NOTYPE  LOCAL  DEFAULT     1 LBB213_4
   413 00000000000046a8     0 NOTYPE  LOCAL  DEFAULT     1 LBB213_7
   414 00000000000046c8   112 FUNC    LOCAL  DEFAULT     1 <&mut W as core::fmt::Write>::write_fmt
   415 0000000000004890     0 NOTYPE  LOCAL  DEFAULT     1 LBB219_4
   416 0000000000004b10     0 NOTYPE  LOCAL  DEFAULT     1 LBB219_23
   417 00000000000047e8     0 NOTYPE  LOCAL  DEFAULT     1 LBB219_3
   418 0000000000004800     0 NOTYPE  LOCAL  DEFAULT     1 LBB219_25
   419 0000000000004830     0 NOTYPE  LOCAL  DEFAULT     1 LBB219_24
   420 0000000000004b98     0 NOTYPE  LOCAL  DEFAULT     1 LBB219_22
   421 00000000000048d0     0 NOTYPE  LOCAL  DEFAULT     1 LBB219_6
   422 0000000000004950     0 NOTYPE  LOCAL  DEFAULT     1 LBB219_20
   423 00000000000048e0     0 NOTYPE  LOCAL  DEFAULT     1 LBB219_7
   424 0000000000004988     0 NOTYPE  LOCAL  DEFAULT     1 LBB219_10
   425 0000000000004998     0 NOTYPE  LOCAL  DEFAULT     1 LBB219_11
   426 00000000000049e8     0 NOTYPE  LOCAL  DEFAULT     1 LBB219_13
   427 0000000000004a28     0 NOTYPE  LOCAL  DEFAULT     1 LBB219_16
   428 0000000000004a38     0 NOTYPE  LOCAL  DEFAULT     1 LBB219_17
   429 0000000000004a88     0 NOTYPE  LOCAL  DEFAULT     1 LBB219_19
   430 0000000000004b30     0 NOTYPE  LOCAL  DEFAULT     1 LBB219_27
   431 0000000000004b88     0 NOTYPE  LOCAL  DEFAULT     1 LBB219_28
   432 0000000000004ba0     0 NOTYPE  LOCAL  DEFAULT     1 LBB219_29
   433 0000000000004c18     0 NOTYPE  LOCAL  DEFAULT     1 LBB220_2
   434 0000000000004c40     0 NOTYPE  LOCAL  DEFAULT     1 LBB220_4
   435 0000000000004c30     0 NOTYPE  LOCAL  DEFAULT     1 LBB220_3
   436 0000000000004c78     0 NOTYPE  LOCAL  DEFAULT     1 LBB220_14
   437 0000000000004d90     0 NOTYPE  LOCAL  DEFAULT     1 LBB220_6
   438 0000000000004ce8     0 NOTYPE  LOCAL  DEFAULT     1 LBB220_16
   439 0000000000005208   192 FUNC    LOCAL  DEFAULT     1 core::fmt::Formatter::pad_integral::write_prefix
   440 0000000000004e58     0 NOTYPE  LOCAL  DEFAULT     1 LBB220_43
   441 0000000000004e28     0 NOTYPE  LOCAL  DEFAULT     1 LBB220_19
   442 0000000000004dd8     0 NOTYPE  LOCAL  DEFAULT     1 LBB220_18
   443 0000000000004d10     0 NOTYPE  LOCAL  DEFAULT     1 LBB220_20
   444 0000000000004f38     0 NOTYPE  LOCAL  DEFAULT     1 LBB220_29
   445 0000000000004d38     0 NOTYPE  LOCAL  DEFAULT     1 LBB220_22
   446 0000000000005030     0 NOTYPE  LOCAL  DEFAULT     1 LBB220_25
   447 0000000000005018     0 NOTYPE  LOCAL  DEFAULT     1 LBB220_44
   448 0000000000004e70     0 NOTYPE  LOCAL  DEFAULT     1 LBB220_8
   449 0000000000004ed0     0 NOTYPE  LOCAL  DEFAULT     1 LBB220_13
   450 0000000000004f00     0 NOTYPE  LOCAL  DEFAULT     1 LBB220_10
   451 0000000000004eb0     0 NOTYPE  LOCAL  DEFAULT     1 LBB220_12
   452 0000000000004fd8     0 NOTYPE  LOCAL  DEFAULT     1 LBB220_31
   453 00000000000051a8     0 NOTYPE  LOCAL  DEFAULT     1 LBB220_33
   454 0000000000005068     0 NOTYPE  LOCAL  DEFAULT     1 LBB220_26
   455 00000000000050a8     0 NOTYPE  LOCAL  DEFAULT     1 LBB220_28
   456 0000000000005138     0 NOTYPE  LOCAL  DEFAULT     1 LBB220_38
   457 0000000000005188     0 NOTYPE  LOCAL  DEFAULT     1 LBB220_41
   458 0000000000005198     0 NOTYPE  LOCAL  DEFAULT     1 LBB220_42
   459 0000000000005280     0 NOTYPE  LOCAL  DEFAULT     1 LBB221_2
   460 0000000000005290     0 NOTYPE  LOCAL  DEFAULT     1 LBB221_3
   461 0000000000005298     0 NOTYPE  LOCAL  DEFAULT     1 LBB221_4
   462 00000000000052f0     0 NOTYPE  LOCAL  DEFAULT     1 LBB222_2
   463 0000000000005370     0 NOTYPE  LOCAL  DEFAULT     1 LBB222_3
   464 0000000000005320     0 NOTYPE  LOCAL  DEFAULT     1 LBB222_6
   465 0000000000005610     0 NOTYPE  LOCAL  DEFAULT     1 LBB222_20
   466 0000000000005468     0 NOTYPE  LOCAL  DEFAULT     1 LBB222_7
   467 0000000000005528     0 NOTYPE  LOCAL  DEFAULT     1 LBB222_4
   468 0000000000005390     0 NOTYPE  LOCAL  DEFAULT     1 LBB222_12
   469 0000000000005450     0 NOTYPE  LOCAL  DEFAULT     1 LBB222_14
   470 0000000000005550     0 NOTYPE  LOCAL  DEFAULT     1 LBB222_15
   471 0000000000005508     0 NOTYPE  LOCAL  DEFAULT     1 LBB222_11
   472 0000000000005538     0 NOTYPE  LOCAL  DEFAULT     1 LBB222_5
   473 0000000000005968     0 NOTYPE  LOCAL  DEFAULT     1 LBB222_21
   474 0000000000005670     0 NOTYPE  LOCAL  DEFAULT     1 LBB222_31
   475 00000000000056a8     0 NOTYPE  LOCAL  DEFAULT     1 LBB222_34
   476 0000000000005700     0 NOTYPE  LOCAL  DEFAULT     1 LBB222_39
   477 0000000000005730     0 NOTYPE  LOCAL  DEFAULT     1 LBB222_36
   478 00000000000056e0     0 NOTYPE  LOCAL  DEFAULT     1 LBB222_38
   479 0000000000005768     0 NOTYPE  LOCAL  DEFAULT     1 LBB222_49
   480 0000000000005798     0 NOTYPE  LOCAL  DEFAULT     1 LBB222_42
   481 0000000000005808     0 NOTYPE  LOCAL  DEFAULT     1 LBB222_45
   482 00000000000057f0     0 NOTYPE  LOCAL  DEFAULT     1 LBB222_57
   483 0000000000005848     0 NOTYPE  LOCAL  DEFAULT     1 LBB222_46
   484 0000000000005890     0 NOTYPE  LOCAL  DEFAULT     1 LBB222_48
   485 00000000000058f0     0 NOTYPE  LOCAL  DEFAULT     1 LBB222_52
   486 0000000000005948     0 NOTYPE  LOCAL  DEFAULT     1 LBB222_55
   487 00000000000059e0     0 NOTYPE  LOCAL  DEFAULT     1 LBB222_25
   488 00000000000059a0     0 NOTYPE  LOCAL  DEFAULT     1 LBB222_24
   489 00000000000059e8     0 NOTYPE  LOCAL  DEFAULT     1 LBB222_26
   490 00000000000059f8     0 NOTYPE  LOCAL  DEFAULT     1 LBB222_28
   491 0000000000005a10     0 NOTYPE  LOCAL  DEFAULT     1 LBB222_30
   492 0000000000005b00     0 NOTYPE  LOCAL  DEFAULT     1 LBB246_2
   493 0000000000005c30     0 NOTYPE  LOCAL  DEFAULT     1 LBB246_9
   494 0000000000005ba0     0 NOTYPE  LOCAL  DEFAULT     1 LBB246_7
   495 0000000000005be8     0 NOTYPE  LOCAL  DEFAULT     1 LBB246_8
   496 0000000000005c50     0 NOTYPE  LOCAL  DEFAULT     1 LBB246_11
   497 00000000000065a0     0 NOTYPE  LOCAL  DEFAULT     1 LBB260_70
   498 0000000000006530     0 NOTYPE  LOCAL  DEFAULT     1 LBB260_13
   499 0000000000005d18     0 NOTYPE  LOCAL  DEFAULT     1 LBB260_3
   500 0000000000005e58     0 NOTYPE  LOCAL  DEFAULT     1 LBB260_14
   501 0000000000005d98     0 NOTYPE  LOCAL  DEFAULT     1 LBB260_5
   502 0000000000005e70     0 NOTYPE  LOCAL  DEFAULT     1 LBB260_15
   503 00000000000064f8     0 NOTYPE  LOCAL  DEFAULT     1 LBB260_8
   504 0000000000005ec8     0 NOTYPE  LOCAL  DEFAULT     1 LBB260_19
   505 0000000000006068     0 NOTYPE  LOCAL  DEFAULT     1 LBB260_29
   506 0000000000006470     0 NOTYPE  LOCAL  DEFAULT     1 LBB260_23
   507 0000000000005eb8     0 NOTYPE  LOCAL  DEFAULT     1 LBB260_25
   508 0000000000005ee0     0 NOTYPE  LOCAL  DEFAULT     1 LBB260_22
   509 0000000000006480     0 NOTYPE  LOCAL  DEFAULT     1 LBB260_24
   510 0000000000006098     0 NOTYPE  LOCAL  DEFAULT     1 LBB260_26
   511 0000000000005f30     0 NOTYPE  LOCAL  DEFAULT     1 LBB260_28
   512 0000000000006438     0 NOTYPE  LOCAL  DEFAULT     1 LBB260_68
   513 00000000000064c0     0 NOTYPE  LOCAL  DEFAULT     1 LBB260_38
   514 00000000000060e0     0 NOTYPE  LOCAL  DEFAULT     1 LBB260_34
   515 00000000000060a8     0 NOTYPE  LOCAL  DEFAULT     1 LBB260_33
   516 0000000000006100     0 NOTYPE  LOCAL  DEFAULT     1 LBB260_39
   517 0000000000006490     0 NOTYPE  LOCAL  DEFAULT     1 LBB260_37
   518 00000000000063d0     0 NOTYPE  LOCAL  DEFAULT     1 LBB260_41
   519 0000000000006168     0 NOTYPE  LOCAL  DEFAULT     1 LBB260_43
   520 0000000000006190     0 NOTYPE  LOCAL  DEFAULT     1 LBB260_46
   521 0000000000006208     0 NOTYPE  LOCAL  DEFAULT     1 LBB260_62
   522 0000000000006248     0 NOTYPE  LOCAL  DEFAULT     1 LBB260_63
   523 00000000000063b0     0 NOTYPE  LOCAL  DEFAULT     1 LBB260_60
   524 00000000000062b8     0 NOTYPE  LOCAL  DEFAULT     1 LBB260_51
   525 00000000000062d8     0 NOTYPE  LOCAL  DEFAULT     1 LBB260_54
   526 0000000000006428     0 NOTYPE  LOCAL  DEFAULT     1 LBB260_67
   527 0000000000006378     0 NOTYPE  LOCAL  DEFAULT     1 LBB260_57
   528 0000000000006390     0 NOTYPE  LOCAL  DEFAULT     1 LBB260_58
   529 00000000000063a0     0 NOTYPE  LOCAL  DEFAULT     1 LBB260_59
   530 0000000000006338     0 NOTYPE  LOCAL  DEFAULT     1 LBB260_56
   531 000000000000a5b8    24 OBJECT  LOCAL  DEFAULT     3 .Lanon.31293869ba758d6c2145a6f3863327cb.299
   532 00000000000065b0     0 NOTYPE  LOCAL  DEFAULT     1 LBB260_11
   533 00000000000065e8     0 NOTYPE  LOCAL  DEFAULT     1 LBB260_12
   534 000000000000a5d0    24 OBJECT  LOCAL  DEFAULT     3 .Lanon.31293869ba758d6c2145a6f3863327cb.300
   535 0000000000006b18     0 NOTYPE  LOCAL  DEFAULT     1 LBB262_39
   536 00000000000066c8     0 NOTYPE  LOCAL  DEFAULT     1 LBB262_5
   537 0000000000006888     0 NOTYPE  LOCAL  DEFAULT     1 LBB262_15
   538 0000000000006870     0 NOTYPE  LOCAL  DEFAULT     1 LBB262_9
   539 00000000000066b8     0 NOTYPE  LOCAL  DEFAULT     1 LBB262_11
   540 00000000000066e0     0 NOTYPE  LOCAL  DEFAULT     1 LBB262_8
   541 0000000000006880     0 NOTYPE  LOCAL  DEFAULT     1 LBB262_10
   542 0000000000006860     0 NOTYPE  LOCAL  DEFAULT     1 LBB262_12
   543 0000000000006720     0 NOTYPE  LOCAL  DEFAULT     1 LBB262_14
   544 0000000000006ac0     0 NOTYPE  LOCAL  DEFAULT     1 LBB262_16
   545 0000000000006898     0 NOTYPE  LOCAL  DEFAULT     1 LBB262_18
   546 00000000000068c0     0 NOTYPE  LOCAL  DEFAULT     1 LBB262_21
   547 0000000000006938     0 NOTYPE  LOCAL  DEFAULT     1 LBB262_37
   548 0000000000006978     0 NOTYPE  LOCAL  DEFAULT     1 LBB262_38
   549 0000000000006aa0     0 NOTYPE  LOCAL  DEFAULT     1 LBB262_35
   550 00000000000069a8     0 NOTYPE  LOCAL  DEFAULT     1 LBB262_26
   551 00000000000069c8     0 NOTYPE  LOCAL  DEFAULT     1 LBB262_29
   552 0000000000006a68     0 NOTYPE  LOCAL  DEFAULT     1 LBB262_32
   553 0000000000006a80     0 NOTYPE  LOCAL  DEFAULT     1 LBB262_33
   554 0000000000006a90     0 NOTYPE  LOCAL  DEFAULT     1 LBB262_34
   555 0000000000006a28     0 NOTYPE  LOCAL  DEFAULT     1 LBB262_31
   556 000000000000a570    24 OBJECT  LOCAL  DEFAULT     3 .Lanon.31293869ba758d6c2145a6f3863327cb.283
   557 00000000000097bf     2 OBJECT  LOCAL  DEFAULT     2 .Lanon.31293869ba758d6c2145a6f3863327cb.286
   558 0000000000006d58     0 NOTYPE  LOCAL  DEFAULT     1 LBB267_4
   559 0000000000006b50     0 NOTYPE  LOCAL  DEFAULT     1 LBB267_1
   560 0000000000006cc8     0 NOTYPE  LOCAL  DEFAULT     1 LBB267_12
   561 0000000000006c18     0 NOTYPE  LOCAL  DEFAULT     1 LBB267_3
   562 0000000000006bb8     0 NOTYPE  LOCAL  DEFAULT     1 LBB267_18
   563 0000000000006c80     0 NOTYPE  LOCAL  DEFAULT     1 LBB267_10
   564 000000000000a5e8    24 OBJECT  LOCAL  DEFAULT     3 .Lanon.31293869ba758d6c2145a6f3863327cb.307
   565 0000000000006df0     0 NOTYPE  LOCAL  DEFAULT     1 LBB267_17
   566 0000000000006d00     0 NOTYPE  LOCAL  DEFAULT     1 LBB267_14
   567 0000000000006dd8     0 NOTYPE  LOCAL  DEFAULT     1 LBB267_16
   568 0000000000006d70     0 NOTYPE  LOCAL  DEFAULT     1 LBB267_6
   569 0000000000006d88     0 NOTYPE  LOCAL  DEFAULT     1 LBB267_8
   570 0000000000006e18   224 FUNC    LOCAL  DEFAULT     1 core::slice::index::slice_start_index_len_fail_rt
   571 000000000000a600    32 OBJECT  LOCAL  DEFAULT     3 .Lanon.31293869ba758d6c2145a6f3863327cb.313
   572 0000000000006f08   224 FUNC    LOCAL  DEFAULT     1 core::slice::index::slice_end_index_len_fail_rt
   573 000000000000a620    32 OBJECT  LOCAL  DEFAULT     3 .Lanon.31293869ba758d6c2145a6f3863327cb.315
   574 0000000000006ff8   224 FUNC    LOCAL  DEFAULT     1 core::slice::index::slice_index_order_fail_rt
   575 000000000000a640    32 OBJECT  LOCAL  DEFAULT     3 .Lanon.31293869ba758d6c2145a6f3863327cb.318
   576 0000000000007538     0 NOTYPE  LOCAL  DEFAULT     1 LBB291_15
   577 00000000000071a0     0 NOTYPE  LOCAL  DEFAULT     1 LBB291_8
   578 00000000000071e0     0 NOTYPE  LOCAL  DEFAULT     1 LBB291_5
   579 0000000000007180     0 NOTYPE  LOCAL  DEFAULT     1 LBB291_7
   580 0000000000007238     0 NOTYPE  LOCAL  DEFAULT     1 LBB291_13
   581 0000000000007260     0 NOTYPE  LOCAL  DEFAULT     1 LBB291_10
   582 0000000000007218     0 NOTYPE  LOCAL  DEFAULT     1 LBB291_12
   583 0000000000007498     0 NOTYPE  LOCAL  DEFAULT     1 LBB291_14
   584 0000000000007298     0 NOTYPE  LOCAL  DEFAULT     1 LBB291_25
   585 00000000000073b0     0 NOTYPE  LOCAL  DEFAULT     1 LBB291_27
   586 00000000000075f8     0 NOTYPE  LOCAL  DEFAULT     1 LBB291_33
   587 0000000000007558     0 NOTYPE  LOCAL  DEFAULT     1 LBB291_31
   588 0000000000007680     0 NOTYPE  LOCAL  DEFAULT     1 LBB291_20
   589 00000000000074d8     0 NOTYPE  LOCAL  DEFAULT     1 LBB291_23
   590 0000000000007688     0 NOTYPE  LOCAL  DEFAULT     1 LBB291_17
   591 0000000000007590     0 NOTYPE  LOCAL  DEFAULT     1 LBB291_32
   592 0000000000007660     0 NOTYPE  LOCAL  DEFAULT     1 LBB291_19
   593 0000000000007758     0 NOTYPE  LOCAL  DEFAULT     1 LBB313_2
   594 00000000000076f0     0 NOTYPE  LOCAL  DEFAULT     1 LBB313_1
   595 0000000000007730     0 NOTYPE  LOCAL  DEFAULT     1 LBB313_4
   596 00000000000079c0     0 NOTYPE  LOCAL  DEFAULT     1 LBB313_6
   597 0000000000007748     0 NOTYPE  LOCAL  DEFAULT     1 LBB313_8
   598 00000000000079f0     0 NOTYPE  LOCAL  DEFAULT     1 LBB313_7
   599 0000000000007760     0 NOTYPE  LOCAL  DEFAULT     1 LBB313_3
   600 0000000000007780     0 NOTYPE  LOCAL  DEFAULT     1 LBB313_10
   601 00000000000078a8     0 NOTYPE  LOCAL  DEFAULT     1 LBB313_13
   602 00000000000077b0     0 NOTYPE  LOCAL  DEFAULT     1 LBB313_42
   603 0000000000007a10     0 NOTYPE  LOCAL  DEFAULT     1 LBB313_17
   604 000000000000a690    64 OBJECT  LOCAL  DEFAULT     3 .Lanon.31293869ba758d6c2145a6f3863327cb.391
   605 0000000000007990     0 NOTYPE  LOCAL  DEFAULT     1 LBB313_16
   606 00000000000078b8     0 NOTYPE  LOCAL  DEFAULT     1 LBB313_15
   607 000000000000a660    48 OBJECT  LOCAL  DEFAULT     3 .Lanon.31293869ba758d6c2145a6f3863327cb.387
   608 0000000000007a30     0 NOTYPE  LOCAL  DEFAULT     1 LBB313_9
   609 0000000000007a98     0 NOTYPE  LOCAL  DEFAULT     1 LBB313_21
   610 0000000000007a60     0 NOTYPE  LOCAL  DEFAULT     1 LBB313_20
   611 0000000000007aa0     0 NOTYPE  LOCAL  DEFAULT     1 LBB313_22
   612 0000000000009903     5 OBJECT  LOCAL  DEFAULT     2 .Lanon.31293869ba758d6c2145a6f3863327cb.384
   613 0000000000007bc0     0 NOTYPE  LOCAL  DEFAULT     1 LBB313_32
   614 0000000000007ae8     0 NOTYPE  LOCAL  DEFAULT     1 LBB313_25
   615 0000000000007af8     0 NOTYPE  LOCAL  DEFAULT     1 LBB313_27
   616 0000000000007b40     0 NOTYPE  LOCAL  DEFAULT     1 LBB313_29
   617 000000000000a720    24 OBJECT  LOCAL  DEFAULT     3 .Lanon.31293869ba758d6c2145a6f3863327cb.397
   618 0000000000007b70     0 NOTYPE  LOCAL  DEFAULT     1 LBB313_30
   619 0000000000007be0     0 NOTYPE  LOCAL  DEFAULT     1 LBB313_37
   620 0000000000007d30     0 NOTYPE  LOCAL  DEFAULT     1 LBB313_35
   621 0000000000007d60     0 NOTYPE  LOCAL  DEFAULT     1 LBB313_36
   622 0000000000007d00     0 NOTYPE  LOCAL  DEFAULT     1 LBB313_43
   623 0000000000007d80     0 NOTYPE  LOCAL  DEFAULT     1 LBB313_44
   624 0000000000007c60     0 NOTYPE  LOCAL  DEFAULT     1 LBB313_40
   625 0000000000007d88     0 NOTYPE  LOCAL  DEFAULT     1 LBB313_45
   626 00000000000096e0    43 OBJECT  LOCAL  DEFAULT     2 .Lanon.31293869ba758d6c2145a6f3863327cb.94
   627 0000000000007de0     0 NOTYPE  LOCAL  DEFAULT     1 LBB313_49
   628 000000000000a6d0    80 OBJECT  LOCAL  DEFAULT     3 .Lanon.31293869ba758d6c2145a6f3863327cb.395
   629 0000000000007f30   784 FUNC    LOCAL  DEFAULT     1 core::unicode::printable::check
   630 00000000000080a8     0 NOTYPE  LOCAL  DEFAULT     1 LBB332_3
   631 0000000000007fd8     0 NOTYPE  LOCAL  DEFAULT     1 LBB332_2
   632 0000000000007fb8     0 NOTYPE  LOCAL  DEFAULT     1 LBB332_6
   633 0000000000008010     0 NOTYPE  LOCAL  DEFAULT     1 LBB332_8
   634 00000000000081e0     0 NOTYPE  LOCAL  DEFAULT     1 LBB332_10
   635 0000000000008210     0 NOTYPE  LOCAL  DEFAULT     1 LBB332_11
   636 0000000000008028     0 NOTYPE  LOCAL  DEFAULT     1 LBB332_13
   637 0000000000008078     0 NOTYPE  LOCAL  DEFAULT     1 LBB332_16
   638 0000000000008068     0 NOTYPE  LOCAL  DEFAULT     1 LBB332_15
   639 0000000000008128     0 NOTYPE  LOCAL  DEFAULT     1 LBB332_5
   640 00000000000080f8     0 NOTYPE  LOCAL  DEFAULT     1 LBB332_21
   641 0000000000008170     0 NOTYPE  LOCAL  DEFAULT     1 LBB332_18
   642 00000000000081b0     0 NOTYPE  LOCAL  DEFAULT     1 LBB332_20
   643 000000000000a750    24 OBJECT  LOCAL  DEFAULT     3 .Lanon.31293869ba758d6c2145a6f3863327cb.426
   644 000000000000a738    24 OBJECT  LOCAL  DEFAULT     3 .Lanon.31293869ba758d6c2145a6f3863327cb.425
   645 00000000000083a8     0 NOTYPE  LOCAL  DEFAULT     1 LBB333_7
   646 0000000000008338     0 NOTYPE  LOCAL  DEFAULT     1 LBB333_5
   647 00000000000082c8     0 NOTYPE  LOCAL  DEFAULT     1 LBB333_4
   648 00000000000083b0     0 NOTYPE  LOCAL  DEFAULT     1 LBB333_8
   649 0000000000009d5d   450 OBJECT  LOCAL  DEFAULT     2 .Lanon.31293869ba758d6c2145a6f3863327cb.432
   650 0000000000009c41    88 OBJECT  LOCAL  DEFAULT     2 .Lanon.31293869ba758d6c2145a6f3863327cb.430
   651 0000000000009c99   196 OBJECT  LOCAL  DEFAULT     2 .Lanon.31293869ba758d6c2145a6f3863327cb.431
   652 00000000000083a0     0 NOTYPE  LOCAL  DEFAULT     1 LBB333_6
   653 0000000000009b12   303 OBJECT  LOCAL  DEFAULT     2 .Lanon.31293869ba758d6c2145a6f3863327cb.429
   654 00000000000099a3    80 OBJECT  LOCAL  DEFAULT     2 .Lanon.31293869ba758d6c2145a6f3863327cb.427
   655 00000000000099f3   287 OBJECT  LOCAL  DEFAULT     2 .Lanon.31293869ba758d6c2145a6f3863327cb.428
   656 00000000000083f8     0 NOTYPE  LOCAL  DEFAULT     1 LBB333_10
   657 0000000000008438     0 NOTYPE  LOCAL  DEFAULT     1 LBB333_12
   658 0000000000008478     0 NOTYPE  LOCAL  DEFAULT     1 LBB333_14
   659 00000000000084b0     0 NOTYPE  LOCAL  DEFAULT     1 LBB333_16
   660 0000000000008b78   712 FUNC    LOCAL  DEFAULT     1 core::fmt::num::imp::fmt_u64
   661 00000000000086c0     0 NOTYPE  LOCAL  DEFAULT     1 LBB551_1
   662 0000000000008618     0 NOTYPE  LOCAL  DEFAULT     1 LBB551_3
   663 00000000000086f0     0 NOTYPE  LOCAL  DEFAULT     1 LBB551_6
   664 0000000000008838     0 NOTYPE  LOCAL  DEFAULT     1 LBB552_1
   665 0000000000008790     0 NOTYPE  LOCAL  DEFAULT     1 LBB552_3
   666 0000000000008868     0 NOTYPE  LOCAL  DEFAULT     1 LBB552_6
   667 0000000000008948     0 NOTYPE  LOCAL  DEFAULT     1 LBB569_2
   668 0000000000008928     0 NOTYPE  LOCAL  DEFAULT     1 LBB569_10
   669 0000000000008968     0 NOTYPE  LOCAL  DEFAULT     1 LBB569_11
   670 0000000000008b70     0 NOTYPE  LOCAL  DEFAULT     1 LBB569_9
   671 0000000000008ac0     0 NOTYPE  LOCAL  DEFAULT     1 LBB569_3
   672 00000000000089f8     0 NOTYPE  LOCAL  DEFAULT     1 LBB569_12
   673 0000000000008988     0 NOTYPE  LOCAL  DEFAULT     1 LBB569_14
   674 0000000000008af8     0 NOTYPE  LOCAL  DEFAULT     1 LBB569_8
   675 0000000000008a98     0 NOTYPE  LOCAL  DEFAULT     1 LBB569_7
   676 0000000000008a30     0 NOTYPE  LOCAL  DEFAULT     1 LBB569_5
   677 0000000000008c90     0 NOTYPE  LOCAL  DEFAULT     1 LBB570_4
   678 0000000000008b98     0 NOTYPE  LOCAL  DEFAULT     1 LBB570_2
   679 0000000000008ce8     0 NOTYPE  LOCAL  DEFAULT     1 LBB570_6
   680 0000000000008c98     0 NOTYPE  LOCAL  DEFAULT     1 LBB570_5
   681 0000000000008cb0     0 NOTYPE  LOCAL  DEFAULT     1 LBB570_8
   682 0000000000008d80     0 NOTYPE  LOCAL  DEFAULT     1 LBB570_7
   683 0000000000008dd0     0 NOTYPE  LOCAL  DEFAULT     1 LBB570_9
   684 0000000000009f47     5 OBJECT  LOCAL  DEFAULT     2 .Lanon.31293869ba758d6c2145a6f3863327cb.633
   685 000000000000a780    24 OBJECT  LOCAL  DEFAULT     3 .Lanon.31293869ba758d6c2145a6f3863327cb.726
   686 000000000000a768    24 OBJECT  LOCAL  DEFAULT     3 .Lanon.31293869ba758d6c2145a6f3863327cb.725
   687 0000000000009060     0 NOTYPE  LOCAL  DEFAULT     1 LBB730_1
   688 0000000000009010     0 NOTYPE  LOCAL  DEFAULT     1 LBB730_5
   689 0000000000009040     0 NOTYPE  LOCAL  DEFAULT     1 LBB730_8
   690 00000000000090f0     0 NOTYPE  LOCAL  DEFAULT     1 LBB730_9
   691 0000000000009100     0 NOTYPE  LOCAL  DEFAULT     1 LBB730_10
   692 0000000000009f4c   132 OBJECT  LOCAL  DEFAULT     2 core::unicode::unicode_data::grapheme_extend::SHORT_OFFSET_RUNS
   693 00000000000090d0     0 NOTYPE  LOCAL  DEFAULT     1 LBB730_3
   694 00000000000092d0     0 NOTYPE  LOCAL  DEFAULT     1 LBB730_12
   695 00000000000091a0     0 NOTYPE  LOCAL  DEFAULT     1 LBB730_14
   696 00000000000091c0     0 NOTYPE  LOCAL  DEFAULT     1 LBB730_15
   697 0000000000009290     0 NOTYPE  LOCAL  DEFAULT     1 LBB730_19
   698 0000000000009fd0   727 OBJECT  LOCAL  DEFAULT     2 core::unicode::unicode_data::grapheme_extend::OFFSETS
   699 0000000000009220     0 NOTYPE  LOCAL  DEFAULT     1 LBB730_17
   700 00000000000092a0     0 NOTYPE  LOCAL  DEFAULT     1 LBB730_21
   701 0000000000009288     0 NOTYPE  LOCAL  DEFAULT     1 LBB730_18
   702 000000000000972c     2 OBJECT  LOCAL  DEFAULT     2 .Lanon.31293869ba758d6c2145a6f3863327cb.163
   703 000000000000976e    18 OBJECT  LOCAL  DEFAULT     2 .Lanon.31293869ba758d6c2145a6f3863327cb.205
   704 0000000000009788     1 OBJECT  LOCAL  DEFAULT     2 .Lanon.31293869ba758d6c2145a6f3863327cb.225
   705 0000000000009795     1 OBJECT  LOCAL  DEFAULT     2 .Lanon.31293869ba758d6c2145a6f3863327cb.228
   706 0000000000009796     3 OBJECT  LOCAL  DEFAULT     2 .Lanon.31293869ba758d6c2145a6f3863327cb.229
   707 0000000000009799     1 OBJECT  LOCAL  DEFAULT     2 .Lanon.31293869ba758d6c2145a6f3863327cb.247
   708 00000000000097a4    27 OBJECT  LOCAL  DEFAULT     2 .Lanon.31293869ba758d6c2145a6f3863327cb.282
   709 0000000000009889    27 OBJECT  LOCAL  DEFAULT     2 .Lanon.31293869ba758d6c2145a6f3863327cb.291
   710 00000000000098a4    18 OBJECT  LOCAL  DEFAULT     2 .Lanon.31293869ba758d6c2145a6f3863327cb.311
   711 00000000000098b6    34 OBJECT  LOCAL  DEFAULT     2 .Lanon.31293869ba758d6c2145a6f3863327cb.312
   712 00000000000098d8    22 OBJECT  LOCAL  DEFAULT     2 .Lanon.31293869ba758d6c2145a6f3863327cb.316
   713 00000000000098ee    13 OBJECT  LOCAL  DEFAULT     2 .Lanon.31293869ba758d6c2145a6f3863327cb.317
   714 0000000000009908    11 OBJECT  LOCAL  DEFAULT     2 .Lanon.31293869ba758d6c2145a6f3863327cb.385
   715 0000000000009913    22 OBJECT  LOCAL  DEFAULT     2 .Lanon.31293869ba758d6c2145a6f3863327cb.386
   716 0000000000009929    14 OBJECT  LOCAL  DEFAULT     2 .Lanon.31293869ba758d6c2145a6f3863327cb.388
   717 0000000000009937    38 OBJECT  LOCAL  DEFAULT     2 .Lanon.31293869ba758d6c2145a6f3863327cb.392
   718 000000000000995d     6 OBJECT  LOCAL  DEFAULT     2 .Lanon.31293869ba758d6c2145a6f3863327cb.394
   719 0000000000009963    27 OBJECT  LOCAL  DEFAULT     2 .Lanon.31293869ba758d6c2145a6f3863327cb.396
   720 000000000000997e    37 OBJECT  LOCAL  DEFAULT     2 .Lanon.31293869ba758d6c2145a6f3863327cb.424
   721 0000000000009f1f    40 OBJECT  LOCAL  DEFAULT     2 .Lanon.31293869ba758d6c2145a6f3863327cb.433
   722 0000000000003558   848 FUNC    LOCAL  DEFAULT     1 <core::panic::panic_info::PanicInfo as core::fmt::Display>::fmt
   723 0000000000006ef8    16 FUNC    LOCAL  DEFAULT     1 core::slice::index::slice_end_index_len_fail
   724 00000000000039a8   224 FUNC    LOCAL  DEFAULT     1 core::panicking::panic_bounds_check
   725 0000000000003a88   256 FUNC    LOCAL  DEFAULT     1 core::result::unwrap_failed
   726 0000000000003918   144 FUNC    LOCAL  DEFAULT     1 core::panicking::panic
   727 00000000000038a8   112 FUNC    LOCAL  DEFAULT     1 core::panicking::panic_fmt
   728 0000000000005a90   456 FUNC    LOCAL  DEFAULT     1 core::fmt::Formatter::debug_tuple_field1_finish
   729 0000000000005a50    32 FUNC    LOCAL  DEFAULT     1 core::fmt::Formatter::debug_lower_hex
   730 0000000000005a70    32 FUNC    LOCAL  DEFAULT     1 core::fmt::Formatter::debug_upper_hex
   731 0000000000008e68    40 FUNC    LOCAL  DEFAULT     1 core::fmt::num::imp::<impl core::fmt::Display for usize>::fmt
   732 0000000000003f48   808 FUNC    LOCAL  DEFAULT     1 core::fmt::builders::DebugTuple::field
   733 0000000000005a20    48 FUNC    LOCAL  DEFAULT     1 core::fmt::Formatter::write_str
   734 0000000000005c58  2504 FUNC    LOCAL  DEFAULT     1 <str as core::fmt::Debug>::fmt
   735 0000000000008770   376 FUNC    LOCAL  DEFAULT     1 core::fmt::num::<impl core::fmt::UpperHex for u32>::fmt
   736 00000000000085f8   376 FUNC    LOCAL  DEFAULT     1 core::fmt::num::<impl core::fmt::LowerHex for u32>::fmt
   737 0000000000008e40    40 FUNC    LOCAL  DEFAULT     1 core::fmt::num::imp::<impl core::fmt::Display for u32>::fmt
   738 0000000000008e68    40 FUNC    LOCAL  DEFAULT     1 core::fmt::num::imp::<impl core::fmt::Display for u64>::fmt
   739 0000000000004738  1136 FUNC    LOCAL  DEFAULT     1 core::fmt::write
   740 00000000000076c0    16 FUNC    LOCAL  DEFAULT     1 core::str::slice_error_fail
   741 0000000000006b28   736 FUNC    LOCAL  DEFAULT     1 core::slice::memchr::memchr_aligned
   742 0000000000006e08    16 FUNC    LOCAL  DEFAULT     1 core::slice::index::slice_start_index_len_fail
   743 0000000000006fe8    16 FUNC    LOCAL  DEFAULT     1 core::slice::index::slice_index_order_fail
   744 0000000000008e90    64 FUNC    LOCAL  DEFAULT     1 <core::fmt::Error as core::fmt::Debug>::fmt
   745 0000000000006620  1288 FUNC    LOCAL  DEFAULT     1 <char as core::fmt::Debug>::fmt
   746 00000000000052c8  1880 FUNC    LOCAL  DEFAULT     1 core::fmt::Formatter::pad
   747 0000000000008770   376 FUNC    LOCAL  DEFAULT     1 core::fmt::num::<impl core::fmt::UpperHex for i32>::fmt
   748 00000000000085f8   376 FUNC    LOCAL  DEFAULT     1 core::fmt::num::<impl core::fmt::LowerHex for i32>::fmt
   749 0000000000008fd0   816 FUNC    LOCAL  DEFAULT     1 core::unicode::unicode_data::grapheme_extend::lookup
   750 0000000000008240   952 FUNC    LOCAL  DEFAULT     1 core::unicode::printable::is_printable
   751 0000000000003b88   960 FUNC    LOCAL  DEFAULT     1 <core::fmt::builders::PadAdapter as core::fmt::Write>::write_str
   752 0000000000004ba8  1632 FUNC    LOCAL  DEFAULT     1 core::fmt::Formatter::pad_integral
   753 00000000000070d8  1512 FUNC    LOCAL  DEFAULT     1 core::str::count::do_count_chars
   754 00000000000076d0  2144 FUNC    LOCAL  DEFAULT     1 core::str::slice_error_fail_rt
   755 0000000000005a20    48 FUNC    LOCAL  DEFAULT     1 <core::fmt::Formatter as core::fmt::Write>::write_str
   756 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS compiler_builtins.b6cd8a56-cgu.11
   757 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS compiler_builtins.b6cd8a56-cgu.111
   758 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS compiler_builtins.b6cd8a56-cgu.113
   759 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS compiler_builtins.b6cd8a56-cgu.130
   760 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS compiler_builtins.b6cd8a56-cgu.10
   761 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS compiler_builtins.b6cd8a56-cgu.139
   762 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS compiler_builtins.b6cd8a56-cgu.143
   763 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS compiler_builtins.b6cd8a56-cgu.159
   764 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS compiler_builtins.b6cd8a56-cgu.16
   765 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS compiler_builtins.b6cd8a56-cgu.162
   766 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS compiler_builtins.b6cd8a56-cgu.166
   767 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS compiler_builtins.b6cd8a56-cgu.179
   768 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS compiler_builtins.b6cd8a56-cgu.181
   769 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS compiler_builtins.b6cd8a56-cgu.188
   770 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS compiler_builtins.b6cd8a56-cgu.198
   771 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS compiler_builtins.b6cd8a56-cgu.20
   772 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS compiler_builtins.b6cd8a56-cgu.205
   773 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS compiler_builtins.b6cd8a56-cgu.222
   774 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS compiler_builtins.b6cd8a56-cgu.227
   775 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS compiler_builtins.b6cd8a56-cgu.229
   776 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS compiler_builtins.b6cd8a56-cgu.32
   777 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS compiler_builtins.b6cd8a56-cgu.253
   778 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS compiler_builtins.b6cd8a56-cgu.36
   779 00000000000093f8     0 NOTYPE  LOCAL  DEFAULT     1 LBB0_6
   780 00000000000093a8     0 NOTYPE  LOCAL  DEFAULT     1 LBB0_4
   781 0000000000009360     0 NOTYPE  LOCAL  DEFAULT     1 LBB0_3
   782 0000000000009408     0 NOTYPE  LOCAL  DEFAULT     1 LBB0_7
   783 00000000000093b0     0 NOTYPE  LOCAL  DEFAULT     1 LBB0_5
   784 0000000000009300   280 FUNC    LOCAL  HIDDEN      1 memcpy
   785 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS compiler_builtins.b6cd8a56-cgu.44
   786 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS compiler_builtins.b6cd8a56-cgu.54
   787 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS compiler_builtins.b6cd8a56-cgu.62
   788 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS compiler_builtins.b6cd8a56-cgu.63
   789 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS compiler_builtins.b6cd8a56-cgu.194
   790 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS compiler_builtins.b6cd8a56-cgu.70
   791 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS compiler_builtins.b6cd8a56-cgu.74
   792 000000000000a798     0 NOTYPE  LOCAL  HIDDEN      4 _DYNAMIC
   793 0000000000000b38   272 FUNC    GLOBAL DEFAULT     1 custom_panic
   794 0000000000000710   584 FUNC    GLOBAL DEFAULT     1 entrypoint
   795 0000000000000000     0 NOTYPE  GLOBAL DEFAULT   UND abort
   796 0000000000000000     0 NOTYPE  GLOBAL DEFAULT   UND sol_log_
   797 0000000000000000     0 NOTYPE  GLOBAL DEFAULT   UND sol_invoke_signed_rust
   798 0000000000000000     0 NOTYPE  GLOBAL DEFAULT   UND sol_memcpy_
There are no section groups in this file.

/home/ubuntu/par/jotterp/challenge/framework/chall/target/sbf-solana-solana/release/chall.so	file format elf64-bpf

Disassembly of section .text

0000000000000120 <<&T as core::fmt::Display>::fmt>
      36	79 11 00 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x0)
      37	85 10 00 00 85 06 00 00	call 0x685 ; <<core::panic::panic_info::PanicInfo as core::fmt::Display>::fmt>
      38	95 00 00 00 00 00 00 00	exit

0000000000000138 <core::ptr::drop_in_place<solana_program::program_error::ProgramError>>
      39	61 12 00 00 00 00 00 00	r2 = *(u32 *)(r1 + 0x0)
      40	15 02 01 00 0e 00 00 00	if r2 == 0xe goto +0x1 <LBB1_2>

0000000000000148 <LBB1_1>
      41	95 00 00 00 00 00 00 00	exit

0000000000000150 <LBB1_2>
      42	79 12 08 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x8)
      43	15 02 fd ff 00 00 00 00	if r2 == 0x0 goto -0x3 <LBB1_1>
      44	79 11 10 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x10)
      45	b7 03 00 00 01 00 00 00	r3 = 0x1
      46	85 10 00 00 5c 01 00 00	call 0x15c ; <__rust_dealloc>
      47	05 00 f9 ff 00 00 00 00	goto -0x7 <LBB1_1>

0000000000000180 <chall::process>
      48	bf 26 00 00 00 00 00 00	r6 = r2
      49	bf 17 00 00 00 00 00 00	r7 = r1
      50	25 06 06 00 07 00 00 00	if r6 > 0x7 goto +0x6 <LBB2_2>
      51	b7 01 00 00 08 00 00 00	r1 = 0x8
      52	bf 62 00 00 00 00 00 00	r2 = r6
      53	18 03 00 00 a8 a2 00 00 00 00 00 00 00 00 00 00	r3 = 0xa2a8 ll
      55	85 10 00 00 a7 0d 00 00	call 0xda7 ; <core::slice::index::slice_end_index_len_fail>
      56	85 10 00 00 ff ff ff ff	call -0x1 ; abort

00000000000001c8 <LBB2_2>
      57	25 06 06 00 0f 00 00 00	if r6 > 0xf goto +0x6 <LBB2_4>
      58	b7 01 00 00 10 00 00 00	r1 = 0x10
      59	bf 62 00 00 00 00 00 00	r2 = r6
      60	18 03 00 00 c0 a2 00 00 00 00 00 00 00 00 00 00	r3 = 0xa2c0 ll
      62	85 10 00 00 a0 0d 00 00	call 0xda0 ; <core::slice::index::slice_end_index_len_fail>
      63	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000000200 <LBB2_4>
      64	79 72 00 00 00 00 00 00	r2 = *(u64 *)(r7 + 0x0)
      65	79 71 08 00 00 00 00 00	r1 = *(u64 *)(r7 + 0x8)
      66	8d 00 00 00 02 00 00 00	callx r2
      67	07 06 00 00 f0 ff ff ff	r6 += -0x10
      68	25 06 06 00 07 00 00 00	if r6 > 0x7 goto +0x6 <LBB2_6>
      69	b7 01 00 00 08 00 00 00	r1 = 0x8
      70	bf 62 00 00 00 00 00 00	r2 = r6
      71	18 03 00 00 d8 a2 00 00 00 00 00 00 00 00 00 00	r3 = 0xa2d8 ll
      73	85 10 00 00 95 0d 00 00	call 0xd95 ; <core::slice::index::slice_end_index_len_fail>
      74	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000000258 <LBB2_6>
      75	25 06 06 00 0f 00 00 00	if r6 > 0xf goto +0x6 <LBB2_8>
      76	b7 01 00 00 10 00 00 00	r1 = 0x10
      77	bf 62 00 00 00 00 00 00	r2 = r6
      78	18 03 00 00 f0 a2 00 00 00 00 00 00 00 00 00 00	r3 = 0xa2f0 ll
      80	85 10 00 00 8e 0d 00 00	call 0xd8e ; <core::slice::index::slice_end_index_len_fail>
      81	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000000290 <LBB2_8>
      82	79 72 10 00 00 00 00 00	r2 = *(u64 *)(r7 + 0x10)
      83	79 71 18 00 00 00 00 00	r1 = *(u64 *)(r7 + 0x18)
      84	8d 00 00 00 02 00 00 00	callx r2
      85	95 00 00 00 00 00 00 00	exit

00000000000002b0 <chall::write>
      86	25 02 05 00 07 00 00 00	if r2 > 0x7 goto +0x5 <LBB3_2>
      87	b7 01 00 00 08 00 00 00	r1 = 0x8
      88	18 03 00 00 08 a3 00 00 00 00 00 00 00 00 00 00	r3 = 0xa308 ll
      90	85 10 00 00 84 0d 00 00	call 0xd84 ; <core::slice::index::slice_end_index_len_fail>
      91	85 10 00 00 ff ff ff ff	call -0x1 ; abort

00000000000002e0 <LBB3_2>
      92	25 02 05 00 0f 00 00 00	if r2 > 0xf goto +0x5 <LBB3_4>
      93	b7 01 00 00 10 00 00 00	r1 = 0x10
      94	18 03 00 00 20 a3 00 00 00 00 00 00 00 00 00 00	r3 = 0xa320 ll
      96	85 10 00 00 7e 0d 00 00	call 0xd7e ; <core::slice::index::slice_end_index_len_fail>
      97	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000000310 <LBB3_4>
      98	79 12 08 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x8)
      99	79 11 00 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x0)
     100	7b 21 00 00 00 00 00 00	*(u64 *)(r1 + 0x0) = r2
     101	95 00 00 00 00 00 00 00	exit

0000000000000330 <chall::process_instruction>
     102	bf 16 00 00 00 00 00 00	r6 = r1
     103	79 52 08 f0 00 00 00 00	r2 = *(u64 *)(r5 - 0xff8)
     104	15 02 0d 00 00 00 00 00	if r2 == 0x0 goto +0xd <LBB4_3>
     105	79 51 00 f0 00 00 00 00	r1 = *(u64 *)(r5 - 0x1000)
     106	71 13 00 00 00 00 00 00	r3 = *(u8 *)(r1 + 0x0)
     107	15 03 04 00 00 00 00 00	if r3 == 0x0 goto +0x4 <LBB4_4>
     108	15 03 01 00 01 00 00 00	if r3 == 0x1 goto +0x1 <LBB4_5>
     109	05 00 04 00 00 00 00 00	goto +0x4 <LBB4_6>

0000000000000370 <LBB4_5>
     110	85 10 00 00 0d 00 00 00	call 0xd ; <chall::call>
     111	05 00 03 00 00 00 00 00	goto +0x3 <LBB4_7>

0000000000000380 <LBB4_4>
     112	85 10 00 00 e5 ff ff ff	call -0x1b ; <chall::write>
     113	05 00 01 00 00 00 00 00	goto +0x1 <LBB4_7>

0000000000000390 <LBB4_6>
     114	85 10 00 00 bd ff ff ff	call -0x43 ; <chall::process>

0000000000000398 <LBB4_7>
     115	b7 01 00 00 18 00 00 00	r1 = 0x18
     116	63 16 00 00 00 00 00 00	*(u32 *)(r6 + 0x0) = r1
     117	95 00 00 00 00 00 00 00	exit

00000000000003b0 <LBB4_3>
     118	b7 01 00 00 00 00 00 00	r1 = 0x0
     119	b7 02 00 00 00 00 00 00	r2 = 0x0
     120	18 03 00 00 38 a3 00 00 00 00 00 00 00 00 00 00	r3 = 0xa338 ll
     122	85 10 00 00 ba 06 00 00	call 0x6ba ; <core::panicking::panic_bounds_check>
     123	85 10 00 00 ff ff ff ff	call -0x1 ; abort

00000000000003e0 <chall::call>
     124	bf 26 00 00 00 00 00 00	r6 = r2
     125	bf 17 00 00 00 00 00 00	r7 = r1
     126	18 01 00 00 7b 60 95 1b 00 00 00 00 5f 00 00 00	r1 = 0x5f1b95607b ll
     128	7b 1a 88 ff 00 00 00 00	*(u64 *)(r10 - 0x78) = r1
     129	18 01 00 00 10 02 c0 6e 00 00 00 00 4b dd 26 58	r1 = 0x5826dd4b6ec00210 ll
     131	7b 1a 80 ff 00 00 00 00	*(u64 *)(r10 - 0x80) = r1
     132	18 01 00 00 00 bd 71 8c 00 00 00 00 d0 29 4f c9	r1 = -0x36b0d62f738e4300 ll
     134	7b 1a 78 ff 00 00 00 00	*(u64 *)(r10 - 0x88) = r1
     135	18 01 00 00 0c 01 fc 57 00 00 00 00 d0 fc a0 a1	r1 = -0x5e5f032fa803fef4 ll
     137	7b 1a 70 ff 00 00 00 00	*(u64 *)(r10 - 0x90) = r1
     138	bf a1 00 00 00 00 00 00	r1 = r10
     139	07 01 00 00 e0 ff ff ff	r1 += -0x20
     140	bf a2 00 00 00 00 00 00	r2 = r10
     141	07 02 00 00 70 ff ff ff	r2 += -0x90
     142	85 10 00 00 74 02 00 00	call 0x274 ; <<solana_program::hash::Hash as core::convert::From<[u8; _]>>::from>
     143	b7 09 00 00 01 00 00 00	r9 = 0x1
     144	15 06 0f 00 00 00 00 00	if r6 == 0x0 goto +0xf <LBB5_5>
     145	65 06 02 00 ff ff ff ff	if r6 s> -0x1 goto +0x2 <LBB5_3>
     146	85 10 00 00 34 05 00 00	call 0x534 ; <alloc::raw_vec::capacity_overflow>
     147	85 10 00 00 ff ff ff ff	call -0x1 ; abort

00000000000004a0 <LBB5_3>
     148	bf 68 00 00 00 00 00 00	r8 = r6
     149	a7 08 00 00 ff ff ff ff	r8 ^= -0x1
     150	77 08 00 00 3f 00 00 00	r8 >>= 0x3f
     151	bf 61 00 00 00 00 00 00	r1 = r6
     152	bf 82 00 00 00 00 00 00	r2 = r8
     153	85 10 00 00 ef 00 00 00	call 0xef ; <__rust_alloc>
     154	bf 09 00 00 00 00 00 00	r9 = r0
     155	55 09 04 00 00 00 00 00	if r9 != 0x0 goto +0x4 <LBB5_5>
     156	bf 61 00 00 00 00 00 00	r1 = r6
     157	bf 82 00 00 00 00 00 00	r2 = r8
     158	85 10 00 00 39 05 00 00	call 0x539 ; <alloc::alloc::handle_alloc_error>
     159	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000000500 <LBB5_5>
     160	bf 91 00 00 00 00 00 00	r1 = r9
     161	bf 72 00 00 00 00 00 00	r2 = r7
     162	bf 63 00 00 00 00 00 00	r3 = r6
     163	85 10 00 00 bc 11 00 00	call 0x11bc ; <memcpy>
     164	7b 9a b0 ff 00 00 00 00	*(u64 *)(r10 - 0x50) = r9
     165	7b 6a b8 ff 00 00 00 00	*(u64 *)(r10 - 0x48) = r6
     166	7b 6a a8 ff 00 00 00 00	*(u64 *)(r10 - 0x58) = r6
     167	b7 01 00 00 01 00 00 00	r1 = 0x1
     168	7b 1a 98 ff 00 00 00 00	*(u64 *)(r10 - 0x68) = r1
     169	79 a1 e0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x20)
     170	7b 1a 70 ff 00 00 00 00	*(u64 *)(r10 - 0x90) = r1
     171	79 a1 e8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x18)
     172	7b 1a 78 ff 00 00 00 00	*(u64 *)(r10 - 0x88) = r1
     173	79 a1 f0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x10)
     174	7b 1a 80 ff 00 00 00 00	*(u64 *)(r10 - 0x80) = r1
     175	79 a1 f8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x8)
     176	7b 1a 88 ff 00 00 00 00	*(u64 *)(r10 - 0x78) = r1
     177	b7 01 00 00 00 00 00 00	r1 = 0x0
     178	7b 1a a0 ff 00 00 00 00	*(u64 *)(r10 - 0x60) = r1
     179	7b 1a 90 ff 00 00 00 00	*(u64 *)(r10 - 0x70) = r1
     180	18 02 00 00 18 94 00 00 00 00 00 00 00 00 00 00	r2 = 0x9418 ll
     182	7b 2a 00 f0 00 00 00 00	*(u64 *)(r10 - 0x1000) = r2
     183	7b 1a 08 f0 00 00 00 00	*(u64 *)(r10 - 0xff8) = r1
     184	bf a1 00 00 00 00 00 00	r1 = r10
     185	07 01 00 00 c0 ff ff ff	r1 += -0x40
     186	bf a2 00 00 00 00 00 00	r2 = r10
     187	07 02 00 00 70 ff ff ff	r2 += -0x90
     188	bf a5 00 00 00 00 00 00	r5 = r10
     189	18 03 00 00 18 94 00 00 00 00 00 00 00 00 00 00	r3 = 0x9418 ll
     191	b7 04 00 00 00 00 00 00	r4 = 0x0
     192	85 10 00 00 4b 02 00 00	call 0x24b ; <solana_program::program::invoke_signed_unchecked>
     193	61 a1 c0 ff 00 00 00 00	r1 = *(u32 *)(r10 - 0x40)
     194	55 01 0c 00 18 00 00 00	if r1 != 0x18 goto +0xc <LBB5_11>
     195	79 a2 90 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x70)
     196	15 02 04 00 00 00 00 00	if r2 == 0x0 goto +0x4 <LBB5_8>
     197	27 02 00 00 22 00 00 00	r2 *= 0x22
     198	79 a1 98 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x68)
     199	b7 03 00 00 01 00 00 00	r3 = 0x1
     200	85 10 00 00 c2 00 00 00	call 0xc2 ; <__rust_dealloc>

0000000000000648 <LBB5_8>
     201	79 a2 a8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x58)
     202	15 02 03 00 00 00 00 00	if r2 == 0x0 goto +0x3 <LBB5_10>
     203	79 a1 b0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x50)
     204	b7 03 00 00 01 00 00 00	r3 = 0x1
     205	85 10 00 00 bd 00 00 00	call 0xbd ; <__rust_dealloc>

0000000000000670 <LBB5_10>
     206	95 00 00 00 00 00 00 00	exit

0000000000000678 <LBB5_11>
     207	79 a1 d8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x28)
     208	7b 1a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r1
     209	79 a1 d0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x30)
     210	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
     211	79 a1 c8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x38)
     212	7b 1a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r1
     213	79 a1 c0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x40)
     214	7b 1a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r1
     215	bf a3 00 00 00 00 00 00	r3 = r10
     216	07 03 00 00 e0 ff ff ff	r3 += -0x20
     217	18 01 00 00 22 94 00 00 00 00 00 00 00 00 00 00	r1 = 0x9422 ll
     219	b7 02 00 00 2b 00 00 00	r2 = 0x2b
     220	18 04 00 00 50 a3 00 00 00 00 00 00 00 00 00 00	r4 = 0xa350 ll
     222	18 05 00 00 70 a3 00 00 00 00 00 00 00 00 00 00	r5 = 0xa370 ll
     224	85 10 00 00 70 06 00 00	call 0x670 ; <core::result::unwrap_failed>
     225	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000000710 <entrypoint>
     226	bf 12 00 00 00 00 00 00	r2 = r1
     227	bf a1 00 00 00 00 00 00	r1 = r10
     228	07 01 00 00 b0 ff ff ff	r1 += -0x50
     229	85 10 00 00 23 01 00 00	call 0x123 ; <solana_program::entrypoint::deserialize>
     230	79 a9 c8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 0x38)
     231	79 a1 c0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x40)
     232	7b 1a a8 ff 00 00 00 00	*(u64 *)(r10 - 0x58) = r1
     233	79 a7 b8 ff 00 00 00 00	r7 = *(u64 *)(r10 - 0x48)
     234	79 a1 d8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x28)
     235	79 a2 d0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x30)
     236	7b 2a 00 f0 00 00 00 00	*(u64 *)(r10 - 0x1000) = r2
     237	7b 1a 08 f0 00 00 00 00	*(u64 *)(r10 - 0xff8) = r1
     238	bf a1 00 00 00 00 00 00	r1 = r10
     239	07 01 00 00 e0 ff ff ff	r1 += -0x20
     240	bf a5 00 00 00 00 00 00	r5 = r10
     241	85 10 00 00 74 ff ff ff	call -0x8c ; <chall::process_instruction>
     242	b7 08 00 00 00 00 00 00	r8 = 0x0
     243	61 a1 e0 ff 00 00 00 00	r1 = *(u32 *)(r10 - 0x20)
     244	15 01 0c 00 18 00 00 00	if r1 == 0x18 goto +0xc <LBB6_2>
     245	79 a1 f8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x8)
     246	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 0x38) = r1
     247	79 a1 f0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x10)
     248	7b 1a c0 ff 00 00 00 00	*(u64 *)(r10 - 0x40) = r1
     249	79 a1 e8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x18)
     250	7b 1a b8 ff 00 00 00 00	*(u64 *)(r10 - 0x48) = r1
     251	79 a1 e0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x20)
     252	7b 1a b0 ff 00 00 00 00	*(u64 *)(r10 - 0x50) = r1
     253	bf a1 00 00 00 00 00 00	r1 = r10
     254	07 01 00 00 b0 ff ff ff	r1 += -0x50
     255	85 10 00 00 8e 02 00 00	call 0x28e ; <solana_program::program_error::<impl core::convert::From<solana_program::program_error::ProgramError> for u64>::from>
     256	bf 08 00 00 00 00 00 00	r8 = r0

0000000000000808 <LBB6_2>
     257	15 09 13 00 00 00 00 00	if r9 == 0x0 goto +0x13 <LBB6_11>
     258	27 09 00 00 30 00 00 00	r9 *= 0x30
     259	79 a6 a8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 0x58)
     260	07 06 00 00 10 00 00 00	r6 += 0x10
     261	05 00 16 00 00 00 00 00	goto +0x16 <LBB6_4>

0000000000000830 <LBB6_7>
     262	79 61 00 00 00 00 00 00	r1 = *(u64 *)(r6 + 0x0)
     263	79 12 00 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x0)
     264	07 02 00 00 ff ff ff ff	r2 += -0x1
     265	7b 21 00 00 00 00 00 00	*(u64 *)(r1 + 0x0) = r2
     266	55 02 07 00 00 00 00 00	if r2 != 0x0 goto +0x7 <LBB6_10>
     267	79 12 08 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x8)
     268	07 02 00 00 ff ff ff ff	r2 += -0x1
     269	7b 21 08 00 00 00 00 00	*(u64 *)(r1 + 0x8) = r2
     270	55 02 03 00 00 00 00 00	if r2 != 0x0 goto +0x3 <LBB6_10>
     271	b7 02 00 00 28 00 00 00	r2 = 0x28
     272	b7 03 00 00 08 00 00 00	r3 = 0x8
     273	85 10 00 00 79 00 00 00	call 0x79 ; <__rust_dealloc>

0000000000000890 <LBB6_10>
     274	07 06 00 00 30 00 00 00	r6 += 0x30
     275	07 09 00 00 d0 ff ff ff	r9 += -0x30
     276	55 09 07 00 00 00 00 00	if r9 != 0x0 goto +0x7 <LBB6_4>

00000000000008a8 <LBB6_11>
     277	15 07 13 00 00 00 00 00	if r7 == 0x0 goto +0x13 <LBB6_13>
     278	27 07 00 00 30 00 00 00	r7 *= 0x30
     279	79 a1 a8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x58)
     280	bf 72 00 00 00 00 00 00	r2 = r7
     281	b7 03 00 00 08 00 00 00	r3 = 0x8
     282	85 10 00 00 70 00 00 00	call 0x70 ; <__rust_dealloc>
     283	05 00 0d 00 00 00 00 00	goto +0xd <LBB6_13>

00000000000008e0 <LBB6_4>
     284	79 61 f8 ff 00 00 00 00	r1 = *(u64 *)(r6 - 0x8)
     285	79 12 00 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x0)
     286	07 02 00 00 ff ff ff ff	r2 += -0x1
     287	7b 21 00 00 00 00 00 00	*(u64 *)(r1 + 0x0) = r2
     288	55 02 e5 ff 00 00 00 00	if r2 != 0x0 goto -0x1b <LBB6_7>
     289	79 12 08 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x8)
     290	07 02 00 00 ff ff ff ff	r2 += -0x1
     291	7b 21 08 00 00 00 00 00	*(u64 *)(r1 + 0x8) = r2
     292	55 02 e1 ff 00 00 00 00	if r2 != 0x0 goto -0x1f <LBB6_7>
     293	b7 02 00 00 20 00 00 00	r2 = 0x20
     294	b7 03 00 00 08 00 00 00	r3 = 0x8
     295	85 10 00 00 63 00 00 00	call 0x63 ; <__rust_dealloc>
     296	05 00 dd ff 00 00 00 00	goto -0x23 <LBB6_7>

0000000000000948 <LBB6_13>
     297	bf 80 00 00 00 00 00 00	r0 = r8
     298	95 00 00 00 00 00 00 00	exit

0000000000000958 <__rg_alloc>
     299	18 03 00 00 00 00 00 00 00 00 00 00 03 00 00 00	r3 = 0x300000000 ll
     301	79 33 00 00 00 00 00 00	r3 = *(u64 *)(r3 + 0x0)
     302	18 04 00 00 00 80 00 00 00 00 00 00 03 00 00 00	r4 = 0x300008000 ll
     304	15 03 01 00 00 00 00 00	if r3 == 0x0 goto +0x1 <LBB7_2>
     305	bf 34 00 00 00 00 00 00	r4 = r3

0000000000000990 <LBB7_2>
     306	bf 43 00 00 00 00 00 00	r3 = r4
     307	1f 13 00 00 00 00 00 00	r3 -= r1
     308	b7 00 00 00 00 00 00 00	r0 = 0x0
     309	b7 05 00 00 01 00 00 00	r5 = 0x1
     310	2d 43 01 00 00 00 00 00	if r3 > r4 goto +0x1 <LBB7_4>
     311	b7 05 00 00 00 00 00 00	r5 = 0x0

00000000000009c0 <LBB7_4>
     312	b7 01 00 00 00 00 00 00	r1 = 0x0
     313	55 05 01 00 00 00 00 00	if r5 != 0x0 goto +0x1 <LBB7_6>
     314	bf 31 00 00 00 00 00 00	r1 = r3

00000000000009d8 <LBB7_6>
     315	87 02 00 00 00 00 00 00	r2 = -r2
     316	5f 21 00 00 00 00 00 00	r1 &= r2
     317	18 02 00 00 08 00 00 00 00 00 00 00 03 00 00 00	r2 = 0x300000008 ll
     319	2d 12 04 00 00 00 00 00	if r2 > r1 goto +0x4 <LBB7_8>
     320	18 02 00 00 00 00 00 00 00 00 00 00 03 00 00 00	r2 = 0x300000000 ll
     322	7b 12 00 00 00 00 00 00	*(u64 *)(r2 + 0x0) = r1
     323	bf 10 00 00 00 00 00 00	r0 = r1

0000000000000a20 <LBB7_8>
     324	95 00 00 00 00 00 00 00	exit

0000000000000a28 <__rg_dealloc>
     325	95 00 00 00 00 00 00 00	exit

0000000000000a30 <__rg_realloc>
     326	bf 25 00 00 00 00 00 00	r5 = r2
     327	bf 12 00 00 00 00 00 00	r2 = r1
     328	18 01 00 00 00 00 00 00 00 00 00 00 03 00 00 00	r1 = 0x300000000 ll
     330	79 11 00 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x0)
     331	18 06 00 00 00 80 00 00 00 00 00 00 03 00 00 00	r6 = 0x300008000 ll
     333	15 01 01 00 00 00 00 00	if r1 == 0x0 goto +0x1 <LBB9_2>
     334	bf 16 00 00 00 00 00 00	r6 = r1

0000000000000a78 <LBB9_2>
     335	bf 61 00 00 00 00 00 00	r1 = r6
     336	1f 41 00 00 00 00 00 00	r1 -= r4
     337	b7 00 00 00 00 00 00 00	r0 = 0x0
     338	b7 07 00 00 01 00 00 00	r7 = 0x1
     339	2d 61 01 00 00 00 00 00	if r1 > r6 goto +0x1 <LBB9_4>
     340	b7 07 00 00 00 00 00 00	r7 = 0x0

0000000000000aa8 <LBB9_4>
     341	b7 06 00 00 00 00 00 00	r6 = 0x0
     342	55 07 01 00 00 00 00 00	if r7 != 0x0 goto +0x1 <LBB9_6>
     343	bf 16 00 00 00 00 00 00	r6 = r1

0000000000000ac0 <LBB9_6>
     344	87 03 00 00 00 00 00 00	r3 = -r3
     345	5f 36 00 00 00 00 00 00	r6 &= r3
     346	18 01 00 00 08 00 00 00 00 00 00 00 03 00 00 00	r1 = 0x300000008 ll
     348	2d 61 09 00 00 00 00 00	if r1 > r6 goto +0x9 <LBB9_10>
     349	18 01 00 00 00 00 00 00 00 00 00 00 03 00 00 00	r1 = 0x300000000 ll
     351	7b 61 00 00 00 00 00 00	*(u64 *)(r1 + 0x0) = r6
     352	2d 54 01 00 00 00 00 00	if r4 > r5 goto +0x1 <LBB9_9>
     353	bf 45 00 00 00 00 00 00	r5 = r4

0000000000000b10 <LBB9_9>
     354	bf 61 00 00 00 00 00 00	r1 = r6
     355	bf 53 00 00 00 00 00 00	r3 = r5
     356	85 10 00 00 fb 10 00 00	call 0x10fb ; <memcpy>
     357	bf 60 00 00 00 00 00 00	r0 = r6

0000000000000b30 <LBB9_10>
     358	95 00 00 00 00 00 00 00	exit

0000000000000b38 <custom_panic>
     359	7b 1a a0 ff 00 00 00 00	*(u64 *)(r10 - 0x60) = r1
     360	18 01 00 00 20 01 00 00 00 00 00 00 00 00 00 00	r1 = 0x120 ll
     362	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 0x38) = r1
     363	bf a1 00 00 00 00 00 00	r1 = r10
     364	07 01 00 00 a0 ff ff ff	r1 += -0x60
     365	7b 1a c0 ff 00 00 00 00	*(u64 *)(r10 - 0x40) = r1
     366	bf a1 00 00 00 00 00 00	r1 = r10
     367	07 01 00 00 c0 ff ff ff	r1 += -0x40
     368	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
     369	b7 01 00 00 01 00 00 00	r1 = 0x1
     370	7b 1a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r1
     371	7b 1a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r1
     372	18 01 00 00 88 a3 00 00 00 00 00 00 00 00 00 00	r1 = 0xa388 ll
     374	7b 1a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r1
     375	b7 01 00 00 00 00 00 00	r1 = 0x0
     376	7b 1a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r1
     377	bf a1 00 00 00 00 00 00	r1 = r10
     378	07 01 00 00 a8 ff ff ff	r1 += -0x58
     379	bf a2 00 00 00 00 00 00	r2 = r10
     380	07 02 00 00 d0 ff ff ff	r2 += -0x30
     381	85 10 00 00 5e 04 00 00	call 0x45e ; <alloc::fmt::format::format_inner>
     382	79 a6 a8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 0x58)
     383	79 a7 b0 ff 00 00 00 00	r7 = *(u64 *)(r10 - 0x50)
     384	79 a2 b8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x48)
     385	bf 71 00 00 00 00 00 00	r1 = r7
     386	85 10 00 00 ff ff ff ff	call -0x1 ; sol_log_
     387	15 06 04 00 00 00 00 00	if r6 == 0x0 goto +0x4 <LBB11_2>
     388	bf 71 00 00 00 00 00 00	r1 = r7
     389	bf 62 00 00 00 00 00 00	r2 = r6
     390	b7 03 00 00 01 00 00 00	r3 = 0x1
     391	85 10 00 00 03 00 00 00	call 0x3 ; <__rust_dealloc>

0000000000000c40 <LBB11_2>
     392	95 00 00 00 00 00 00 00	exit

0000000000000c48 <__rust_alloc>
     393	85 10 00 00 a1 ff ff ff	call -0x5f ; <__rg_alloc>
     394	95 00 00 00 00 00 00 00	exit

0000000000000c58 <__rust_dealloc>
     395	85 10 00 00 b9 ff ff ff	call -0x47 ; <__rg_dealloc>
     396	95 00 00 00 00 00 00 00	exit

0000000000000c68 <__rust_realloc>
     397	85 10 00 00 b8 ff ff ff	call -0x48 ; <__rg_realloc>
     398	95 00 00 00 00 00 00 00	exit

0000000000000c78 <__rust_alloc_error_handler>
     399	85 10 00 00 81 03 00 00	call 0x381 ; <__rg_oom>
     400	95 00 00 00 00 00 00 00	exit

0000000000000c88 <<&T as core::fmt::Debug>::fmt>
     401	bf 23 00 00 00 00 00 00	r3 = r2
     402	79 11 00 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x0)
     403	79 12 10 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x10)
     404	79 11 08 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x8)
     405	85 10 00 00 f5 09 00 00	call 0x9f5 ; <<str as core::fmt::Debug>::fmt>
     406	95 00 00 00 00 00 00 00	exit

0000000000000cb8 <<&T as core::fmt::Debug>::fmt>
     407	bf 26 00 00 00 00 00 00	r6 = r2
     408	79 17 00 00 00 00 00 00	r7 = *(u64 *)(r1 + 0x0)
     409	bf 61 00 00 00 00 00 00	r1 = r6
     410	85 10 00 00 af 09 00 00	call 0x9af ; <core::fmt::Formatter::debug_lower_hex>
     411	55 00 08 00 00 00 00 00	if r0 != 0x0 goto +0x8 <LBB71_2>
     412	bf 61 00 00 00 00 00 00	r1 = r6
     413	85 10 00 00 b0 09 00 00	call 0x9b0 ; <core::fmt::Formatter::debug_upper_hex>
     414	55 00 01 00 00 00 00 00	if r0 != 0x0 goto +0x1 <LBB71_4>
     415	05 00 08 00 00 00 00 00	goto +0x8 <LBB71_3>

0000000000000d00 <LBB71_4>
     416	bf 71 00 00 00 00 00 00	r1 = r7
     417	bf 62 00 00 00 00 00 00	r2 = r6
     418	85 10 00 00 4b 0f 00 00	call 0xf4b ; <core::fmt::num::<impl core::fmt::UpperHex for u32>::fmt>
     419	05 00 07 00 00 00 00 00	goto +0x7 <LBB71_5>

0000000000000d20 <LBB71_2>
     420	bf 71 00 00 00 00 00 00	r1 = r7
     421	bf 62 00 00 00 00 00 00	r2 = r6
     422	85 10 00 00 18 0f 00 00	call 0xf18 ; <core::fmt::num::<impl core::fmt::LowerHex for u32>::fmt>
     423	05 00 03 00 00 00 00 00	goto +0x3 <LBB71_5>

0000000000000d40 <LBB71_3>
     424	bf 71 00 00 00 00 00 00	r1 = r7
     425	bf 62 00 00 00 00 00 00	r2 = r6
     426	85 10 00 00 1d 10 00 00	call 0x101d ; <core::fmt::num::imp::<impl core::fmt::Display for u32>::fmt>

0000000000000d58 <LBB71_5>
     427	95 00 00 00 00 00 00 00	exit

0000000000000d60 <core::ptr::drop_in_place<&[(solana_program::pubkey::Pubkey,u64,u64,u64); 32]>>
     428	95 00 00 00 00 00 00 00	exit

0000000000000d68 <alloc::raw_vec::finish_grow>
     429	bf 38 00 00 00 00 00 00	r8 = r3
     430	bf 27 00 00 00 00 00 00	r7 = r2
     431	bf 16 00 00 00 00 00 00	r6 = r1
     432	15 08 0a 00 00 00 00 00	if r8 == 0x0 goto +0xa <LBB149_2>
     433	79 41 10 00 00 00 00 00	r1 = *(u64 *)(r4 + 0x10)
     434	15 01 11 00 00 00 00 00	if r1 == 0x0 goto +0x11 <LBB149_9>
     435	79 42 08 00 00 00 00 00	r2 = *(u64 *)(r4 + 0x8)
     436	55 02 09 00 00 00 00 00	if r2 != 0x0 goto +0x9 <LBB149_8>
     437	15 07 18 00 00 00 00 00	if r7 == 0x0 goto +0x18 <LBB149_11>
     438	bf 71 00 00 00 00 00 00	r1 = r7
     439	bf 82 00 00 00 00 00 00	r2 = r8
     440	85 10 00 00 d0 ff ff ff	call -0x30 ; <__rust_alloc>
     441	15 00 10 00 00 00 00 00	if r0 == 0x0 goto +0x10 <LBB149_13>
     442	05 00 15 00 00 00 00 00	goto +0x15 <LBB149_12>

0000000000000dd8 <LBB149_2>
     443	b7 01 00 00 00 00 00 00	r1 = 0x0
     444	7b 16 10 00 00 00 00 00	*(u64 *)(r6 + 0x10) = r1
     445	05 00 0d 00 00 00 00 00	goto +0xd <LBB149_3>

0000000000000df0 <LBB149_8>
     446	79 41 00 00 00 00 00 00	r1 = *(u64 *)(r4 + 0x0)
     447	bf 83 00 00 00 00 00 00	r3 = r8
     448	bf 74 00 00 00 00 00 00	r4 = r7
     449	85 10 00 00 cb ff ff ff	call -0x35 ; <__rust_realloc>
     450	15 00 07 00 00 00 00 00	if r0 == 0x0 goto +0x7 <LBB149_13>
     451	05 00 0c 00 00 00 00 00	goto +0xc <LBB149_12>

0000000000000e20 <LBB149_9>
     452	15 07 09 00 00 00 00 00	if r7 == 0x0 goto +0x9 <LBB149_11>
     453	bf 71 00 00 00 00 00 00	r1 = r7
     454	bf 82 00 00 00 00 00 00	r2 = r8
     455	85 10 00 00 c1 ff ff ff	call -0x3f ; <__rust_alloc>
     456	15 00 01 00 00 00 00 00	if r0 == 0x0 goto +0x1 <LBB149_13>
     457	05 00 06 00 00 00 00 00	goto +0x6 <LBB149_12>

0000000000000e50 <LBB149_13>
     458	7b 86 10 00 00 00 00 00	*(u64 *)(r6 + 0x10) = r8

0000000000000e58 <LBB149_3>
     459	7b 76 08 00 00 00 00 00	*(u64 *)(r6 + 0x8) = r7
     460	b7 01 00 00 01 00 00 00	r1 = 0x1
     461	05 00 05 00 00 00 00 00	goto +0x5 <LBB149_4>

0000000000000e70 <LBB149_11>
     462	b7 07 00 00 00 00 00 00	r7 = 0x0
     463	bf 80 00 00 00 00 00 00	r0 = r8

0000000000000e80 <LBB149_12>
     464	7b 76 10 00 00 00 00 00	*(u64 *)(r6 + 0x10) = r7
     465	7b 06 08 00 00 00 00 00	*(u64 *)(r6 + 0x8) = r0
     466	b7 01 00 00 00 00 00 00	r1 = 0x0

0000000000000e98 <LBB149_4>
     467	7b 16 00 00 00 00 00 00	*(u64 *)(r6 + 0x0) = r1
     468	95 00 00 00 00 00 00 00	exit

0000000000000ea8 <alloc::raw_vec::RawVec<T,A>::reserve_for_push>
     469	bf 16 00 00 00 00 00 00	r6 = r1
     470	07 02 00 00 01 00 00 00	r2 += 0x1
     471	b7 01 00 00 01 00 00 00	r1 = 0x1
     472	15 02 01 00 00 00 00 00	if r2 == 0x0 goto +0x1 <LBB154_2>
     473	b7 01 00 00 00 00 00 00	r1 = 0x0

0000000000000ed0 <LBB154_2>
     474	57 01 00 00 01 00 00 00	r1 &= 0x1
     475	55 01 29 00 00 00 00 00	if r1 != 0x0 goto +0x29 <LBB154_17>
     476	79 61 00 00 00 00 00 00	r1 = *(u64 *)(r6 + 0x0)
     477	bf 17 00 00 00 00 00 00	r7 = r1
     478	67 07 00 00 01 00 00 00	r7 <<= 0x1
     479	2d 27 01 00 00 00 00 00	if r7 > r2 goto +0x1 <LBB154_5>
     480	bf 27 00 00 00 00 00 00	r7 = r2

0000000000000f08 <LBB154_5>
     481	25 07 01 00 04 00 00 00	if r7 > 0x4 goto +0x1 <LBB154_7>
     482	b7 07 00 00 04 00 00 00	r7 = 0x4

0000000000000f18 <LBB154_7>
     483	b7 03 00 00 01 00 00 00	r3 = 0x1
     484	18 02 00 00 ab aa aa aa 00 00 00 00 aa aa aa 02	r2 = 0x2aaaaaaaaaaaaab ll
     486	2d 72 01 00 00 00 00 00	if r2 > r7 goto +0x1 <LBB154_9>
     487	b7 03 00 00 00 00 00 00	r3 = 0x0

0000000000000f40 <LBB154_9>
     488	bf 72 00 00 00 00 00 00	r2 = r7
     489	27 02 00 00 30 00 00 00	r2 *= 0x30
     490	67 03 00 00 03 00 00 00	r3 <<= 0x3
     491	15 01 07 00 00 00 00 00	if r1 == 0x0 goto +0x7 <LBB154_11>
     492	79 64 08 00 00 00 00 00	r4 = *(u64 *)(r6 + 0x8)
     493	b7 05 00 00 08 00 00 00	r5 = 0x8
     494	7b 5a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r5
     495	27 01 00 00 30 00 00 00	r1 *= 0x30
     496	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
     497	7b 4a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r4
     498	05 00 02 00 00 00 00 00	goto +0x2 <LBB154_12>

0000000000000f98 <LBB154_11>
     499	b7 01 00 00 00 00 00 00	r1 = 0x0
     500	7b 1a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r1

0000000000000fa8 <LBB154_12>
     501	bf a1 00 00 00 00 00 00	r1 = r10
     502	07 01 00 00 d0 ff ff ff	r1 += -0x30
     503	bf a4 00 00 00 00 00 00	r4 = r10
     504	07 04 00 00 e8 ff ff ff	r4 += -0x18
     505	85 10 00 00 b3 ff ff ff	call -0x4d ; <alloc::raw_vec::finish_grow>
     506	79 a1 d8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x28)
     507	79 a2 d0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x30)
     508	55 02 03 00 00 00 00 00	if r2 != 0x0 goto +0x3 <LBB154_15>
     509	7b 76 00 00 00 00 00 00	*(u64 *)(r6 + 0x0) = r7
     510	7b 16 08 00 00 00 00 00	*(u64 *)(r6 + 0x8) = r1

0000000000000ff8 <LBB154_14>
     511	95 00 00 00 00 00 00 00	exit

0000000000001000 <LBB154_15>
     512	79 a2 e0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x20)
     513	18 03 00 00 01 00 00 00 00 00 00 00 00 00 00 80	r3 = -0x7fffffffffffffff ll
     515	1d 32 fb ff 00 00 00 00	if r2 == r3 goto -0x5 <LBB154_14>
     516	55 02 02 00 00 00 00 00	if r2 != 0x0 goto +0x2 <LBB154_18>

0000000000001028 <LBB154_17>
     517	85 10 00 00 c1 03 00 00	call 0x3c1 ; <alloc::raw_vec::capacity_overflow>
     518	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000001038 <LBB154_18>
     519	85 10 00 00 d0 03 00 00	call 0x3d0 ; <alloc::alloc::handle_alloc_error>
     520	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000001048 <solana_program::entrypoint::deserialize>
     521	bf 24 00 00 00 00 00 00	r4 = r2
     522	79 46 00 00 00 00 00 00	r6 = *(u64 *)(r4 + 0x0)
     523	7b 1a 98 ff 00 00 00 00	*(u64 *)(r10 - 0x68) = r1
     524	55 06 18 00 00 00 00 00	if r6 != 0x0 goto +0x18 <LBB274_3>
     525	b7 01 00 00 00 00 00 00	r1 = 0x0
     526	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
     527	7b 6a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r6
     528	b7 08 00 00 08 00 00 00	r8 = 0x8
     529	7b 8a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r8

0000000000001090 <LBB274_2>
     530	bf 41 00 00 00 00 00 00	r1 = r4
     531	0f 81 00 00 00 00 00 00	r1 += r8
     532	79 11 00 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x0)
     533	79 a2 f0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x10)
     534	79 a3 98 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x68)
     535	7b 23 18 00 00 00 00 00	*(u64 *)(r3 + 0x18) = r2
     536	79 a2 e8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x18)
     537	7b 23 10 00 00 00 00 00	*(u64 *)(r3 + 0x10) = r2
     538	79 a2 e0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x20)
     539	7b 23 08 00 00 00 00 00	*(u64 *)(r3 + 0x8) = r2
     540	07 08 00 00 08 00 00 00	r8 += 0x8
     541	bf 42 00 00 00 00 00 00	r2 = r4
     542	0f 82 00 00 00 00 00 00	r2 += r8
     543	7b 23 20 00 00 00 00 00	*(u64 *)(r3 + 0x20) = r2
     544	7b 13 28 00 00 00 00 00	*(u64 *)(r3 + 0x28) = r1
     545	0f 81 00 00 00 00 00 00	r1 += r8
     546	0f 14 00 00 00 00 00 00	r4 += r1
     547	7b 43 00 00 00 00 00 00	*(u64 *)(r3 + 0x0) = r4
     548	95 00 00 00 00 00 00 00	exit

0000000000001128 <LBB274_3>
     549	b7 07 00 00 01 00 00 00	r7 = 0x1
     550	18 02 00 00 ab aa aa aa 00 00 00 00 aa aa aa 02	r2 = 0x2aaaaaaaaaaaaab ll
     552	2d 62 01 00 00 00 00 00	if r2 > r6 goto +0x1 <LBB274_5>
     553	b7 07 00 00 00 00 00 00	r7 = 0x0

0000000000001150 <LBB274_5>
     554	2d 62 02 00 00 00 00 00	if r2 > r6 goto +0x2 <LBB274_7>
     555	85 10 00 00 9b 03 00 00	call 0x39b ; <alloc::raw_vec::capacity_overflow>
     556	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000001168 <LBB274_7>
     557	bf 68 00 00 00 00 00 00	r8 = r6
     558	27 08 00 00 30 00 00 00	r8 *= 0x30
     559	67 07 00 00 03 00 00 00	r7 <<= 0x3
     560	7b 4a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r4
     561	15 08 0a 00 00 00 00 00	if r8 == 0x0 goto +0xa <LBB274_10>
     562	bf 81 00 00 00 00 00 00	r1 = r8
     563	bf 72 00 00 00 00 00 00	r2 = r7
     564	85 10 00 00 54 ff ff ff	call -0xac ; <__rust_alloc>
     565	79 a4 d0 ff 00 00 00 00	r4 = *(u64 *)(r10 - 0x30)
     566	15 00 01 00 00 00 00 00	if r0 == 0x0 goto +0x1 <LBB274_9>
     567	05 00 05 00 00 00 00 00	goto +0x5 <LBB274_11>

00000000000011c0 <LBB274_9>
     568	bf 81 00 00 00 00 00 00	r1 = r8
     569	bf 72 00 00 00 00 00 00	r2 = r7
     570	85 10 00 00 9d 03 00 00	call 0x39d ; <alloc::alloc::handle_alloc_error>
     571	85 10 00 00 ff ff ff ff	call -0x1 ; abort

00000000000011e0 <LBB274_10>
     572	bf 70 00 00 00 00 00 00	r0 = r7

00000000000011e8 <LBB274_11>
     573	7b 0a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r0
     574	7b 6a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r6
     575	b7 08 00 00 08 00 00 00	r8 = 0x8
     576	b7 01 00 00 00 00 00 00	r1 = 0x0
     577	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
     578	b7 02 00 00 00 00 00 00	r2 = 0x0
     579	b7 03 00 00 00 00 00 00	r3 = 0x0
     580	7b 6a a0 ff 00 00 00 00	*(u64 *)(r10 - 0x60) = r6
     581	05 00 1d 00 00 00 00 00	goto +0x1d <LBB274_14>

0000000000001230 <LBB274_12>
     582	bf 21 00 00 00 00 00 00	r1 = r2
     583	27 01 00 00 30 00 00 00	r1 *= 0x30
     584	bf 03 00 00 00 00 00 00	r3 = r0
     585	0f 13 00 00 00 00 00 00	r3 += r1
     586	79 a1 a8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x58)
     587	73 13 2a 00 00 00 00 00	*(u8 *)(r3 + 0x2a) = r1
     588	79 a1 b0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x50)
     589	73 13 29 00 00 00 00 00	*(u8 *)(r3 + 0x29) = r1
     590	79 a1 b8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x48)
     591	73 13 28 00 00 00 00 00	*(u8 *)(r3 + 0x28) = r1
     592	79 a1 c0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x40)
     593	7b 13 20 00 00 00 00 00	*(u64 *)(r3 + 0x20) = r1
     594	79 a1 c8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x38)
     595	7b 13 18 00 00 00 00 00	*(u64 *)(r3 + 0x18) = r1
     596	7b 93 10 00 00 00 00 00	*(u64 *)(r3 + 0x10) = r9
     597	7b 63 08 00 00 00 00 00	*(u64 *)(r3 + 0x8) = r6
     598	7b 73 00 00 00 00 00 00	*(u64 *)(r3 + 0x0) = r7
     599	61 a1 fb ff 00 00 00 00	r1 = *(u32 *)(r10 - 0x5)
     600	63 13 2b 00 00 00 00 00	*(u32 *)(r3 + 0x2b) = r1
     601	71 a1 ff ff 00 00 00 00	r1 = *(u8 *)(r10 - 0x1)
     602	73 13 2f 00 00 00 00 00	*(u8 *)(r3 + 0x2f) = r1

00000000000012d8 <LBB274_13>
     603	07 02 00 00 01 00 00 00	r2 += 0x1
     604	7b 2a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r2
     605	79 a3 d8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x28)
     606	07 03 00 00 01 00 00 00	r3 += 0x1
     607	07 08 00 00 08 00 00 00	r8 += 0x8
     608	79 a1 a0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x60)
     609	2d 31 01 00 00 00 00 00	if r1 > r3 goto +0x1 <LBB274_14>
     610	05 00 af ff 00 00 00 00	goto -0x51 <LBB274_2>

0000000000001318 <LBB274_14>
     611	bf 41 00 00 00 00 00 00	r1 = r4
     612	0f 81 00 00 00 00 00 00	r1 += r8
     613	71 11 00 00 00 00 00 00	r1 = *(u8 *)(r1 + 0x0)
     614	7b 3a d8 ff 00 00 00 00	*(u64 *)(r10 - 0x28) = r3
     615	15 01 33 00 ff 00 00 00	if r1 == 0xff goto +0x33 <LBB274_26>
     616	2d 12 01 00 00 00 00 00	if r2 > r1 goto +0x1 <LBB274_16>
     617	05 00 92 00 00 00 00 00	goto +0x92 <LBB274_39>

0000000000001350 <LBB274_16>
     618	bf 25 00 00 00 00 00 00	r5 = r2
     619	27 01 00 00 30 00 00 00	r1 *= 0x30
     620	bf 02 00 00 00 00 00 00	r2 = r0
     621	0f 12 00 00 00 00 00 00	r2 += r1
     622	79 26 08 00 00 00 00 00	r6 = *(u64 *)(r2 + 0x8)
     623	79 63 00 00 00 00 00 00	r3 = *(u64 *)(r6 + 0x0)
     624	07 03 00 00 01 00 00 00	r3 += 0x1
     625	b7 04 00 00 01 00 00 00	r4 = 0x1
     626	15 03 01 00 00 00 00 00	if r3 == 0x0 goto +0x1 <LBB274_18>
     627	b7 04 00 00 00 00 00 00	r4 = 0x0

00000000000013a0 <LBB274_18>
     628	79 27 00 00 00 00 00 00	r7 = *(u64 *)(r2 + 0x0)
     629	7b 36 00 00 00 00 00 00	*(u64 *)(r6 + 0x0) = r3
     630	55 04 02 00 01 00 00 00	if r4 != 0x1 goto +0x2 <LBB274_20>

00000000000013b8 <LBB274_19>
     631	85 10 00 00 ff ff ff ff	call -0x1 ; abort
     632	85 10 00 00 ff ff ff ff	call -0x1 ; abort

00000000000013c8 <LBB274_20>
     633	bf 02 00 00 00 00 00 00	r2 = r0
     634	0f 12 00 00 00 00 00 00	r2 += r1
     635	79 29 10 00 00 00 00 00	r9 = *(u64 *)(r2 + 0x10)
     636	79 92 00 00 00 00 00 00	r2 = *(u64 *)(r9 + 0x0)
     637	07 02 00 00 01 00 00 00	r2 += 0x1
     638	b7 03 00 00 01 00 00 00	r3 = 0x1
     639	15 02 01 00 00 00 00 00	if r2 == 0x0 goto +0x1 <LBB274_22>
     640	b7 03 00 00 00 00 00 00	r3 = 0x0

0000000000001408 <LBB274_22>
     641	7b 29 00 00 00 00 00 00	*(u64 *)(r9 + 0x0) = r2
     642	55 03 01 00 01 00 00 00	if r3 != 0x1 goto +0x1 <LBB274_24>
     643	05 00 f3 ff 00 00 00 00	goto -0xd <LBB274_19>

0000000000001420 <LBB274_24>
     644	bf 02 00 00 00 00 00 00	r2 = r0
     645	0f 12 00 00 00 00 00 00	r2 += r1
     646	71 21 2a 00 00 00 00 00	r1 = *(u8 *)(r2 + 0x2a)
     647	7b 1a a8 ff 00 00 00 00	*(u64 *)(r10 - 0x58) = r1
     648	71 21 29 00 00 00 00 00	r1 = *(u8 *)(r2 + 0x29)
     649	7b 1a b0 ff 00 00 00 00	*(u64 *)(r10 - 0x50) = r1
     650	71 21 28 00 00 00 00 00	r1 = *(u8 *)(r2 + 0x28)
     651	7b 1a b8 ff 00 00 00 00	*(u64 *)(r10 - 0x48) = r1
     652	79 21 20 00 00 00 00 00	r1 = *(u64 *)(r2 + 0x20)
     653	7b 1a c0 ff 00 00 00 00	*(u64 *)(r10 - 0x40) = r1
     654	79 21 18 00 00 00 00 00	r1 = *(u64 *)(r2 + 0x18)
     655	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 0x38) = r1
     656	79 a1 e0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x20)
     657	bf 52 00 00 00 00 00 00	r2 = r5
     658	79 a4 d0 ff 00 00 00 00	r4 = *(u64 *)(r10 - 0x30)
     659	5d 12 b2 ff 00 00 00 00	if r2 != r1 goto -0x4e <LBB274_12>
     660	bf a1 00 00 00 00 00 00	r1 = r10
     661	07 01 00 00 e0 ff ff ff	r1 += -0x20
     662	85 10 00 00 3e ff ff ff	call -0xc2 ; <alloc::raw_vec::RawVec<T,A>::reserve_for_push>
     663	79 a4 d0 ff 00 00 00 00	r4 = *(u64 *)(r10 - 0x30)
     664	79 a0 e8 ff 00 00 00 00	r0 = *(u64 *)(r10 - 0x18)
     665	79 a2 f0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x10)
     666	05 00 ab ff 00 00 00 00	goto -0x55 <LBB274_12>

00000000000014d8 <LBB274_26>
     667	7b 2a c8 ff 00 00 00 00	*(u64 *)(r10 - 0x38) = r2
     668	bf 86 00 00 00 00 00 00	r6 = r8
     669	0f 46 00 00 00 00 00 00	r6 += r4
     670	71 61 03 00 00 00 00 00	r1 = *(u8 *)(r6 + 0x3)
     671	7b 1a b0 ff 00 00 00 00	*(u64 *)(r10 - 0x50) = r1
     672	71 61 02 00 00 00 00 00	r1 = *(u8 *)(r6 + 0x2)
     673	7b 1a b8 ff 00 00 00 00	*(u64 *)(r10 - 0x48) = r1
     674	71 61 01 00 00 00 00 00	r1 = *(u8 *)(r6 + 0x1)
     675	7b 1a c0 ff 00 00 00 00	*(u64 *)(r10 - 0x40) = r1
     676	b7 01 00 00 20 00 00 00	r1 = 0x20
     677	b7 02 00 00 08 00 00 00	r2 = 0x8
     678	85 10 00 00 e2 fe ff ff	call -0x11e ; <__rust_alloc>
     679	55 00 02 00 00 00 00 00	if r0 != 0x0 goto +0x2 <LBB274_28>
     680	b7 01 00 00 20 00 00 00	r1 = 0x20
     681	05 00 56 00 00 00 00 00	goto +0x56 <LBB274_40>

0000000000001550 <LBB274_28>
     682	b7 01 00 00 00 00 00 00	r1 = 0x0
     683	7b 10 10 00 00 00 00 00	*(u64 *)(r0 + 0x10) = r1
     684	b7 01 00 00 01 00 00 00	r1 = 0x1
     685	7b 10 08 00 00 00 00 00	*(u64 *)(r0 + 0x8) = r1
     686	7b 10 00 00 00 00 00 00	*(u64 *)(r0 + 0x0) = r1
     687	bf 61 00 00 00 00 00 00	r1 = r6
     688	07 01 00 00 48 00 00 00	r1 += 0x48
     689	7b 0a a8 ff 00 00 00 00	*(u64 *)(r10 - 0x58) = r0
     690	7b 10 18 00 00 00 00 00	*(u64 *)(r0 + 0x18) = r1
     691	79 69 50 00 00 00 00 00	r9 = *(u64 *)(r6 + 0x50)
     692	63 96 04 00 00 00 00 00	*(u32 *)(r6 + 0x4) = r9
     693	b7 01 00 00 28 00 00 00	r1 = 0x28
     694	b7 02 00 00 08 00 00 00	r2 = 0x8
     695	85 10 00 00 d1 fe ff ff	call -0x12f ; <__rust_alloc>
     696	bf 07 00 00 00 00 00 00	r7 = r0
     697	55 07 02 00 00 00 00 00	if r7 != 0x0 goto +0x2 <LBB274_30>
     698	b7 01 00 00 28 00 00 00	r1 = 0x28
     699	05 00 44 00 00 00 00 00	goto +0x44 <LBB274_40>

00000000000015e0 <LBB274_30>
     700	79 a1 b0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x50)
     701	bf 13 00 00 00 00 00 00	r3 = r1
     702	b7 02 00 00 00 00 00 00	r2 = 0x0
     703	b7 01 00 00 01 00 00 00	r1 = 0x1
     704	b7 05 00 00 01 00 00 00	r5 = 0x1
     705	79 a4 d0 ff 00 00 00 00	r4 = *(u64 *)(r10 - 0x30)
     706	55 03 01 00 00 00 00 00	if r3 != 0x0 goto +0x1 <LBB274_32>
     707	b7 05 00 00 00 00 00 00	r5 = 0x0

0000000000001620 <LBB274_32>
     708	79 a3 b8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x48)
     709	7b 27 10 00 00 00 00 00	*(u64 *)(r7 + 0x10) = r2
     710	b7 02 00 00 01 00 00 00	r2 = 0x1
     711	55 03 01 00 00 00 00 00	if r3 != 0x0 goto +0x1 <LBB274_34>
     712	b7 02 00 00 00 00 00 00	r2 = 0x0

0000000000001648 <LBB274_34>
     713	7b 2a b8 ff 00 00 00 00	*(u64 *)(r10 - 0x48) = r2
     714	79 a2 c0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x40)
     715	b7 03 00 00 01 00 00 00	r3 = 0x1
     716	55 02 01 00 00 00 00 00	if r2 != 0x0 goto +0x1 <LBB274_36>
     717	b7 03 00 00 00 00 00 00	r3 = 0x0

0000000000001670 <LBB274_36>
     718	7b 3a c0 ff 00 00 00 00	*(u64 *)(r10 - 0x40) = r3
     719	bf 62 00 00 00 00 00 00	r2 = r6
     720	07 02 00 00 28 00 00 00	r2 += 0x28
     721	7b 2a b0 ff 00 00 00 00	*(u64 *)(r10 - 0x50) = r2
     722	07 06 00 00 08 00 00 00	r6 += 0x8
     723	7b 17 08 00 00 00 00 00	*(u64 *)(r7 + 0x8) = r1
     724	7b 17 00 00 00 00 00 00	*(u64 *)(r7 + 0x0) = r1
     725	bf 81 00 00 00 00 00 00	r1 = r8
     726	0f 41 00 00 00 00 00 00	r1 += r4
     727	07 01 00 00 58 00 00 00	r1 += 0x58
     728	7b 17 18 00 00 00 00 00	*(u64 *)(r7 + 0x18) = r1
     729	7b 97 20 00 00 00 00 00	*(u64 *)(r7 + 0x20) = r9
     730	0f 98 00 00 00 00 00 00	r8 += r9
     731	07 08 00 00 5f 28 00 00	r8 += 0x285f
     732	57 08 00 00 f8 ff ff ff	r8 &= -0x8
     733	bf 41 00 00 00 00 00 00	r1 = r4
     734	0f 81 00 00 00 00 00 00	r1 += r8
     735	79 19 00 00 00 00 00 00	r9 = *(u64 *)(r1 + 0x0)
     736	79 a1 e0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x20)
     737	79 a2 c8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x38)
     738	5d 12 07 00 00 00 00 00	if r2 != r1 goto +0x7 <LBB274_38>
     739	bf a1 00 00 00 00 00 00	r1 = r10
     740	07 01 00 00 e0 ff ff ff	r1 += -0x20
     741	7b 5a c8 ff 00 00 00 00	*(u64 *)(r10 - 0x38) = r5
     742	85 10 00 00 ee fe ff ff	call -0x112 ; <alloc::raw_vec::RawVec<T,A>::reserve_for_push>
     743	79 a5 c8 ff 00 00 00 00	r5 = *(u64 *)(r10 - 0x38)
     744	79 a4 d0 ff 00 00 00 00	r4 = *(u64 *)(r10 - 0x30)
     745	79 a2 f0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x10)

0000000000001750 <LBB274_38>
     746	bf 21 00 00 00 00 00 00	r1 = r2
     747	27 01 00 00 30 00 00 00	r1 *= 0x30
     748	79 a0 e8 ff 00 00 00 00	r0 = *(u64 *)(r10 - 0x18)
     749	bf 03 00 00 00 00 00 00	r3 = r0
     750	0f 13 00 00 00 00 00 00	r3 += r1
     751	73 53 2a 00 00 00 00 00	*(u8 *)(r3 + 0x2a) = r5
     752	79 a1 b8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x48)
     753	73 13 29 00 00 00 00 00	*(u8 *)(r3 + 0x29) = r1
     754	79 a1 c0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x40)
     755	73 13 28 00 00 00 00 00	*(u8 *)(r3 + 0x28) = r1
     756	7b 93 20 00 00 00 00 00	*(u64 *)(r3 + 0x20) = r9
     757	79 a1 b0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x50)
     758	7b 13 18 00 00 00 00 00	*(u64 *)(r3 + 0x18) = r1
     759	7b 73 10 00 00 00 00 00	*(u64 *)(r3 + 0x10) = r7
     760	79 a1 a8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x58)
     761	7b 13 08 00 00 00 00 00	*(u64 *)(r3 + 0x8) = r1
     762	7b 63 00 00 00 00 00 00	*(u64 *)(r3 + 0x0) = r6
     763	05 00 5f ff 00 00 00 00	goto -0xa1 <LBB274_13>

00000000000017e0 <LBB274_39>
     764	18 03 00 00 98 a3 00 00 00 00 00 00 00 00 00 00	r3 = 0xa398 ll
     766	85 10 00 00 36 04 00 00	call 0x436 ; <core::panicking::panic_bounds_check>
     767	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000001800 <LBB274_40>
     768	b7 02 00 00 08 00 00 00	r2 = 0x8
     769	85 10 00 00 d6 02 00 00	call 0x2d6 ; <alloc::alloc::handle_alloc_error>
     770	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000001818 <<solana_program::hash::Hash as core::convert::From<[u8; _]>>::from>
     771	79 23 18 00 00 00 00 00	r3 = *(u64 *)(r2 + 0x18)
     772	7b 31 18 00 00 00 00 00	*(u64 *)(r1 + 0x18) = r3
     773	79 23 10 00 00 00 00 00	r3 = *(u64 *)(r2 + 0x10)
     774	7b 31 10 00 00 00 00 00	*(u64 *)(r1 + 0x10) = r3
     775	79 23 08 00 00 00 00 00	r3 = *(u64 *)(r2 + 0x8)
     776	7b 31 08 00 00 00 00 00	*(u64 *)(r1 + 0x8) = r3
     777	79 22 00 00 00 00 00 00	r2 = *(u64 *)(r2 + 0x0)
     778	7b 21 00 00 00 00 00 00	*(u64 *)(r1 + 0x0) = r2
     779	95 00 00 00 00 00 00 00	exit

0000000000001860 <solana_program::program::invoke_signed_unchecked>
     780	7b 4a 80 ff 00 00 00 00	*(u64 *)(r10 - 0x80) = r4
     781	7b 3a 78 ff 00 00 00 00	*(u64 *)(r10 - 0x88) = r3
     782	7b 1a 88 ff 00 00 00 00	*(u64 *)(r10 - 0x78) = r1
     783	79 51 08 f0 00 00 00 00	r1 = *(u64 *)(r5 - 0xff8)
     784	7b 1a 70 ff 00 00 00 00	*(u64 *)(r10 - 0x90) = r1
     785	79 51 00 f0 00 00 00 00	r1 = *(u64 *)(r5 - 0x1000)
     786	7b 1a 68 ff 00 00 00 00	*(u64 *)(r10 - 0x98) = r1
     787	7b 2a 98 ff 00 00 00 00	*(u64 *)(r10 - 0x68) = r2
     788	79 21 30 00 00 00 00 00	r1 = *(u64 *)(r2 + 0x30)
     789	b7 02 00 00 01 00 00 00	r2 = 0x1
     790	7b 2a a0 ff 00 00 00 00	*(u64 *)(r10 - 0x60) = r2
     791	7b 1a 90 ff 00 00 00 00	*(u64 *)(r10 - 0x70) = r1
     792	15 01 32 00 00 00 00 00	if r1 == 0x0 goto +0x32 <LBB404_12>
     793	b7 09 00 00 01 00 00 00	r9 = 0x1
     794	18 01 00 00 c4 c3 c3 c3 00 00 00 00 c3 c3 c3 03	r1 = 0x3c3c3c3c3c3c3c4 ll
     796	79 a6 90 ff 00 00 00 00	r6 = *(u64 *)(r10 - 0x70)
     797	2d 61 01 00 00 00 00 00	if r1 > r6 goto +0x1 <LBB404_3>
     798	b7 09 00 00 00 00 00 00	r9 = 0x0

00000000000018f8 <LBB404_3>
     799	79 a2 98 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x68)
     800	2d 61 02 00 00 00 00 00	if r1 > r6 goto +0x2 <LBB404_5>

0000000000001908 <LBB404_4>
     801	85 10 00 00 a5 02 00 00	call 0x2a5 ; <alloc::raw_vec::capacity_overflow>
     802	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000001918 <LBB404_5>
     803	79 28 28 00 00 00 00 00	r8 = *(u64 *)(r2 + 0x28)
     804	bf 67 00 00 00 00 00 00	r7 = r6
     805	27 07 00 00 22 00 00 00	r7 *= 0x22
     806	15 07 0a 00 00 00 00 00	if r7 == 0x0 goto +0xa <LBB404_8>
     807	bf 71 00 00 00 00 00 00	r1 = r7
     808	bf 92 00 00 00 00 00 00	r2 = r9
     809	85 10 00 00 5f fe ff ff	call -0x1a1 ; <__rust_alloc>
     810	7b 0a a0 ff 00 00 00 00	*(u64 *)(r10 - 0x60) = r0
     811	15 00 01 00 00 00 00 00	if r0 == 0x0 goto +0x1 <LBB404_7>
     812	05 00 05 00 00 00 00 00	goto +0x5 <LBB404_9>

0000000000001968 <LBB404_7>
     813	bf 71 00 00 00 00 00 00	r1 = r7
     814	bf 92 00 00 00 00 00 00	r2 = r9
     815	85 10 00 00 a8 02 00 00	call 0x2a8 ; <alloc::alloc::handle_alloc_error>
     816	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000001988 <LBB404_8>
     817	7b 9a a0 ff 00 00 00 00	*(u64 *)(r10 - 0x60) = r9

0000000000001990 <LBB404_9>
     818	b7 01 00 00 00 00 00 00	r1 = 0x0
     819	bf 62 00 00 00 00 00 00	r2 = r6

00000000000019a0 <LBB404_10>
     820	1d 17 16 00 00 00 00 00	if r7 == r1 goto +0x16 <LBB404_12>
     821	79 a3 a0 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x60)
     822	0f 13 00 00 00 00 00 00	r3 += r1
     823	71 84 20 00 00 00 00 00	r4 = *(u8 *)(r8 + 0x20)
     824	7b 4a a8 ff 00 00 00 00	*(u64 *)(r10 - 0x58) = r4
     825	71 85 21 00 00 00 00 00	r5 = *(u8 *)(r8 + 0x21)
     826	79 80 00 00 00 00 00 00	r0 = *(u64 *)(r8 + 0x0)
     827	bf 74 00 00 00 00 00 00	r4 = r7
     828	79 87 08 00 00 00 00 00	r7 = *(u64 *)(r8 + 0x8)
     829	79 89 10 00 00 00 00 00	r9 = *(u64 *)(r8 + 0x10)
     830	79 86 18 00 00 00 00 00	r6 = *(u64 *)(r8 + 0x18)
     831	7b 63 18 00 00 00 00 00	*(u64 *)(r3 + 0x18) = r6
     832	7b 93 10 00 00 00 00 00	*(u64 *)(r3 + 0x10) = r9
     833	7b 73 08 00 00 00 00 00	*(u64 *)(r3 + 0x8) = r7
     834	bf 47 00 00 00 00 00 00	r7 = r4
     835	7b 03 00 00 00 00 00 00	*(u64 *)(r3 + 0x0) = r0
     836	73 53 21 00 00 00 00 00	*(u8 *)(r3 + 0x21) = r5
     837	79 a4 a8 ff 00 00 00 00	r4 = *(u64 *)(r10 - 0x58)
     838	73 43 20 00 00 00 00 00	*(u8 *)(r3 + 0x20) = r4
     839	07 01 00 00 22 00 00 00	r1 += 0x22
     840	07 08 00 00 22 00 00 00	r8 += 0x22
     841	07 02 00 00 ff ff ff ff	r2 += -0x1
     842	55 02 e9 ff 00 00 00 00	if r2 != 0x0 goto -0x17 <LBB404_10>

0000000000001a58 <LBB404_12>
     843	79 a7 98 ff 00 00 00 00	r7 = *(u64 *)(r10 - 0x68)
     844	79 72 40 00 00 00 00 00	r2 = *(u64 *)(r7 + 0x40)
     845	79 76 48 00 00 00 00 00	r6 = *(u64 *)(r7 + 0x48)
     846	b7 09 00 00 01 00 00 00	r9 = 0x1
     847	15 06 10 00 00 00 00 00	if r6 == 0x0 goto +0x10 <LBB404_17>
     848	7b 2a a8 ff 00 00 00 00	*(u64 *)(r10 - 0x58) = r2
     849	65 06 01 00 ff ff ff ff	if r6 s> -0x1 goto +0x1 <LBB404_15>
     850	05 00 ce ff 00 00 00 00	goto -0x32 <LBB404_4>

0000000000001a98 <LBB404_15>
     851	bf 68 00 00 00 00 00 00	r8 = r6
     852	a7 08 00 00 ff ff ff ff	r8 ^= -0x1
     853	77 08 00 00 3f 00 00 00	r8 >>= 0x3f
     854	bf 61 00 00 00 00 00 00	r1 = r6
     855	bf 82 00 00 00 00 00 00	r2 = r8
     856	85 10 00 00 30 fe ff ff	call -0x1d0 ; <__rust_alloc>
     857	bf 09 00 00 00 00 00 00	r9 = r0
     858	79 a2 a8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x58)
     859	55 09 04 00 00 00 00 00	if r9 != 0x0 goto +0x4 <LBB404_17>
     860	bf 61 00 00 00 00 00 00	r1 = r6
     861	bf 82 00 00 00 00 00 00	r2 = r8
     862	85 10 00 00 79 02 00 00	call 0x279 ; <alloc::alloc::handle_alloc_error>
     863	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000001b00 <LBB404_17>
     864	bf 91 00 00 00 00 00 00	r1 = r9
     865	bf 63 00 00 00 00 00 00	r3 = r6
     866	85 10 00 00 fd 0e 00 00	call 0xefd ; <memcpy>
     867	79 71 18 00 00 00 00 00	r1 = *(u64 *)(r7 + 0x18)
     868	79 72 10 00 00 00 00 00	r2 = *(u64 *)(r7 + 0x10)
     869	79 73 08 00 00 00 00 00	r3 = *(u64 *)(r7 + 0x8)
     870	79 74 00 00 00 00 00 00	r4 = *(u64 *)(r7 + 0x0)
     871	79 a5 a0 ff 00 00 00 00	r5 = *(u64 *)(r10 - 0x60)
     872	7b 5a b0 ff 00 00 00 00	*(u64 *)(r10 - 0x50) = r5
     873	79 a5 90 ff 00 00 00 00	r5 = *(u64 *)(r10 - 0x70)
     874	7b 5a b8 ff 00 00 00 00	*(u64 *)(r10 - 0x48) = r5
     875	7b 5a c0 ff 00 00 00 00	*(u64 *)(r10 - 0x40) = r5
     876	7b 9a c8 ff 00 00 00 00	*(u64 *)(r10 - 0x38) = r9
     877	7b 6a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r6
     878	7b 6a d8 ff 00 00 00 00	*(u64 *)(r10 - 0x28) = r6
     879	7b 4a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r4
     880	7b 3a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r3
     881	7b 2a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r2
     882	7b 1a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r1
     883	bf a1 00 00 00 00 00 00	r1 = r10
     884	07 01 00 00 b0 ff ff ff	r1 += -0x50
     885	79 a2 78 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x88)
     886	79 a3 80 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x80)
     887	79 a4 68 ff 00 00 00 00	r4 = *(u64 *)(r10 - 0x98)
     888	79 a5 70 ff 00 00 00 00	r5 = *(u64 *)(r10 - 0x90)
     889	85 10 00 00 ff ff ff ff	call -0x1 ; sol_invoke_signed_rust
     890	55 00 04 00 00 00 00 00	if r0 != 0x0 goto +0x4 <LBB404_19>
     891	b7 01 00 00 18 00 00 00	r1 = 0x18
     892	79 a2 88 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x78)
     893	63 12 00 00 00 00 00 00	*(u32 *)(r2 + 0x0) = r1
     894	05 00 03 00 00 00 00 00	goto +0x3 <LBB404_20>

0000000000001bf8 <LBB404_19>
     895	79 a1 88 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x78)
     896	bf 02 00 00 00 00 00 00	r2 = r0
     897	85 10 00 00 75 00 00 00	call 0x75 ; <<solana_program::program_error::ProgramError as core::convert::From<u64>>::from>

0000000000001c10 <LBB404_20>
     898	79 a2 b8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x48)
     899	15 02 04 00 00 00 00 00	if r2 == 0x0 goto +0x4 <LBB404_22>
     900	27 02 00 00 22 00 00 00	r2 *= 0x22
     901	79 a1 b0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x50)
     902	b7 03 00 00 01 00 00 00	r3 = 0x1
     903	85 10 00 00 03 fe ff ff	call -0x1fd ; <__rust_dealloc>

0000000000001c40 <LBB404_22>
     904	79 a2 d0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x30)
     905	15 02 03 00 00 00 00 00	if r2 == 0x0 goto +0x3 <LBB404_24>
     906	79 a1 c8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x38)
     907	b7 03 00 00 01 00 00 00	r3 = 0x1
     908	85 10 00 00 fe fd ff ff	call -0x202 ; <__rust_dealloc>

0000000000001c68 <LBB404_24>
     909	95 00 00 00 00 00 00 00	exit

0000000000001c70 <solana_program::program_error::<impl core::convert::From<solana_program::program_error::ProgramError> for u64>::from>
     910	61 12 00 00 00 00 00 00	r2 = *(u32 *)(r1 + 0x0)
     911	65 02 09 00 0b 00 00 00	if r2 s> 0xb goto +0x9 <LBB408_16>
     912	65 02 0f 00 05 00 00 00	if r2 s> 0x5 goto +0xf <LBB408_9>
     913	65 02 1a 00 02 00 00 00	if r2 s> 0x2 goto +0x1a <LBB408_6>
     914	15 02 2d 00 00 00 00 00	if r2 == 0x0 goto +0x2d <LBB408_31>
     915	18 06 00 00 00 00 00 00 00 00 00 00 02 00 00 00	r6 = 0x200000000 ll
     917	15 02 59 00 01 00 00 00	if r2 == 0x1 goto +0x59 <LBB408_46>
     918	18 06 00 00 00 00 00 00 00 00 00 00 03 00 00 00	r6 = 0x300000000 ll
     920	05 00 56 00 00 00 00 00	goto +0x56 <LBB408_46>

0000000000001cc8 <LBB408_16>
     921	65 02 0c 00 11 00 00 00	if r2 s> 0x11 goto +0xc <LBB408_24>
     922	65 02 16 00 0e 00 00 00	if r2 s> 0xe goto +0x16 <LBB408_21>
     923	15 02 2a 00 0c 00 00 00	if r2 == 0xc goto +0x2a <LBB408_38>
     924	15 02 2c 00 0d 00 00 00	if r2 == 0xd goto +0x2c <LBB408_39>
     925	18 06 00 00 00 00 00 00 00 00 00 00 0f 00 00 00	r6 = 0xf00000000 ll
     927	05 00 4f 00 00 00 00 00	goto +0x4f <LBB408_46>

0000000000001d00 <LBB408_9>
     928	65 02 15 00 08 00 00 00	if r2 s> 0x8 goto +0x15 <LBB408_13>
     929	15 02 2a 00 06 00 00 00	if r2 == 0x6 goto +0x2a <LBB408_34>
     930	15 02 2c 00 07 00 00 00	if r2 == 0x7 goto +0x2c <LBB408_35>
     931	18 06 00 00 00 00 00 00 00 00 00 00 09 00 00 00	r6 = 0x900000000 ll
     933	05 00 49 00 00 00 00 00	goto +0x49 <LBB408_46>

0000000000001d30 <LBB408_24>
     934	65 02 14 00 14 00 00 00	if r2 s> 0x14 goto +0x14 <LBB408_28>
     935	15 02 2a 00 12 00 00 00	if r2 == 0x12 goto +0x2a <LBB408_42>
     936	15 02 2c 00 13 00 00 00	if r2 == 0x13 goto +0x2c <LBB408_43>
     937	18 06 00 00 00 00 00 00 00 00 00 00 15 00 00 00	r6 = 0x1500000000 ll
     939	05 00 43 00 00 00 00 00	goto +0x43 <LBB408_46>

0000000000001d60 <LBB408_6>
     940	15 02 2b 00 03 00 00 00	if r2 == 0x3 goto +0x2b <LBB408_32>
     941	15 02 2d 00 04 00 00 00	if r2 == 0x4 goto +0x2d <LBB408_33>
     942	18 06 00 00 00 00 00 00 00 00 00 00 06 00 00 00	r6 = 0x600000000 ll
     944	05 00 3e 00 00 00 00 00	goto +0x3e <LBB408_46>

0000000000001d88 <LBB408_21>
     945	15 02 2c 00 0f 00 00 00	if r2 == 0xf goto +0x2c <LBB408_40>
     946	15 02 2e 00 10 00 00 00	if r2 == 0x10 goto +0x2e <LBB408_41>
     947	18 06 00 00 00 00 00 00 00 00 00 00 12 00 00 00	r6 = 0x1200000000 ll
     949	05 00 39 00 00 00 00 00	goto +0x39 <LBB408_46>

0000000000001db0 <LBB408_13>
     950	15 02 2d 00 09 00 00 00	if r2 == 0x9 goto +0x2d <LBB408_36>
     951	15 02 2f 00 0a 00 00 00	if r2 == 0xa goto +0x2f <LBB408_37>
     952	18 06 00 00 00 00 00 00 00 00 00 00 0c 00 00 00	r6 = 0xc00000000 ll
     954	05 00 34 00 00 00 00 00	goto +0x34 <LBB408_46>

0000000000001dd8 <LBB408_28>
     955	15 02 2e 00 15 00 00 00	if r2 == 0x15 goto +0x2e <LBB408_44>
     956	15 02 30 00 16 00 00 00	if r2 == 0x16 goto +0x30 <LBB408_45>
     957	18 06 00 00 00 00 00 00 00 00 00 00 18 00 00 00	r6 = 0x1800000000 ll
     959	05 00 2f 00 00 00 00 00	goto +0x2f <LBB408_46>

0000000000001e00 <LBB408_31>
     960	18 06 00 00 00 00 00 00 00 00 00 00 01 00 00 00	r6 = 0x100000000 ll
     962	61 13 04 00 00 00 00 00	r3 = *(u32 *)(r1 + 0x4)
     963	15 03 2b 00 00 00 00 00	if r3 == 0x0 goto +0x2b <LBB408_46>
     964	bf 36 00 00 00 00 00 00	r6 = r3
     965	05 00 29 00 00 00 00 00	goto +0x29 <LBB408_46>

0000000000001e30 <LBB408_38>
     966	18 06 00 00 00 00 00 00 00 00 00 00 0d 00 00 00	r6 = 0xd00000000 ll
     968	05 00 26 00 00 00 00 00	goto +0x26 <LBB408_46>

0000000000001e48 <LBB408_39>
     969	18 06 00 00 00 00 00 00 00 00 00 00 0e 00 00 00	r6 = 0xe00000000 ll
     971	05 00 23 00 00 00 00 00	goto +0x23 <LBB408_46>

0000000000001e60 <LBB408_34>
     972	18 06 00 00 00 00 00 00 00 00 00 00 07 00 00 00	r6 = 0x700000000 ll
     974	05 00 20 00 00 00 00 00	goto +0x20 <LBB408_46>

0000000000001e78 <LBB408_35>
     975	18 06 00 00 00 00 00 00 00 00 00 00 08 00 00 00	r6 = 0x800000000 ll
     977	05 00 1d 00 00 00 00 00	goto +0x1d <LBB408_46>

0000000000001e90 <LBB408_42>
     978	18 06 00 00 00 00 00 00 00 00 00 00 13 00 00 00	r6 = 0x1300000000 ll
     980	05 00 1a 00 00 00 00 00	goto +0x1a <LBB408_46>

0000000000001ea8 <LBB408_43>
     981	18 06 00 00 00 00 00 00 00 00 00 00 14 00 00 00	r6 = 0x1400000000 ll
     983	05 00 17 00 00 00 00 00	goto +0x17 <LBB408_46>

0000000000001ec0 <LBB408_32>
     984	18 06 00 00 00 00 00 00 00 00 00 00 04 00 00 00	r6 = 0x400000000 ll
     986	05 00 14 00 00 00 00 00	goto +0x14 <LBB408_46>

0000000000001ed8 <LBB408_33>
     987	18 06 00 00 00 00 00 00 00 00 00 00 05 00 00 00	r6 = 0x500000000 ll
     989	05 00 11 00 00 00 00 00	goto +0x11 <LBB408_46>

0000000000001ef0 <LBB408_40>
     990	18 06 00 00 00 00 00 00 00 00 00 00 10 00 00 00	r6 = 0x1000000000 ll
     992	05 00 0e 00 00 00 00 00	goto +0xe <LBB408_46>

0000000000001f08 <LBB408_41>
     993	18 06 00 00 00 00 00 00 00 00 00 00 11 00 00 00	r6 = 0x1100000000 ll
     995	05 00 0b 00 00 00 00 00	goto +0xb <LBB408_46>

0000000000001f20 <LBB408_36>
     996	18 06 00 00 00 00 00 00 00 00 00 00 0a 00 00 00	r6 = 0xa00000000 ll
     998	05 00 08 00 00 00 00 00	goto +0x8 <LBB408_46>

0000000000001f38 <LBB408_37>
     999	18 06 00 00 00 00 00 00 00 00 00 00 0b 00 00 00	r6 = 0xb00000000 ll
    1001	05 00 05 00 00 00 00 00	goto +0x5 <LBB408_46>

0000000000001f50 <LBB408_44>
    1002	18 06 00 00 00 00 00 00 00 00 00 00 16 00 00 00	r6 = 0x1600000000 ll
    1004	05 00 02 00 00 00 00 00	goto +0x2 <LBB408_46>

0000000000001f68 <LBB408_45>
    1005	18 06 00 00 00 00 00 00 00 00 00 00 17 00 00 00	r6 = 0x1700000000 ll

0000000000001f78 <LBB408_46>
    1007	55 02 05 00 0e 00 00 00	if r2 != 0xe goto +0x5 <LBB408_49>
    1008	79 12 08 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x8)
    1009	15 02 03 00 00 00 00 00	if r2 == 0x0 goto +0x3 <LBB408_49>
    1010	79 11 10 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x10)
    1011	b7 03 00 00 01 00 00 00	r3 = 0x1
    1012	85 10 00 00 96 fd ff ff	call -0x26a ; <__rust_dealloc>

0000000000001fa8 <LBB408_49>
    1013	bf 60 00 00 00 00 00 00	r0 = r6
    1014	95 00 00 00 00 00 00 00	exit

0000000000001fb8 <<solana_program::program_error::ProgramError as core::convert::From<u64>>::from>
    1015	bf 16 00 00 00 00 00 00	r6 = r1
    1016	18 03 00 00 00 00 00 00 00 00 00 00 ff ff ff ff	r3 = -0x100000000 ll
    1018	bf 21 00 00 00 00 00 00	r1 = r2
    1019	0f 31 00 00 00 00 00 00	r1 += r3
    1020	bf 13 00 00 00 00 00 00	r3 = r1
    1021	77 03 00 00 20 00 00 00	r3 >>= 0x20
    1022	67 01 00 00 20 00 00 00	r1 <<= 0x20
    1023	4f 31 00 00 00 00 00 00	r1 |= r3
    1024	65 01 09 00 0b 00 00 00	if r1 s> 0xb goto +0x9 <LBB409_16>
    1025	65 01 17 00 05 00 00 00	if r1 s> 0x5 goto +0x17 <LBB409_9>
    1026	65 01 24 00 02 00 00 00	if r1 s> 0x2 goto +0x24 <LBB409_6>
    1027	15 01 3b 00 00 00 00 00	if r1 == 0x0 goto +0x3b <LBB409_32>
    1028	b7 03 00 00 01 00 00 00	r3 = 0x1
    1029	15 01 62 00 01 00 00 00	if r1 == 0x1 goto +0x62 <LBB409_57>
    1030	15 01 01 00 02 00 00 00	if r1 == 0x2 goto +0x1 <LBB409_33>
    1031	05 00 34 00 00 00 00 00	goto +0x34 <LBB409_31>

0000000000002040 <LBB409_33>
    1032	b7 03 00 00 02 00 00 00	r3 = 0x2
    1033	05 00 5e 00 00 00 00 00	goto +0x5e <LBB409_57>

0000000000002050 <LBB409_16>
    1034	65 01 15 00 11 00 00 00	if r1 s> 0x11 goto +0x15 <LBB409_24>
    1035	65 01 21 00 0e 00 00 00	if r1 s> 0xe goto +0x21 <LBB409_21>
    1036	15 01 35 00 0c 00 00 00	if r1 == 0xc goto +0x35 <LBB409_43>
    1037	15 01 36 00 0d 00 00 00	if r1 == 0xd goto +0x36 <LBB409_44>
    1038	15 01 01 00 0e 00 00 00	if r1 == 0xe goto +0x1 <LBB409_45>
    1039	05 00 2c 00 00 00 00 00	goto +0x2c <LBB409_31>

0000000000002080 <LBB409_45>
    1040	b7 07 00 00 07 00 00 00	r7 = 0x7
    1041	b7 01 00 00 07 00 00 00	r1 = 0x7
    1042	b7 02 00 00 01 00 00 00	r2 = 0x1
    1043	85 10 00 00 75 fd ff ff	call -0x28b ; <__rust_alloc>
    1044	55 00 4b 00 00 00 00 00	if r0 != 0x0 goto +0x4b <LBB409_47>
    1045	b7 01 00 00 07 00 00 00	r1 = 0x7
    1046	b7 02 00 00 01 00 00 00	r2 = 0x1
    1047	85 10 00 00 c0 01 00 00	call 0x1c0 ; <alloc::alloc::handle_alloc_error>
    1048	85 10 00 00 ff ff ff ff	call -0x1 ; abort

00000000000020c8 <LBB409_9>
    1049	65 01 19 00 08 00 00 00	if r1 s> 0x8 goto +0x19 <LBB409_13>
    1050	15 01 2b 00 06 00 00 00	if r1 == 0x6 goto +0x2b <LBB409_37>
    1051	15 01 2c 00 07 00 00 00	if r1 == 0x7 goto +0x2c <LBB409_38>
    1052	15 01 01 00 08 00 00 00	if r1 == 0x8 goto +0x1 <LBB409_39>
    1053	05 00 1e 00 00 00 00 00	goto +0x1e <LBB409_31>

00000000000020f0 <LBB409_39>
    1054	b7 03 00 00 08 00 00 00	r3 = 0x8
    1055	05 00 48 00 00 00 00 00	goto +0x48 <LBB409_57>

0000000000002100 <LBB409_24>
    1056	65 01 18 00 14 00 00 00	if r1 s> 0x14 goto +0x18 <LBB409_28>
    1057	15 01 28 00 12 00 00 00	if r1 == 0x12 goto +0x28 <LBB409_51>
    1058	15 01 29 00 13 00 00 00	if r1 == 0x13 goto +0x29 <LBB409_52>
    1059	15 01 01 00 14 00 00 00	if r1 == 0x14 goto +0x1 <LBB409_53>
    1060	05 00 17 00 00 00 00 00	goto +0x17 <LBB409_31>

0000000000002128 <LBB409_53>
    1061	b7 03 00 00 14 00 00 00	r3 = 0x14
    1062	05 00 41 00 00 00 00 00	goto +0x41 <LBB409_57>

0000000000002138 <LBB409_6>
    1063	15 01 26 00 03 00 00 00	if r1 == 0x3 goto +0x26 <LBB409_34>
    1064	15 01 27 00 04 00 00 00	if r1 == 0x4 goto +0x27 <LBB409_35>
    1065	15 01 01 00 05 00 00 00	if r1 == 0x5 goto +0x1 <LBB409_36>
    1066	05 00 11 00 00 00 00 00	goto +0x11 <LBB409_31>

0000000000002158 <LBB409_36>
    1067	b7 03 00 00 05 00 00 00	r3 = 0x5
    1068	05 00 3b 00 00 00 00 00	goto +0x3b <LBB409_57>

0000000000002168 <LBB409_21>
    1069	15 01 24 00 0f 00 00 00	if r1 == 0xf goto +0x24 <LBB409_48>
    1070	15 01 25 00 10 00 00 00	if r1 == 0x10 goto +0x25 <LBB409_49>
    1071	15 01 01 00 11 00 00 00	if r1 == 0x11 goto +0x1 <LBB409_50>
    1072	05 00 0b 00 00 00 00 00	goto +0xb <LBB409_31>

0000000000002188 <LBB409_50>
    1073	b7 03 00 00 11 00 00 00	r3 = 0x11
    1074	05 00 35 00 00 00 00 00	goto +0x35 <LBB409_57>

0000000000002198 <LBB409_13>
    1075	15 01 22 00 09 00 00 00	if r1 == 0x9 goto +0x22 <LBB409_40>
    1076	15 01 23 00 0a 00 00 00	if r1 == 0xa goto +0x23 <LBB409_41>
    1077	15 01 01 00 0b 00 00 00	if r1 == 0xb goto +0x1 <LBB409_42>
    1078	05 00 05 00 00 00 00 00	goto +0x5 <LBB409_31>

00000000000021b8 <LBB409_42>
    1079	b7 03 00 00 0b 00 00 00	r3 = 0xb
    1080	05 00 2f 00 00 00 00 00	goto +0x2f <LBB409_57>

00000000000021c8 <LBB409_28>
    1081	15 01 20 00 15 00 00 00	if r1 == 0x15 goto +0x20 <LBB409_54>
    1082	15 01 21 00 16 00 00 00	if r1 == 0x16 goto +0x21 <LBB409_55>
    1083	15 01 22 00 17 00 00 00	if r1 == 0x17 goto +0x22 <LBB409_56>

00000000000021e0 <LBB409_31>
    1084	63 26 04 00 00 00 00 00	*(u32 *)(r6 + 0x4) = r2
    1085	b7 03 00 00 00 00 00 00	r3 = 0x0
    1086	05 00 29 00 00 00 00 00	goto +0x29 <LBB409_57>

00000000000021f8 <LBB409_32>
    1087	b7 03 00 00 00 00 00 00	r3 = 0x0
    1088	63 36 04 00 00 00 00 00	*(u32 *)(r6 + 0x4) = r3
    1089	05 00 26 00 00 00 00 00	goto +0x26 <LBB409_57>

0000000000002210 <LBB409_43>
    1090	b7 03 00 00 0c 00 00 00	r3 = 0xc
    1091	05 00 24 00 00 00 00 00	goto +0x24 <LBB409_57>

0000000000002220 <LBB409_44>
    1092	b7 03 00 00 0d 00 00 00	r3 = 0xd
    1093	05 00 22 00 00 00 00 00	goto +0x22 <LBB409_57>

0000000000002230 <LBB409_37>
    1094	b7 03 00 00 06 00 00 00	r3 = 0x6
    1095	05 00 20 00 00 00 00 00	goto +0x20 <LBB409_57>

0000000000002240 <LBB409_38>
    1096	b7 03 00 00 07 00 00 00	r3 = 0x7
    1097	05 00 1e 00 00 00 00 00	goto +0x1e <LBB409_57>

0000000000002250 <LBB409_51>
    1098	b7 03 00 00 12 00 00 00	r3 = 0x12
    1099	05 00 1c 00 00 00 00 00	goto +0x1c <LBB409_57>

0000000000002260 <LBB409_52>
    1100	b7 03 00 00 13 00 00 00	r3 = 0x13
    1101	05 00 1a 00 00 00 00 00	goto +0x1a <LBB409_57>

0000000000002270 <LBB409_34>
    1102	b7 03 00 00 03 00 00 00	r3 = 0x3
    1103	05 00 18 00 00 00 00 00	goto +0x18 <LBB409_57>

0000000000002280 <LBB409_35>
    1104	b7 03 00 00 04 00 00 00	r3 = 0x4
    1105	05 00 16 00 00 00 00 00	goto +0x16 <LBB409_57>

0000000000002290 <LBB409_48>
    1106	b7 03 00 00 0f 00 00 00	r3 = 0xf
    1107	05 00 14 00 00 00 00 00	goto +0x14 <LBB409_57>

00000000000022a0 <LBB409_49>
    1108	b7 03 00 00 10 00 00 00	r3 = 0x10
    1109	05 00 12 00 00 00 00 00	goto +0x12 <LBB409_57>

00000000000022b0 <LBB409_40>
    1110	b7 03 00 00 09 00 00 00	r3 = 0x9
    1111	05 00 10 00 00 00 00 00	goto +0x10 <LBB409_57>

00000000000022c0 <LBB409_41>
    1112	b7 03 00 00 0a 00 00 00	r3 = 0xa
    1113	05 00 0e 00 00 00 00 00	goto +0xe <LBB409_57>

00000000000022d0 <LBB409_54>
    1114	b7 03 00 00 15 00 00 00	r3 = 0x15
    1115	05 00 0c 00 00 00 00 00	goto +0xc <LBB409_57>

00000000000022e0 <LBB409_55>
    1116	b7 03 00 00 16 00 00 00	r3 = 0x16
    1117	05 00 0a 00 00 00 00 00	goto +0xa <LBB409_57>

00000000000022f0 <LBB409_56>
    1118	b7 03 00 00 17 00 00 00	r3 = 0x17
    1119	05 00 08 00 00 00 00 00	goto +0x8 <LBB409_57>

0000000000002300 <LBB409_47>
    1120	b7 01 00 00 6e 6f 77 6e	r1 = 0x6e776f6e
    1121	63 10 03 00 00 00 00 00	*(u32 *)(r0 + 0x3) = r1
    1122	b7 01 00 00 55 6e 6b 6e	r1 = 0x6e6b6e55
    1123	63 10 00 00 00 00 00 00	*(u32 *)(r0 + 0x0) = r1
    1124	7b 06 10 00 00 00 00 00	*(u64 *)(r6 + 0x10) = r0
    1125	7b 76 18 00 00 00 00 00	*(u64 *)(r6 + 0x18) = r7
    1126	7b 76 08 00 00 00 00 00	*(u64 *)(r6 + 0x8) = r7
    1127	b7 03 00 00 0e 00 00 00	r3 = 0xe

0000000000002340 <LBB409_57>
    1128	63 36 00 00 00 00 00 00	*(u32 *)(r6 + 0x0) = r3
    1129	95 00 00 00 00 00 00 00	exit

0000000000002350 <<solana_program::program_error::ProgramError as core::fmt::Debug>::fmt>
    1130	61 13 00 00 00 00 00 00	r3 = *(u32 *)(r1 + 0x0)
    1131	65 03 09 00 0b 00 00 00	if r3 s> 0xb goto +0x9 <LBB800_6>
    1132	65 03 17 00 05 00 00 00	if r3 s> 0x5 goto +0x17 <LBB800_11>
    1133	65 03 26 00 02 00 00 00	if r3 s> 0x2 goto +0x26 <LBB800_19>
    1134	15 03 3d 00 00 00 00 00	if r3 == 0x0 goto +0x3d <LBB800_31>
    1135	15 03 48 00 01 00 00 00	if r3 == 0x1 goto +0x48 <LBB800_33>
    1136	bf 21 00 00 00 00 00 00	r1 = r2
    1137	18 02 00 00 12 96 00 00 00 00 00 00 00 00 00 00	r2 = 0x9612 ll
    1139	b7 03 00 00 16 00 00 00	r3 = 0x16
    1140	05 00 89 00 00 00 00 00	goto +0x89 <LBB800_53>

00000000000023a8 <LBB800_6>
    1141	65 03 16 00 11 00 00 00	if r3 s> 0x11 goto +0x16 <LBB800_15>
    1142	65 03 23 00 0e 00 00 00	if r3 s> 0xe goto +0x23 <LBB800_22>
    1143	15 03 45 00 0c 00 00 00	if r3 == 0xc goto +0x45 <LBB800_34>
    1144	15 03 49 00 0d 00 00 00	if r3 == 0xd goto +0x49 <LBB800_35>
    1145	07 01 00 00 08 00 00 00	r1 += 0x8
    1146	7b 1a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r1
    1147	bf a4 00 00 00 00 00 00	r4 = r10
    1148	07 04 00 00 f8 ff ff ff	r4 += -0x8
    1149	bf 21 00 00 00 00 00 00	r1 = r2
    1150	18 02 00 00 2f 95 00 00 00 00 00 00 00 00 00 00	r2 = 0x952f ll
    1152	b7 03 00 00 0c 00 00 00	r3 = 0xc
    1153	18 05 00 00 b0 a3 00 00 00 00 00 00 00 00 00 00	r5 = 0xa3b0 ll
    1155	05 00 32 00 00 00 00 00	goto +0x32 <LBB800_32>

0000000000002420 <LBB800_11>
    1156	65 03 1b 00 08 00 00 00	if r3 s> 0x8 goto +0x1b <LBB800_25>
    1157	15 03 41 00 06 00 00 00	if r3 == 0x6 goto +0x41 <LBB800_37>
    1158	15 03 44 00 07 00 00 00	if r3 == 0x7 goto +0x44 <LBB800_38>
    1159	bf 21 00 00 00 00 00 00	r1 = r2
    1160	18 02 00 00 ab 95 00 00 00 00 00 00 00 00 00 00	r2 = 0x95ab ll
    1162	b7 03 00 00 19 00 00 00	r3 = 0x19
    1163	05 00 72 00 00 00 00 00	goto +0x72 <LBB800_53>

0000000000002460 <LBB800_15>
    1164	65 03 19 00 14 00 00 00	if r3 s> 0x14 goto +0x19 <LBB800_28>
    1165	15 03 42 00 12 00 00 00	if r3 == 0x12 goto +0x42 <LBB800_39>
    1166	15 03 46 00 13 00 00 00	if r3 == 0x13 goto +0x46 <LBB800_40>
    1167	bf 21 00 00 00 00 00 00	r1 = r2
    1168	18 02 00 00 a9 94 00 00 00 00 00 00 00 00 00 00	r2 = 0x94a9 ll
    1170	b7 03 00 00 21 00 00 00	r3 = 0x21
    1171	05 00 6a 00 00 00 00 00	goto +0x6a <LBB800_53>

00000000000024a0 <LBB800_19>
    1172	15 03 45 00 03 00 00 00	if r3 == 0x3 goto +0x45 <LBB800_41>
    1173	15 03 49 00 04 00 00 00	if r3 == 0x4 goto +0x49 <LBB800_43>
    1174	bf 21 00 00 00 00 00 00	r1 = r2
    1175	18 02 00 00 ee 95 00 00 00 00 00 00 00 00 00 00	r2 = 0x95ee ll
    1177	05 00 50 00 00 00 00 00	goto +0x50 <LBB800_46>

00000000000024d0 <LBB800_22>
    1178	15 03 48 00 0f 00 00 00	if r3 == 0xf goto +0x48 <LBB800_44>
    1179	15 03 4b 00 10 00 00 00	if r3 == 0x10 goto +0x4b <LBB800_45>
    1180	bf 21 00 00 00 00 00 00	r1 = r2
    1181	18 02 00 00 ec 94 00 00 00 00 00 00 00 00 00 00	r2 = 0x94ec ll
    1183	05 00 25 00 00 00 00 00	goto +0x25 <LBB800_36>

0000000000002500 <LBB800_25>
    1184	15 03 4b 00 09 00 00 00	if r3 == 0x9 goto +0x4b <LBB800_47>
    1185	15 03 4e 00 0a 00 00 00	if r3 == 0xa goto +0x4e <LBB800_48>
    1186	bf 21 00 00 00 00 00 00	r1 = r2
    1187	18 02 00 00 70 95 00 00 00 00 00 00 00 00 00 00	r2 = 0x9570 ll
    1189	05 00 57 00 00 00 00 00	goto +0x57 <LBB800_52>

0000000000002530 <LBB800_28>
    1190	15 03 4e 00 15 00 00 00	if r3 == 0x15 goto +0x4e <LBB800_50>
    1191	15 03 52 00 16 00 00 00	if r3 == 0x16 goto +0x52 <LBB800_51>
    1192	bf 21 00 00 00 00 00 00	r1 = r2
    1193	18 02 00 00 09 95 00 00 00 00 00 00 00 00 00 00	r2 = 0x9509 ll
    1195	05 00 31 00 00 00 00 00	goto +0x31 <LBB800_42>

0000000000002560 <LBB800_31>
    1196	07 01 00 00 04 00 00 00	r1 += 0x4
    1197	7b 1a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r1
    1198	bf a4 00 00 00 00 00 00	r4 = r10
    1199	07 04 00 00 f8 ff ff ff	r4 += -0x8
    1200	bf 21 00 00 00 00 00 00	r1 = r2
    1201	18 02 00 00 6a 95 00 00 00 00 00 00 00 00 00 00	r2 = 0x956a ll
    1203	b7 03 00 00 06 00 00 00	r3 = 0x6
    1204	18 05 00 00 d0 a3 00 00 00 00 00 00 00 00 00 00	r5 = 0xa3d0 ll

00000000000025b0 <LBB800_32>
    1206	85 10 00 00 9b 06 00 00	call 0x69b ; <core::fmt::Formatter::debug_tuple_field1_finish>
    1207	05 00 47 00 00 00 00 00	goto +0x47 <LBB800_54>

00000000000025c0 <LBB800_33>
    1208	bf 21 00 00 00 00 00 00	r1 = r2
    1209	18 02 00 00 28 96 00 00 00 00 00 00 00 00 00 00	r2 = 0x9628 ll
    1211	b7 03 00 00 0f 00 00 00	r3 = 0xf
    1212	05 00 41 00 00 00 00 00	goto +0x41 <LBB800_53>

00000000000025e8 <LBB800_34>
    1213	bf 21 00 00 00 00 00 00	r1 = r2
    1214	18 02 00 00 55 95 00 00 00 00 00 00 00 00 00 00	r2 = 0x9555 ll
    1216	b7 03 00 00 15 00 00 00	r3 = 0x15
    1217	05 00 3c 00 00 00 00 00	goto +0x3c <LBB800_53>

0000000000002610 <LBB800_35>
    1218	bf 21 00 00 00 00 00 00	r1 = r2
    1219	18 02 00 00 49 95 00 00 00 00 00 00 00 00 00 00	r2 = 0x9549 ll

0000000000002628 <LBB800_36>
    1221	b7 03 00 00 0c 00 00 00	r3 = 0xc
    1222	05 00 37 00 00 00 00 00	goto +0x37 <LBB800_53>

0000000000002638 <LBB800_37>
    1223	bf 21 00 00 00 00 00 00	r1 = r2
    1224	18 02 00 00 dc 95 00 00 00 00 00 00 00 00 00 00	r2 = 0x95dc ll
    1226	05 00 12 00 00 00 00 00	goto +0x12 <LBB800_42>

0000000000002658 <LBB800_38>
    1227	bf 21 00 00 00 00 00 00	r1 = r2
    1228	18 02 00 00 c4 95 00 00 00 00 00 00 00 00 00 00	r2 = 0x95c4 ll
    1230	b7 03 00 00 18 00 00 00	r3 = 0x18
    1231	05 00 2e 00 00 00 00 00	goto +0x2e <LBB800_53>

0000000000002680 <LBB800_39>
    1232	bf 21 00 00 00 00 00 00	r1 = r2
    1233	18 02 00 00 ca 94 00 00 00 00 00 00 00 00 00 00	r2 = 0x94ca ll
    1235	b7 03 00 00 22 00 00 00	r3 = 0x22
    1236	05 00 29 00 00 00 00 00	goto +0x29 <LBB800_53>

00000000000026a8 <LBB800_40>
    1237	bf 21 00 00 00 00 00 00	r1 = r2
    1238	18 02 00 00 3b 95 00 00 00 00 00 00 00 00 00 00	r2 = 0x953b ll
    1240	b7 03 00 00 0e 00 00 00	r3 = 0xe
    1241	05 00 24 00 00 00 00 00	goto +0x24 <LBB800_53>

00000000000026d0 <LBB800_41>
    1242	bf 21 00 00 00 00 00 00	r1 = r2
    1243	18 02 00 00 5e 94 00 00 00 00 00 00 00 00 00 00	r2 = 0x945e ll

00000000000026e8 <LBB800_42>
    1245	b7 03 00 00 12 00 00 00	r3 = 0x12
    1246	05 00 1f 00 00 00 00 00	goto +0x1f <LBB800_53>

00000000000026f8 <LBB800_43>
    1247	bf 21 00 00 00 00 00 00	r1 = r2
    1248	18 02 00 00 ff 95 00 00 00 00 00 00 00 00 00 00	r2 = 0x95ff ll
    1250	05 00 1a 00 00 00 00 00	goto +0x1a <LBB800_52>

0000000000002718 <LBB800_44>
    1251	bf 21 00 00 00 00 00 00	r1 = r2
    1252	18 02 00 00 1b 95 00 00 00 00 00 00 00 00 00 00	r2 = 0x951b ll
    1254	05 00 0c 00 00 00 00 00	goto +0xc <LBB800_49>

0000000000002738 <LBB800_45>
    1255	bf 21 00 00 00 00 00 00	r1 = r2
    1256	18 02 00 00 f8 94 00 00 00 00 00 00 00 00 00 00	r2 = 0x94f8 ll

0000000000002750 <LBB800_46>
    1258	b7 03 00 00 11 00 00 00	r3 = 0x11
    1259	05 00 12 00 00 00 00 00	goto +0x12 <LBB800_53>

0000000000002760 <LBB800_47>
    1260	bf 21 00 00 00 00 00 00	r1 = r2
    1261	18 02 00 00 97 95 00 00 00 00 00 00 00 00 00 00	r2 = 0x9597 ll
    1263	05 00 03 00 00 00 00 00	goto +0x3 <LBB800_49>

0000000000002780 <LBB800_48>
    1264	bf 21 00 00 00 00 00 00	r1 = r2
    1265	18 02 00 00 83 95 00 00 00 00 00 00 00 00 00 00	r2 = 0x9583 ll

0000000000002798 <LBB800_49>
    1267	b7 03 00 00 14 00 00 00	r3 = 0x14
    1268	05 00 09 00 00 00 00 00	goto +0x9 <LBB800_53>

00000000000027a8 <LBB800_50>
    1269	bf 21 00 00 00 00 00 00	r1 = r2
    1270	18 02 00 00 83 94 00 00 00 00 00 00 00 00 00 00	r2 = 0x9483 ll
    1272	b7 03 00 00 26 00 00 00	r3 = 0x26
    1273	05 00 04 00 00 00 00 00	goto +0x4 <LBB800_53>

00000000000027d0 <LBB800_51>
    1274	bf 21 00 00 00 00 00 00	r1 = r2
    1275	18 02 00 00 70 94 00 00 00 00 00 00 00 00 00 00	r2 = 0x9470 ll

00000000000027e8 <LBB800_52>
    1277	b7 03 00 00 13 00 00 00	r3 = 0x13

00000000000027f0 <LBB800_53>
    1278	85 10 00 00 45 06 00 00	call 0x645 ; <<core::fmt::Formatter as core::fmt::Write>::write_str>

00000000000027f8 <LBB800_54>
    1279	95 00 00 00 00 00 00 00	exit

0000000000002800 <std::process::abort>
    1280	85 10 00 00 08 00 00 00	call 0x8 ; <std::sys::sbf::abort_internal>
    1281	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000002810 <rust_begin_unwind>
    1282	85 10 00 00 03 00 00 00	call 0x3 ; <std::sys::sbf::panic>
    1283	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000002820 <std::sys::sbf::sol_log>
    1284	85 10 00 00 ff ff ff ff	call -0x1 ; sol_log_
    1285	95 00 00 00 00 00 00 00	exit

0000000000002830 <std::sys::sbf::panic>
    1286	85 10 00 00 ff ff ff ff	call -0x1 ; <std::sys::sbf::panic>
    1287	85 10 00 00 ff ff ff ff	call -0x1 ; abort
    1288	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000002848 <std::sys::sbf::abort_internal>
    1289	85 10 00 00 ff ff ff ff	call -0x1 ; abort
    1290	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000002858 <std::alloc::rust_oom>
    1291	18 01 00 00 37 96 00 00 00 00 00 00 00 00 00 00	r1 = 0x9637 ll
    1293	b7 02 00 00 2e 00 00 00	r2 = 0x2e
    1294	85 10 00 00 f5 ff ff ff	call -0xb ; <std::sys::sbf::sol_log>
    1295	85 10 00 00 f0 ff ff ff	call -0x10 ; <std::process::abort>
    1296	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000002888 <__rg_oom>
    1297	85 10 00 00 f9 ff ff ff	call -0x7 ; <std::alloc::rust_oom>
    1298	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000002898 <core::ptr::drop_in_place<&u8>>
    1299	95 00 00 00 00 00 00 00	exit

00000000000028a0 <<&mut W as core::fmt::Write>::write_char>
    1300	79 11 00 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x0)
    1301	85 10 00 00 19 01 00 00	call 0x119 ; <alloc::string::String::push>
    1302	b7 00 00 00 00 00 00 00	r0 = 0x0
    1303	95 00 00 00 00 00 00 00	exit

00000000000028c0 <<&mut W as core::fmt::Write>::write_fmt>
    1304	79 11 00 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x0)
    1305	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 0x38) = r1
    1306	bf a6 00 00 00 00 00 00	r6 = r10
    1307	07 06 00 00 d0 ff ff ff	r6 += -0x30
    1308	bf 61 00 00 00 00 00 00	r1 = r6
    1309	b7 03 00 00 30 00 00 00	r3 = 0x30
    1310	85 10 00 00 41 0d 00 00	call 0xd41 ; <memcpy>
    1311	bf a1 00 00 00 00 00 00	r1 = r10
    1312	07 01 00 00 c8 ff ff ff	r1 += -0x38
    1313	18 02 00 00 f0 a3 00 00 00 00 00 00 00 00 00 00	r2 = 0xa3f0 ll
    1315	bf 63 00 00 00 00 00 00	r3 = r6
    1316	85 10 00 00 c2 03 00 00	call 0x3c2 ; <core::fmt::write>
    1317	95 00 00 00 00 00 00 00	exit

0000000000002930 <<&mut W as core::fmt::Write>::write_str>
    1318	bf 36 00 00 00 00 00 00	r6 = r3
    1319	bf 28 00 00 00 00 00 00	r8 = r2
    1320	79 17 00 00 00 00 00 00	r7 = *(u64 *)(r1 + 0x0)
    1321	79 79 10 00 00 00 00 00	r9 = *(u64 *)(r7 + 0x10)
    1322	79 71 00 00 00 00 00 00	r1 = *(u64 *)(r7 + 0x0)
    1323	1f 91 00 00 00 00 00 00	r1 -= r9
    1324	3d 61 05 00 00 00 00 00	if r1 >= r6 goto +0x5 <LBB20_2>
    1325	bf 71 00 00 00 00 00 00	r1 = r7
    1326	bf 92 00 00 00 00 00 00	r2 = r9
    1327	bf 63 00 00 00 00 00 00	r3 = r6
    1328	85 10 00 00 0a 00 00 00	call 0xa ; <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    1329	79 79 10 00 00 00 00 00	r9 = *(u64 *)(r7 + 0x10)

0000000000002990 <LBB20_2>
    1330	79 71 08 00 00 00 00 00	r1 = *(u64 *)(r7 + 0x8)
    1331	0f 91 00 00 00 00 00 00	r1 += r9
    1332	bf 82 00 00 00 00 00 00	r2 = r8
    1333	bf 63 00 00 00 00 00 00	r3 = r6
    1334	85 10 00 00 29 0d 00 00	call 0xd29 ; <memcpy>
    1335	0f 69 00 00 00 00 00 00	r9 += r6
    1336	7b 97 10 00 00 00 00 00	*(u64 *)(r7 + 0x10) = r9
    1337	b7 00 00 00 00 00 00 00	r0 = 0x0
    1338	95 00 00 00 00 00 00 00	exit

00000000000029d8 <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    1339	bf 16 00 00 00 00 00 00	r6 = r1
    1340	bf 24 00 00 00 00 00 00	r4 = r2
    1341	0f 34 00 00 00 00 00 00	r4 += r3
    1342	b7 01 00 00 01 00 00 00	r1 = 0x1
    1343	2d 42 01 00 00 00 00 00	if r2 > r4 goto +0x1 <LBB21_2>
    1344	b7 01 00 00 00 00 00 00	r1 = 0x0

0000000000002a08 <LBB21_2>
    1345	57 01 00 00 01 00 00 00	r1 &= 0x1
    1346	55 01 24 00 00 00 00 00	if r1 != 0x0 goto +0x24 <LBB21_15>
    1347	79 61 00 00 00 00 00 00	r1 = *(u64 *)(r6 + 0x0)
    1348	bf 17 00 00 00 00 00 00	r7 = r1
    1349	67 07 00 00 01 00 00 00	r7 <<= 0x1
    1350	2d 47 01 00 00 00 00 00	if r7 > r4 goto +0x1 <LBB21_5>
    1351	bf 47 00 00 00 00 00 00	r7 = r4

0000000000002a40 <LBB21_5>
    1352	25 07 01 00 08 00 00 00	if r7 > 0x8 goto +0x1 <LBB21_7>
    1353	b7 07 00 00 08 00 00 00	r7 = 0x8

0000000000002a50 <LBB21_7>
    1354	bf 73 00 00 00 00 00 00	r3 = r7
    1355	a7 03 00 00 ff ff ff ff	r3 ^= -0x1
    1356	77 03 00 00 3f 00 00 00	r3 >>= 0x3f
    1357	15 01 06 00 00 00 00 00	if r1 == 0x0 goto +0x6 <LBB21_9>
    1358	79 62 08 00 00 00 00 00	r2 = *(u64 *)(r6 + 0x8)
    1359	b7 04 00 00 01 00 00 00	r4 = 0x1
    1360	7b 4a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r4
    1361	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
    1362	7b 2a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r2
    1363	05 00 02 00 00 00 00 00	goto +0x2 <LBB21_10>

0000000000002aa0 <LBB21_9>
    1364	b7 01 00 00 00 00 00 00	r1 = 0x0
    1365	7b 1a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r1

0000000000002ab0 <LBB21_10>
    1366	bf a1 00 00 00 00 00 00	r1 = r10
    1367	07 01 00 00 d0 ff ff ff	r1 += -0x30
    1368	bf a4 00 00 00 00 00 00	r4 = r10
    1369	07 04 00 00 e8 ff ff ff	r4 += -0x18
    1370	bf 72 00 00 00 00 00 00	r2 = r7
    1371	85 10 00 00 3e 00 00 00	call 0x3e ; <alloc::raw_vec::finish_grow>
    1372	79 a1 d8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x28)
    1373	79 a2 d0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x30)
    1374	55 02 03 00 00 00 00 00	if r2 != 0x0 goto +0x3 <LBB21_13>
    1375	7b 76 00 00 00 00 00 00	*(u64 *)(r6 + 0x0) = r7
    1376	7b 16 08 00 00 00 00 00	*(u64 *)(r6 + 0x8) = r1

0000000000002b08 <LBB21_12>
    1377	95 00 00 00 00 00 00 00	exit

0000000000002b10 <LBB21_13>
    1378	79 a2 e0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x20)
    1379	18 03 00 00 01 00 00 00 00 00 00 00 00 00 00 80	r3 = -0x7fffffffffffffff ll
    1381	1d 32 fb ff 00 00 00 00	if r2 == r3 goto -0x5 <LBB21_12>
    1382	55 02 02 00 00 00 00 00	if r2 != 0x0 goto +0x2 <LBB21_16>

0000000000002b38 <LBB21_15>
    1383	85 10 00 00 5f 00 00 00	call 0x5f ; <alloc::raw_vec::capacity_overflow>
    1384	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000002b48 <LBB21_16>
    1385	85 10 00 00 6e 00 00 00	call 0x6e ; <alloc::alloc::handle_alloc_error>
    1386	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000002b58 <alloc::raw_vec::RawVec<T,A>::reserve_for_push>
    1387	bf 16 00 00 00 00 00 00	r6 = r1
    1388	07 02 00 00 01 00 00 00	r2 += 0x1
    1389	b7 01 00 00 01 00 00 00	r1 = 0x1
    1390	15 02 01 00 00 00 00 00	if r2 == 0x0 goto +0x1 <LBB22_2>
    1391	b7 01 00 00 00 00 00 00	r1 = 0x0

0000000000002b80 <LBB22_2>
    1392	57 01 00 00 01 00 00 00	r1 &= 0x1
    1393	55 01 24 00 00 00 00 00	if r1 != 0x0 goto +0x24 <LBB22_15>
    1394	79 61 00 00 00 00 00 00	r1 = *(u64 *)(r6 + 0x0)
    1395	bf 17 00 00 00 00 00 00	r7 = r1
    1396	67 07 00 00 01 00 00 00	r7 <<= 0x1
    1397	2d 27 01 00 00 00 00 00	if r7 > r2 goto +0x1 <LBB22_5>
    1398	bf 27 00 00 00 00 00 00	r7 = r2

0000000000002bb8 <LBB22_5>
    1399	25 07 01 00 08 00 00 00	if r7 > 0x8 goto +0x1 <LBB22_7>
    1400	b7 07 00 00 08 00 00 00	r7 = 0x8

0000000000002bc8 <LBB22_7>
    1401	bf 73 00 00 00 00 00 00	r3 = r7
    1402	a7 03 00 00 ff ff ff ff	r3 ^= -0x1
    1403	77 03 00 00 3f 00 00 00	r3 >>= 0x3f
    1404	15 01 06 00 00 00 00 00	if r1 == 0x0 goto +0x6 <LBB22_9>
    1405	79 62 08 00 00 00 00 00	r2 = *(u64 *)(r6 + 0x8)
    1406	b7 04 00 00 01 00 00 00	r4 = 0x1
    1407	7b 4a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r4
    1408	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
    1409	7b 2a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r2
    1410	05 00 02 00 00 00 00 00	goto +0x2 <LBB22_10>

0000000000002c18 <LBB22_9>
    1411	b7 01 00 00 00 00 00 00	r1 = 0x0
    1412	7b 1a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r1

0000000000002c28 <LBB22_10>
    1413	bf a1 00 00 00 00 00 00	r1 = r10
    1414	07 01 00 00 d0 ff ff ff	r1 += -0x30
    1415	bf a4 00 00 00 00 00 00	r4 = r10
    1416	07 04 00 00 e8 ff ff ff	r4 += -0x18
    1417	bf 72 00 00 00 00 00 00	r2 = r7
    1418	85 10 00 00 0f 00 00 00	call 0xf ; <alloc::raw_vec::finish_grow>
    1419	79 a1 d8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x28)
    1420	79 a2 d0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x30)
    1421	55 02 03 00 00 00 00 00	if r2 != 0x0 goto +0x3 <LBB22_13>
    1422	7b 76 00 00 00 00 00 00	*(u64 *)(r6 + 0x0) = r7
    1423	7b 16 08 00 00 00 00 00	*(u64 *)(r6 + 0x8) = r1

0000000000002c80 <LBB22_12>
    1424	95 00 00 00 00 00 00 00	exit

0000000000002c88 <LBB22_13>
    1425	79 a2 e0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x20)
    1426	18 03 00 00 01 00 00 00 00 00 00 00 00 00 00 80	r3 = -0x7fffffffffffffff ll
    1428	1d 32 fb ff 00 00 00 00	if r2 == r3 goto -0x5 <LBB22_12>
    1429	55 02 02 00 00 00 00 00	if r2 != 0x0 goto +0x2 <LBB22_16>

0000000000002cb0 <LBB22_15>
    1430	85 10 00 00 30 00 00 00	call 0x30 ; <alloc::raw_vec::capacity_overflow>
    1431	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000002cc0 <LBB22_16>
    1432	85 10 00 00 3f 00 00 00	call 0x3f ; <alloc::alloc::handle_alloc_error>
    1433	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000002cd0 <alloc::raw_vec::finish_grow>
    1434	bf 27 00 00 00 00 00 00	r7 = r2
    1435	bf 16 00 00 00 00 00 00	r6 = r1
    1436	15 03 0d 00 00 00 00 00	if r3 == 0x0 goto +0xd <LBB23_2>
    1437	79 41 10 00 00 00 00 00	r1 = *(u64 *)(r4 + 0x10)
    1438	15 01 1b 00 00 00 00 00	if r1 == 0x0 goto +0x1b <LBB23_8>
    1439	79 42 08 00 00 00 00 00	r2 = *(u64 *)(r4 + 0x8)
    1440	55 02 0e 00 00 00 00 00	if r2 != 0x0 goto +0xe <LBB23_7>
    1441	b7 01 00 00 00 00 00 00	r1 = 0x0
    1442	b7 00 00 00 01 00 00 00	r0 = 0x1
    1443	15 07 1e 00 00 00 00 00	if r7 == 0x0 goto +0x1e <LBB23_10>
    1444	bf 71 00 00 00 00 00 00	r1 = r7
    1445	b7 02 00 00 01 00 00 00	r2 = 0x1
    1446	85 10 00 00 e2 fb ff ff	call -0x41e ; <__rust_alloc>
    1447	bf 71 00 00 00 00 00 00	r1 = r7
    1448	15 00 0d 00 00 00 00 00	if r0 == 0x0 goto +0xd <LBB23_11>
    1449	05 00 18 00 00 00 00 00	goto +0x18 <LBB23_10>

0000000000002d50 <LBB23_2>
    1450	b7 01 00 00 00 00 00 00	r1 = 0x0
    1451	7b 16 10 00 00 00 00 00	*(u64 *)(r6 + 0x10) = r1
    1452	7b 76 08 00 00 00 00 00	*(u64 *)(r6 + 0x8) = r7
    1453	b7 01 00 00 01 00 00 00	r1 = 0x1
    1454	05 00 16 00 00 00 00 00	goto +0x16 <LBB23_3>

0000000000002d78 <LBB23_7>
    1455	79 41 00 00 00 00 00 00	r1 = *(u64 *)(r4 + 0x0)
    1456	b7 03 00 00 01 00 00 00	r3 = 0x1
    1457	bf 74 00 00 00 00 00 00	r4 = r7
    1458	85 10 00 00 da fb ff ff	call -0x426 ; <__rust_realloc>
    1459	bf 71 00 00 00 00 00 00	r1 = r7
    1460	15 00 01 00 00 00 00 00	if r0 == 0x0 goto +0x1 <LBB23_11>
    1461	05 00 0c 00 00 00 00 00	goto +0xc <LBB23_10>

0000000000002db0 <LBB23_11>
    1462	7b 76 08 00 00 00 00 00	*(u64 *)(r6 + 0x8) = r7
    1463	b7 01 00 00 01 00 00 00	r1 = 0x1
    1464	7b 16 10 00 00 00 00 00	*(u64 *)(r6 + 0x10) = r1
    1465	05 00 0b 00 00 00 00 00	goto +0xb <LBB23_3>

0000000000002dd0 <LBB23_8>
    1466	b7 01 00 00 00 00 00 00	r1 = 0x0
    1467	b7 00 00 00 01 00 00 00	r0 = 0x1
    1468	15 07 05 00 00 00 00 00	if r7 == 0x0 goto +0x5 <LBB23_10>
    1469	bf 71 00 00 00 00 00 00	r1 = r7
    1470	b7 02 00 00 01 00 00 00	r2 = 0x1
    1471	85 10 00 00 c9 fb ff ff	call -0x437 ; <__rust_alloc>
    1472	bf 71 00 00 00 00 00 00	r1 = r7
    1473	15 00 f4 ff 00 00 00 00	if r0 == 0x0 goto -0xc <LBB23_11>

0000000000002e10 <LBB23_10>
    1474	7b 16 10 00 00 00 00 00	*(u64 *)(r6 + 0x10) = r1
    1475	7b 06 08 00 00 00 00 00	*(u64 *)(r6 + 0x8) = r0
    1476	b7 01 00 00 00 00 00 00	r1 = 0x0

0000000000002e28 <LBB23_3>
    1477	7b 16 00 00 00 00 00 00	*(u64 *)(r6 + 0x0) = r1
    1478	95 00 00 00 00 00 00 00	exit

0000000000002e38 <alloc::raw_vec::capacity_overflow>
    1479	b7 01 00 00 01 00 00 00	r1 = 0x1
    1480	7b 1a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r1
    1481	18 01 00 00 20 a4 00 00 00 00 00 00 00 00 00 00	r1 = 0xa420 ll
    1483	7b 1a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r1
    1484	18 01 00 00 68 96 00 00 00 00 00 00 00 00 00 00	r1 = 0x9668 ll
    1486	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
    1487	b7 01 00 00 00 00 00 00	r1 = 0x0
    1488	7b 1a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r1
    1489	7b 1a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r1
    1490	bf a1 00 00 00 00 00 00	r1 = r10
    1491	07 01 00 00 d0 ff ff ff	r1 += -0x30
    1492	18 02 00 00 30 a4 00 00 00 00 00 00 00 00 00 00	r2 = 0xa430 ll
    1494	85 10 00 00 3e 01 00 00	call 0x13e ; <core::panicking::panic_fmt>
    1495	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000002ec0 <alloc::alloc::handle_alloc_error>
    1496	85 10 00 00 01 00 00 00	call 0x1 ; <alloc::alloc::handle_alloc_error::rt_error>
    1497	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000002ed0 <alloc::alloc::handle_alloc_error::rt_error>
    1498	85 10 00 00 b4 fb ff ff	call -0x44c ; <__rust_alloc_error_handler>
    1499	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000002ee0 <alloc::fmt::format::format_inner>
    1500	bf 26 00 00 00 00 00 00	r6 = r2
    1501	bf 17 00 00 00 00 00 00	r7 = r1
    1502	79 61 18 00 00 00 00 00	r1 = *(u64 *)(r6 + 0x18)
    1503	15 01 22 00 00 00 00 00	if r1 == 0x0 goto +0x22 <LBB73_4>
    1504	79 62 10 00 00 00 00 00	r2 = *(u64 *)(r6 + 0x10)
    1505	b7 04 00 00 00 00 00 00	r4 = 0x0
    1506	67 01 00 00 04 00 00 00	r1 <<= 0x4
    1507	bf 23 00 00 00 00 00 00	r3 = r2
    1508	07 03 00 00 08 00 00 00	r3 += 0x8

0000000000002f28 <LBB73_2>
    1509	79 38 00 00 00 00 00 00	r8 = *(u64 *)(r3 + 0x0)
    1510	0f 48 00 00 00 00 00 00	r8 += r4
    1511	07 03 00 00 10 00 00 00	r3 += 0x10
    1512	07 01 00 00 f0 ff ff ff	r1 += -0x10
    1513	bf 84 00 00 00 00 00 00	r4 = r8
    1514	55 01 fa ff 00 00 00 00	if r1 != 0x0 goto -0x6 <LBB73_2>
    1515	79 61 28 00 00 00 00 00	r1 = *(u64 *)(r6 + 0x28)
    1516	15 01 0f 00 00 00 00 00	if r1 == 0x0 goto +0xf <LBB73_11>
    1517	25 08 04 00 0f 00 00 00	if r8 > 0xf goto +0x4 <LBB73_7>
    1518	b7 00 00 00 01 00 00 00	r0 = 0x1
    1519	b7 01 00 00 00 00 00 00	r1 = 0x0
    1520	79 22 08 00 00 00 00 00	r2 = *(u64 *)(r2 + 0x8)
    1521	15 02 16 00 00 00 00 00	if r2 == 0x0 goto +0x16 <LBB73_16>

0000000000002f90 <LBB73_7>
    1522	bf 82 00 00 00 00 00 00	r2 = r8
    1523	0f 22 00 00 00 00 00 00	r2 += r2
    1524	b7 01 00 00 00 00 00 00	r1 = 0x0
    1525	b7 00 00 00 01 00 00 00	r0 = 0x1
    1526	b7 03 00 00 01 00 00 00	r3 = 0x1
    1527	2d 28 01 00 00 00 00 00	if r8 > r2 goto +0x1 <LBB73_9>
    1528	b7 03 00 00 00 00 00 00	r3 = 0x0

0000000000002fc8 <LBB73_9>
    1529	57 03 00 00 01 00 00 00	r3 &= 0x1
    1530	55 03 0d 00 00 00 00 00	if r3 != 0x0 goto +0xd <LBB73_16>
    1531	bf 28 00 00 00 00 00 00	r8 = r2

0000000000002fe0 <LBB73_11>
    1532	b7 00 00 00 01 00 00 00	r0 = 0x1
    1533	b7 01 00 00 00 00 00 00	r1 = 0x0
    1534	15 08 09 00 00 00 00 00	if r8 == 0x0 goto +0x9 <LBB73_16>
    1535	65 08 1b 00 ff ff ff ff	if r8 s> -0x1 goto +0x1b <LBB73_14>
    1536	85 10 00 00 c6 ff ff ff	call -0x3a ; <alloc::raw_vec::capacity_overflow>
    1537	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000003010 <LBB73_4>
    1538	b7 00 00 00 01 00 00 00	r0 = 0x1
    1539	b7 08 00 00 00 00 00 00	r8 = 0x0
    1540	79 62 28 00 00 00 00 00	r2 = *(u64 *)(r6 + 0x28)
    1541	b7 01 00 00 00 00 00 00	r1 = 0x0
    1542	15 02 01 00 00 00 00 00	if r2 == 0x0 goto +0x1 <LBB73_16>
    1543	05 00 ea ff 00 00 00 00	goto -0x16 <LBB73_7>

0000000000003040 <LBB73_16>
    1544	b7 02 00 00 00 00 00 00	r2 = 0x0
    1545	7b 27 10 00 00 00 00 00	*(u64 *)(r7 + 0x10) = r2
    1546	7b 07 08 00 00 00 00 00	*(u64 *)(r7 + 0x8) = r0
    1547	7b 17 00 00 00 00 00 00	*(u64 *)(r7 + 0x0) = r1
    1548	7b 7a c0 ff 00 00 00 00	*(u64 *)(r10 - 0x40) = r7
    1549	bf a7 00 00 00 00 00 00	r7 = r10
    1550	07 07 00 00 c8 ff ff ff	r7 += -0x38
    1551	bf 71 00 00 00 00 00 00	r1 = r7
    1552	bf 62 00 00 00 00 00 00	r2 = r6
    1553	b7 03 00 00 30 00 00 00	r3 = 0x30
    1554	85 10 00 00 4d 0c 00 00	call 0xc4d ; <memcpy>
    1555	bf a1 00 00 00 00 00 00	r1 = r10
    1556	07 01 00 00 c0 ff ff ff	r1 += -0x40
    1557	18 02 00 00 f0 a3 00 00 00 00 00 00 00 00 00 00	r2 = 0xa3f0 ll
    1559	bf 73 00 00 00 00 00 00	r3 = r7
    1560	85 10 00 00 ce 02 00 00	call 0x2ce ; <core::fmt::write>
    1561	55 00 0a 00 00 00 00 00	if r0 != 0x0 goto +0xa <LBB73_18>
    1562	95 00 00 00 00 00 00 00	exit

00000000000030d8 <LBB73_14>
    1563	bf 81 00 00 00 00 00 00	r1 = r8
    1564	b7 02 00 00 01 00 00 00	r2 = 0x1
    1565	85 10 00 00 6b fb ff ff	call -0x495 ; <__rust_alloc>
    1566	bf 81 00 00 00 00 00 00	r1 = r8
    1567	55 00 e8 ff 00 00 00 00	if r0 != 0x0 goto -0x18 <LBB73_16>
    1568	bf 81 00 00 00 00 00 00	r1 = r8
    1569	b7 02 00 00 01 00 00 00	r2 = 0x1
    1570	85 10 00 00 b5 ff ff ff	call -0x4b ; <alloc::alloc::handle_alloc_error>
    1571	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000003120 <LBB73_18>
    1572	bf a3 00 00 00 00 00 00	r3 = r10
    1573	07 03 00 00 f8 ff ff ff	r3 += -0x8
    1574	18 01 00 00 95 96 00 00 00 00 00 00 00 00 00 00	r1 = 0x9695 ll
    1576	b7 02 00 00 33 00 00 00	r2 = 0x33
    1577	18 04 00 00 48 a4 00 00 00 00 00 00 00 00 00 00	r4 = 0xa448 ll
    1579	18 05 00 00 68 a4 00 00 00 00 00 00 00 00 00 00	r5 = 0xa468 ll
    1581	85 10 00 00 23 01 00 00	call 0x123 ; <core::result::unwrap_failed>
    1582	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000003178 <alloc::string::String::push>
    1583	bf 27 00 00 00 00 00 00	r7 = r2
    1584	bf 16 00 00 00 00 00 00	r6 = r1
    1585	bf 71 00 00 00 00 00 00	r1 = r7
    1586	67 01 00 00 20 00 00 00	r1 <<= 0x20
    1587	77 01 00 00 20 00 00 00	r1 >>= 0x20
    1588	b7 02 00 00 80 00 00 00	r2 = 0x80
    1589	2d 12 0e 00 00 00 00 00	if r2 > r1 goto +0xe <LBB84_2>
    1590	b7 02 00 00 00 00 00 00	r2 = 0x0
    1591	63 2a fc ff 00 00 00 00	*(u32 *)(r10 - 0x4) = r2
    1592	b7 02 00 00 00 08 00 00	r2 = 0x800
    1593	2d 12 01 00 00 00 00 00	if r2 > r1 goto +0x1 <LBB84_8>
    1594	05 00 15 00 00 00 00 00	goto +0x15 <LBB84_5>

00000000000031d8 <LBB84_8>
    1595	bf 71 00 00 00 00 00 00	r1 = r7
    1596	57 01 00 00 3f 00 00 00	r1 &= 0x3f
    1597	47 01 00 00 80 00 00 00	r1 |= 0x80
    1598	73 1a fd ff 00 00 00 00	*(u8 *)(r10 - 0x3) = r1
    1599	77 07 00 00 06 00 00 00	r7 >>= 0x6
    1600	47 07 00 00 c0 00 00 00	r7 |= 0xc0
    1601	73 7a fc ff 00 00 00 00	*(u8 *)(r10 - 0x4) = r7
    1602	b7 07 00 00 02 00 00 00	r7 = 0x2
    1603	05 00 30 00 00 00 00 00	goto +0x30 <LBB84_9>

0000000000003220 <LBB84_2>
    1604	79 62 10 00 00 00 00 00	r2 = *(u64 *)(r6 + 0x10)
    1605	79 61 00 00 00 00 00 00	r1 = *(u64 *)(r6 + 0x0)
    1606	5d 12 03 00 00 00 00 00	if r2 != r1 goto +0x3 <LBB84_4>
    1607	bf 61 00 00 00 00 00 00	r1 = r6
    1608	85 10 00 00 22 ff ff ff	call -0xde ; <alloc::raw_vec::RawVec<T,A>::reserve_for_push>
    1609	79 62 10 00 00 00 00 00	r2 = *(u64 *)(r6 + 0x10)

0000000000003250 <LBB84_4>
    1610	79 61 08 00 00 00 00 00	r1 = *(u64 *)(r6 + 0x8)
    1611	0f 21 00 00 00 00 00 00	r1 += r2
    1612	73 71 00 00 00 00 00 00	*(u8 *)(r1 + 0x0) = r7
    1613	07 02 00 00 01 00 00 00	r2 += 0x1
    1614	7b 26 10 00 00 00 00 00	*(u64 *)(r6 + 0x10) = r2
    1615	05 00 35 00 00 00 00 00	goto +0x35 <LBB84_12>

0000000000003280 <LBB84_5>
    1616	bf 71 00 00 00 00 00 00	r1 = r7
    1617	67 01 00 00 20 00 00 00	r1 <<= 0x20
    1618	77 01 00 00 20 00 00 00	r1 >>= 0x20
    1619	b7 02 00 00 00 00 01 00	r2 = 0x10000
    1620	2d 12 13 00 00 00 00 00	if r2 > r1 goto +0x13 <LBB84_7>
    1621	57 07 00 00 3f 00 00 00	r7 &= 0x3f
    1622	47 07 00 00 80 00 00 00	r7 |= 0x80
    1623	73 7a ff ff 00 00 00 00	*(u8 *)(r10 - 0x1) = r7
    1624	bf 12 00 00 00 00 00 00	r2 = r1
    1625	77 02 00 00 06 00 00 00	r2 >>= 0x6
    1626	57 02 00 00 3f 00 00 00	r2 &= 0x3f
    1627	47 02 00 00 80 00 00 00	r2 |= 0x80
    1628	73 2a fe ff 00 00 00 00	*(u8 *)(r10 - 0x2) = r2
    1629	bf 12 00 00 00 00 00 00	r2 = r1
    1630	77 02 00 00 0c 00 00 00	r2 >>= 0xc
    1631	57 02 00 00 3f 00 00 00	r2 &= 0x3f
    1632	47 02 00 00 80 00 00 00	r2 |= 0x80
    1633	73 2a fd ff 00 00 00 00	*(u8 *)(r10 - 0x3) = r2
    1634	77 01 00 00 12 00 00 00	r1 >>= 0x12
    1635	57 01 00 00 07 00 00 00	r1 &= 0x7
    1636	47 01 00 00 f0 00 00 00	r1 |= 0xf0
    1637	73 1a fc ff 00 00 00 00	*(u8 *)(r10 - 0x4) = r1
    1638	b7 07 00 00 04 00 00 00	r7 = 0x4
    1639	05 00 0c 00 00 00 00 00	goto +0xc <LBB84_9>

0000000000003340 <LBB84_7>
    1640	57 07 00 00 3f 00 00 00	r7 &= 0x3f
    1641	47 07 00 00 80 00 00 00	r7 |= 0x80
    1642	73 7a fe ff 00 00 00 00	*(u8 *)(r10 - 0x2) = r7
    1643	bf 12 00 00 00 00 00 00	r2 = r1
    1644	77 02 00 00 0c 00 00 00	r2 >>= 0xc
    1645	47 02 00 00 e0 00 00 00	r2 |= 0xe0
    1646	73 2a fc ff 00 00 00 00	*(u8 *)(r10 - 0x4) = r2
    1647	77 01 00 00 06 00 00 00	r1 >>= 0x6
    1648	57 01 00 00 3f 00 00 00	r1 &= 0x3f
    1649	47 01 00 00 80 00 00 00	r1 |= 0x80
    1650	73 1a fd ff 00 00 00 00	*(u8 *)(r10 - 0x3) = r1
    1651	b7 07 00 00 03 00 00 00	r7 = 0x3

00000000000033a0 <LBB84_9>
    1652	79 68 10 00 00 00 00 00	r8 = *(u64 *)(r6 + 0x10)
    1653	79 61 00 00 00 00 00 00	r1 = *(u64 *)(r6 + 0x0)
    1654	1f 81 00 00 00 00 00 00	r1 -= r8
    1655	3d 71 05 00 00 00 00 00	if r1 >= r7 goto +0x5 <LBB84_11>
    1656	bf 61 00 00 00 00 00 00	r1 = r6
    1657	bf 82 00 00 00 00 00 00	r2 = r8
    1658	bf 73 00 00 00 00 00 00	r3 = r7
    1659	85 10 00 00 bf fe ff ff	call -0x141 ; <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    1660	79 68 10 00 00 00 00 00	r8 = *(u64 *)(r6 + 0x10)

00000000000033e8 <LBB84_11>
    1661	79 61 08 00 00 00 00 00	r1 = *(u64 *)(r6 + 0x8)
    1662	0f 81 00 00 00 00 00 00	r1 += r8
    1663	bf a2 00 00 00 00 00 00	r2 = r10
    1664	07 02 00 00 fc ff ff ff	r2 += -0x4
    1665	bf 73 00 00 00 00 00 00	r3 = r7
    1666	85 10 00 00 dd 0b 00 00	call 0xbdd ; <memcpy>
    1667	0f 78 00 00 00 00 00 00	r8 += r7
    1668	7b 86 10 00 00 00 00 00	*(u64 *)(r6 + 0x10) = r8

0000000000003428 <LBB84_12>
    1669	95 00 00 00 00 00 00 00	exit

0000000000003430 <core::ops::function::FnOnce::call_once>
    1670	79 11 00 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x0)
    1671	85 10 00 00 ff ff ff ff	call -0x1 ; abort
    1672	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000003448 <core::ptr::drop_in_place<&core::iter::adapters::copied::Copied<core::slice::iter::Iter<u8>>>>
    1673	95 00 00 00 00 00 00 00	exit

0000000000003450 <<core::ops::range::Range<Idx> as core::fmt::Debug>::fmt>
    1674	bf 26 00 00 00 00 00 00	r6 = r2
    1675	bf 17 00 00 00 00 00 00	r7 = r1
    1676	85 10 00 00 90 0a 00 00	call 0xa90 ; <core::fmt::num::<impl core::fmt::Debug for usize>::fmt>
    1677	b7 08 00 00 01 00 00 00	r8 = 0x1
    1678	55 00 11 00 00 00 00 00	if r0 != 0x0 goto +0x11 <LBB96_2>
    1679	79 62 08 00 00 00 00 00	r2 = *(u64 *)(r6 + 0x8)
    1680	79 61 00 00 00 00 00 00	r1 = *(u64 *)(r6 + 0x0)
    1681	18 03 00 00 e0 96 00 00 00 00 00 00 00 00 00 00	r3 = 0x96e0 ll
    1683	7b 3a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r3
    1684	18 03 00 00 80 a4 00 00 00 00 00 00 00 00 00 00	r3 = 0xa480 ll
    1686	7b 3a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r3
    1687	b7 03 00 00 00 00 00 00	r3 = 0x0
    1688	7b 3a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r3
    1689	7b 3a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r3
    1690	b7 08 00 00 01 00 00 00	r8 = 0x1
    1691	7b 8a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r8
    1692	bf a3 00 00 00 00 00 00	r3 = r10
    1693	07 03 00 00 d0 ff ff ff	r3 += -0x30
    1694	85 10 00 00 48 02 00 00	call 0x248 ; <core::fmt::write>
    1695	15 00 02 00 00 00 00 00	if r0 == 0x0 goto +0x2 <LBB96_3>

0000000000003500 <LBB96_2>
    1696	bf 80 00 00 00 00 00 00	r0 = r8
    1697	95 00 00 00 00 00 00 00	exit

0000000000003510 <LBB96_3>
    1698	07 07 00 00 08 00 00 00	r7 += 0x8
    1699	bf 71 00 00 00 00 00 00	r1 = r7
    1700	bf 62 00 00 00 00 00 00	r2 = r6
    1701	85 10 00 00 77 0a 00 00	call 0xa77 ; <core::fmt::num::<impl core::fmt::Debug for usize>::fmt>
    1702	bf 08 00 00 00 00 00 00	r8 = r0
    1703	05 00 f8 ff 00 00 00 00	goto -0x8 <LBB96_2>

0000000000003540 <<T as core::any::Any>::type_id>
    1704	18 00 00 00 3d f4 ff a3 00 00 00 00 be 78 c9 36	r0 = 0x36c978bea3fff43d ll
    1706	95 00 00 00 00 00 00 00	exit

0000000000003558 <<core::panic::panic_info::PanicInfo as core::fmt::Display>::fmt>
    1707	bf 18 00 00 00 00 00 00	r8 = r1
    1708	79 26 00 00 00 00 00 00	r6 = *(u64 *)(r2 + 0x0)
    1709	79 27 08 00 00 00 00 00	r7 = *(u64 *)(r2 + 0x8)
    1710	79 74 18 00 00 00 00 00	r4 = *(u64 *)(r7 + 0x18)
    1711	bf 61 00 00 00 00 00 00	r1 = r6
    1712	18 02 00 00 89 97 00 00 00 00 00 00 00 00 00 00	r2 = 0x9789 ll
    1714	b7 03 00 00 0c 00 00 00	r3 = 0xc
    1715	8d 00 00 00 04 00 00 00	callx r4
    1716	b7 09 00 00 01 00 00 00	r9 = 0x1
    1717	55 00 5d 00 00 00 00 00	if r0 != 0x0 goto +0x5d <LBB168_6>
    1718	79 81 10 00 00 00 00 00	r1 = *(u64 *)(r8 + 0x10)
    1719	15 01 1a 00 00 00 00 00	if r1 == 0x0 goto +0x1a <LBB168_3>
    1720	7b 1a 98 ff 00 00 00 00	*(u64 *)(r10 - 0x68) = r1
    1721	18 01 00 00 30 8f 00 00 00 00 00 00 00 00 00 00	r1 = 0x8f30 ll
    1723	7b 1a a8 ff 00 00 00 00	*(u64 *)(r10 - 0x58) = r1
    1724	bf a1 00 00 00 00 00 00	r1 = r10
    1725	07 01 00 00 98 ff ff ff	r1 += -0x68
    1726	7b 1a a0 ff 00 00 00 00	*(u64 *)(r10 - 0x60) = r1
    1727	bf a1 00 00 00 00 00 00	r1 = r10
    1728	07 01 00 00 a0 ff ff ff	r1 += -0x60
    1729	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
    1730	b7 01 00 00 02 00 00 00	r1 = 0x2
    1731	7b 1a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r1
    1732	18 01 00 00 e0 a4 00 00 00 00 00 00 00 00 00 00	r1 = 0xa4e0 ll
    1734	7b 1a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r1
    1735	b7 01 00 00 00 00 00 00	r1 = 0x0
    1736	7b 1a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r1
    1737	b7 09 00 00 01 00 00 00	r9 = 0x1
    1738	7b 9a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r9
    1739	bf a3 00 00 00 00 00 00	r3 = r10
    1740	07 03 00 00 d0 ff ff ff	r3 += -0x30
    1741	bf 61 00 00 00 00 00 00	r1 = r6
    1742	bf 72 00 00 00 00 00 00	r2 = r7
    1743	85 10 00 00 17 02 00 00	call 0x217 ; <core::fmt::write>
    1744	55 00 42 00 00 00 00 00	if r0 != 0x0 goto +0x42 <LBB168_6>
    1745	05 00 21 00 00 00 00 00	goto +0x21 <LBB168_5>

0000000000003690 <LBB168_3>
    1746	79 89 00 00 00 00 00 00	r9 = *(u64 *)(r8 + 0x0)
    1747	79 81 08 00 00 00 00 00	r1 = *(u64 *)(r8 + 0x8)
    1748	79 12 18 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x18)
    1749	bf 91 00 00 00 00 00 00	r1 = r9
    1750	8d 00 00 00 02 00 00 00	callx r2
    1751	18 01 00 00 c8 1a f8 a9 00 00 00 00 34 6c a7 89	r1 = -0x765893cb5607e538 ll
    1753	5d 10 19 00 00 00 00 00	if r0 != r1 goto +0x19 <LBB168_5>
    1754	7b 9a 98 ff 00 00 00 00	*(u64 *)(r10 - 0x68) = r9
    1755	18 01 00 00 98 8f 00 00 00 00 00 00 00 00 00 00	r1 = 0x8f98 ll
    1757	7b 1a a8 ff 00 00 00 00	*(u64 *)(r10 - 0x58) = r1
    1758	bf a1 00 00 00 00 00 00	r1 = r10
    1759	07 01 00 00 98 ff ff ff	r1 += -0x68
    1760	7b 1a a0 ff 00 00 00 00	*(u64 *)(r10 - 0x60) = r1
    1761	bf a1 00 00 00 00 00 00	r1 = r10
    1762	07 01 00 00 a0 ff ff ff	r1 += -0x60
    1763	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
    1764	b7 01 00 00 02 00 00 00	r1 = 0x2
    1765	7b 1a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r1
    1766	18 01 00 00 e0 a4 00 00 00 00 00 00 00 00 00 00	r1 = 0xa4e0 ll
    1768	7b 1a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r1
    1769	b7 01 00 00 00 00 00 00	r1 = 0x0
    1770	7b 1a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r1
    1771	b7 09 00 00 01 00 00 00	r9 = 0x1
    1772	7b 9a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r9
    1773	bf a3 00 00 00 00 00 00	r3 = r10
    1774	07 03 00 00 d0 ff ff ff	r3 += -0x30
    1775	bf 61 00 00 00 00 00 00	r1 = r6
    1776	bf 72 00 00 00 00 00 00	r2 = r7
    1777	85 10 00 00 f5 01 00 00	call 0x1f5 ; <core::fmt::write>
    1778	55 00 20 00 00 00 00 00	if r0 != 0x0 goto +0x20 <LBB168_6>

0000000000003798 <LBB168_5>
    1779	79 81 18 00 00 00 00 00	r1 = *(u64 *)(r8 + 0x18)
    1780	bf 12 00 00 00 00 00 00	r2 = r1
    1781	07 02 00 00 14 00 00 00	r2 += 0x14
    1782	7b 2a c0 ff 00 00 00 00	*(u64 *)(r10 - 0x40) = r2
    1783	18 02 00 00 40 8e 00 00 00 00 00 00 00 00 00 00	r2 = 0x8e40 ll
    1785	7b 2a c8 ff 00 00 00 00	*(u64 *)(r10 - 0x38) = r2
    1786	7b 2a b8 ff 00 00 00 00	*(u64 *)(r10 - 0x48) = r2
    1787	bf 12 00 00 00 00 00 00	r2 = r1
    1788	07 02 00 00 10 00 00 00	r2 += 0x10
    1789	7b 2a b0 ff 00 00 00 00	*(u64 *)(r10 - 0x50) = r2
    1790	18 02 00 00 00 8f 00 00 00 00 00 00 00 00 00 00	r2 = 0x8f00 ll
    1792	7b 2a a8 ff 00 00 00 00	*(u64 *)(r10 - 0x58) = r2
    1793	7b 1a a0 ff 00 00 00 00	*(u64 *)(r10 - 0x60) = r1
    1794	bf a1 00 00 00 00 00 00	r1 = r10
    1795	07 01 00 00 a0 ff ff ff	r1 += -0x60
    1796	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
    1797	b7 01 00 00 03 00 00 00	r1 = 0x3
    1798	7b 1a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r1
    1799	7b 1a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r1
    1800	18 01 00 00 b0 a4 00 00 00 00 00 00 00 00 00 00	r1 = 0xa4b0 ll
    1802	7b 1a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r1
    1803	b7 01 00 00 00 00 00 00	r1 = 0x0
    1804	7b 1a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r1
    1805	bf a3 00 00 00 00 00 00	r3 = r10
    1806	07 03 00 00 d0 ff ff ff	r3 += -0x30
    1807	bf 61 00 00 00 00 00 00	r1 = r6
    1808	bf 72 00 00 00 00 00 00	r2 = r7
    1809	85 10 00 00 d5 01 00 00	call 0x1d5 ; <core::fmt::write>
    1810	bf 09 00 00 00 00 00 00	r9 = r0

0000000000003898 <LBB168_6>
    1811	bf 90 00 00 00 00 00 00	r0 = r9
    1812	95 00 00 00 00 00 00 00	exit

00000000000038a8 <core::panicking::panic_fmt>
    1813	b7 03 00 00 01 00 00 00	r3 = 0x1
    1814	73 3a f8 ff 00 00 00 00	*(u8 *)(r10 - 0x8) = r3
    1815	7b 2a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r2
    1816	7b 1a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r1
    1817	18 01 00 00 00 a5 00 00 00 00 00 00 00 00 00 00	r1 = 0xa500 ll
    1819	7b 1a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r1
    1820	18 01 00 00 e0 96 00 00 00 00 00 00 00 00 00 00	r1 = 0x96e0 ll
    1822	7b 1a d8 ff 00 00 00 00	*(u64 *)(r10 - 0x28) = r1
    1823	bf a1 00 00 00 00 00 00	r1 = r10
    1824	07 01 00 00 d8 ff ff ff	r1 += -0x28
    1825	85 10 00 00 e0 fd ff ff	call -0x220 ; <rust_begin_unwind>
    1826	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000003918 <core::panicking::panic>
    1827	b7 04 00 00 01 00 00 00	r4 = 0x1
    1828	7b 4a d8 ff 00 00 00 00	*(u64 *)(r10 - 0x28) = r4
    1829	bf a4 00 00 00 00 00 00	r4 = r10
    1830	07 04 00 00 f0 ff ff ff	r4 += -0x10
    1831	7b 4a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r4
    1832	18 04 00 00 e0 96 00 00 00 00 00 00 00 00 00 00	r4 = 0x96e0 ll
    1834	7b 4a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r4
    1835	b7 04 00 00 00 00 00 00	r4 = 0x0
    1836	7b 4a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r4
    1837	7b 4a c0 ff 00 00 00 00	*(u64 *)(r10 - 0x40) = r4
    1838	7b 2a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r2
    1839	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
    1840	bf a1 00 00 00 00 00 00	r1 = r10
    1841	07 01 00 00 c0 ff ff ff	r1 += -0x40
    1842	bf 32 00 00 00 00 00 00	r2 = r3
    1843	85 10 00 00 e1 ff ff ff	call -0x1f ; <core::panicking::panic_fmt>
    1844	85 10 00 00 ff ff ff ff	call -0x1 ; abort

00000000000039a8 <core::panicking::panic_bounds_check>
    1845	7b 2a a8 ff 00 00 00 00	*(u64 *)(r10 - 0x58) = r2
    1846	7b 1a a0 ff 00 00 00 00	*(u64 *)(r10 - 0x60) = r1
    1847	18 01 00 00 90 a4 00 00 00 00 00 00 00 00 00 00	r1 = 0xa490 ll
    1849	7b 1a c0 ff 00 00 00 00	*(u64 *)(r10 - 0x40) = r1
    1850	b7 01 00 00 02 00 00 00	r1 = 0x2
    1851	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 0x38) = r1
    1852	7b 1a d8 ff 00 00 00 00	*(u64 *)(r10 - 0x28) = r1
    1853	bf a1 00 00 00 00 00 00	r1 = r10
    1854	07 01 00 00 e0 ff ff ff	r1 += -0x20
    1855	7b 1a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r1
    1856	b7 01 00 00 00 00 00 00	r1 = 0x0
    1857	7b 1a b0 ff 00 00 00 00	*(u64 *)(r10 - 0x50) = r1
    1858	bf a1 00 00 00 00 00 00	r1 = r10
    1859	07 01 00 00 a0 ff ff ff	r1 += -0x60
    1860	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
    1861	18 01 00 00 68 8e 00 00 00 00 00 00 00 00 00 00	r1 = 0x8e68 ll
    1863	7b 1a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r1
    1864	7b 1a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r1
    1865	bf a1 00 00 00 00 00 00	r1 = r10
    1866	07 01 00 00 a8 ff ff ff	r1 += -0x58
    1867	7b 1a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r1
    1868	bf a1 00 00 00 00 00 00	r1 = r10
    1869	07 01 00 00 b0 ff ff ff	r1 += -0x50
    1870	bf 32 00 00 00 00 00 00	r2 = r3
    1871	85 10 00 00 c5 ff ff ff	call -0x3b ; <core::panicking::panic_fmt>
    1872	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000003a88 <core::result::unwrap_failed>
    1873	7b 2a 98 ff 00 00 00 00	*(u64 *)(r10 - 0x68) = r2
    1874	7b 1a 90 ff 00 00 00 00	*(u64 *)(r10 - 0x70) = r1
    1875	7b 4a a8 ff 00 00 00 00	*(u64 *)(r10 - 0x58) = r4
    1876	7b 3a a0 ff 00 00 00 00	*(u64 *)(r10 - 0x60) = r3
    1877	18 01 00 00 20 a5 00 00 00 00 00 00 00 00 00 00	r1 = 0xa520 ll
    1879	7b 1a c0 ff 00 00 00 00	*(u64 *)(r10 - 0x40) = r1
    1880	b7 01 00 00 02 00 00 00	r1 = 0x2
    1881	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 0x38) = r1
    1882	7b 1a d8 ff 00 00 00 00	*(u64 *)(r10 - 0x28) = r1
    1883	bf a1 00 00 00 00 00 00	r1 = r10
    1884	07 01 00 00 e0 ff ff ff	r1 += -0x20
    1885	7b 1a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r1
    1886	b7 01 00 00 00 00 00 00	r1 = 0x0
    1887	7b 1a b0 ff 00 00 00 00	*(u64 *)(r10 - 0x50) = r1
    1888	18 01 00 00 d0 8e 00 00 00 00 00 00 00 00 00 00	r1 = 0x8ed0 ll
    1890	7b 1a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r1
    1891	bf a1 00 00 00 00 00 00	r1 = r10
    1892	07 01 00 00 a0 ff ff ff	r1 += -0x60
    1893	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
    1894	18 01 00 00 00 8f 00 00 00 00 00 00 00 00 00 00	r1 = 0x8f00 ll
    1896	7b 1a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r1
    1897	bf a1 00 00 00 00 00 00	r1 = r10
    1898	07 01 00 00 90 ff ff ff	r1 += -0x70
    1899	7b 1a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r1
    1900	bf a1 00 00 00 00 00 00	r1 = r10
    1901	07 01 00 00 b0 ff ff ff	r1 += -0x50
    1902	bf 52 00 00 00 00 00 00	r2 = r5
    1903	85 10 00 00 a5 ff ff ff	call -0x5b ; <core::panicking::panic_fmt>
    1904	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000003b88 <<core::fmt::builders::PadAdapter as core::fmt::Write>::write_str>
    1905	b7 04 00 00 01 00 00 00	r4 = 0x1
    1906	7b 4a d8 ff 00 00 00 00	*(u64 *)(r10 - 0x28) = r4
    1907	7b 3a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r3
    1908	7b 3a 98 ff 00 00 00 00	*(u64 *)(r10 - 0x68) = r3
    1909	7b 3a c0 ff 00 00 00 00	*(u64 *)(r10 - 0x40) = r3
    1910	7b 2a a0 ff 00 00 00 00	*(u64 *)(r10 - 0x60) = r2
    1911	7b 2a b8 ff 00 00 00 00	*(u64 *)(r10 - 0x48) = r2
    1912	b7 03 00 00 00 00 00 00	r3 = 0x0
    1913	b7 02 00 00 00 00 00 00	r2 = 0x0
    1914	7b 2a 90 ff 00 00 00 00	*(u64 *)(r10 - 0x70) = r2
    1915	7b 3a c8 ff 00 00 00 00	*(u64 *)(r10 - 0x38) = r3
    1916	b7 02 00 00 0a 00 00 00	r2 = 0xa
    1917	63 2a e0 ff 00 00 00 00	*(u32 *)(r10 - 0x20) = r2
    1918	79 12 08 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x8)
    1919	7b 2a 80 ff 00 00 00 00	*(u64 *)(r10 - 0x80) = r2
    1920	79 12 00 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x0)
    1921	7b 2a 78 ff 00 00 00 00	*(u64 *)(r10 - 0x88) = r2
    1922	79 11 10 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x10)
    1923	7b 1a 88 ff 00 00 00 00	*(u64 *)(r10 - 0x78) = r1
    1924	b7 09 00 00 00 00 00 00	r9 = 0x0
    1925	b7 07 00 00 00 00 00 00	r7 = 0x0
    1926	05 00 09 00 00 00 00 00	goto +0x9 <LBB184_1>

0000000000003c38 <LBB184_19>
    1927	57 01 00 00 01 00 00 00	r1 &= 0x1
    1928	79 a4 88 ff 00 00 00 00	r4 = *(u64 *)(r10 - 0x78)
    1929	73 14 00 00 00 00 00 00	*(u8 *)(r4 + 0x0) = r1
    1930	79 a1 80 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x80)
    1931	79 14 18 00 00 00 00 00	r4 = *(u64 *)(r1 + 0x18)
    1932	79 a1 78 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x88)
    1933	8d 00 00 00 04 00 00 00	callx r4
    1934	7b 6a 90 ff 00 00 00 00	*(u64 *)(r10 - 0x70) = r6
    1935	55 00 57 00 00 00 00 00	if r0 != 0x0 goto +0x57 <LBB184_21>

0000000000003c80 <LBB184_1>
    1936	57 07 00 00 ff 00 00 00	r7 &= 0xff
    1937	79 a4 98 ff 00 00 00 00	r4 = *(u64 *)(r10 - 0x68)
    1938	55 07 4a 00 00 00 00 00	if r7 != 0x0 goto +0x4a <LBB184_14>
    1939	bf 96 00 00 00 00 00 00	r6 = r9
    1940	2d 49 42 00 00 00 00 00	if r9 > r4 goto +0x42 <LBB184_13>

0000000000003ca8 <LBB184_3>
    1941	79 a3 a0 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x60)
    1942	0f 93 00 00 00 00 00 00	r3 += r9
    1943	bf 47 00 00 00 00 00 00	r7 = r4
    1944	1f 94 00 00 00 00 00 00	r4 -= r9
    1945	b7 01 00 00 10 00 00 00	r1 = 0x10
    1946	2d 41 0a 00 00 00 00 00	if r1 > r4 goto +0xa <LBB184_5>
    1947	bf a1 00 00 00 00 00 00	r1 = r10
    1948	07 01 00 00 a8 ff ff ff	r1 += -0x58
    1949	b7 02 00 00 0a 00 00 00	r2 = 0xa
    1950	85 10 00 00 c6 05 00 00	call 0x5c6 ; <core::slice::memchr::memchr_aligned>
    1951	79 a1 b0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x50)
    1952	79 a2 a8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x58)
    1953	bf 76 00 00 00 00 00 00	r6 = r7
    1954	bf 74 00 00 00 00 00 00	r4 = r7
    1955	55 02 33 00 01 00 00 00	if r2 != 0x1 goto +0x33 <LBB184_13>
    1956	05 00 11 00 00 00 00 00	goto +0x11 <LBB184_10>

0000000000003d28 <LBB184_5>
    1957	b7 01 00 00 00 00 00 00	r1 = 0x0
    1958	b7 02 00 00 00 00 00 00	r2 = 0x0
    1959	15 04 0b 00 00 00 00 00	if r4 == 0x0 goto +0xb <LBB184_9>
    1960	b7 05 00 00 00 00 00 00	r5 = 0x0

0000000000003d48 <LBB184_7>
    1961	bf 31 00 00 00 00 00 00	r1 = r3
    1962	0f 51 00 00 00 00 00 00	r1 += r5
    1963	b7 02 00 00 01 00 00 00	r2 = 0x1
    1964	71 10 00 00 00 00 00 00	r0 = *(u8 *)(r1 + 0x0)
    1965	bf 51 00 00 00 00 00 00	r1 = r5
    1966	15 00 04 00 0a 00 00 00	if r0 == 0xa goto +0x4 <LBB184_9>
    1967	b7 02 00 00 00 00 00 00	r2 = 0x0
    1968	07 05 00 00 01 00 00 00	r5 += 0x1
    1969	bf 41 00 00 00 00 00 00	r1 = r4
    1970	2d 54 f6 ff 00 00 00 00	if r4 > r5 goto -0xa <LBB184_7>

0000000000003d98 <LBB184_9>
    1971	79 a4 98 ff 00 00 00 00	r4 = *(u64 *)(r10 - 0x68)
    1972	bf 46 00 00 00 00 00 00	r6 = r4
    1973	55 02 21 00 01 00 00 00	if r2 != 0x1 goto +0x21 <LBB184_13>

0000000000003db0 <LBB184_10>
    1974	0f 19 00 00 00 00 00 00	r9 += r1
    1975	bf 96 00 00 00 00 00 00	r6 = r9
    1976	07 06 00 00 01 00 00 00	r6 += 0x1
    1977	2d 94 03 00 00 00 00 00	if r4 > r9 goto +0x3 <LBB184_12>

0000000000003dd0 <LBB184_11>
    1978	bf 69 00 00 00 00 00 00	r9 = r6
    1979	2d 46 1b 00 00 00 00 00	if r6 > r4 goto +0x1b <LBB184_13>
    1980	05 00 d8 ff 00 00 00 00	goto -0x28 <LBB184_3>

0000000000003de8 <LBB184_12>
    1981	79 a1 a0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x60)
    1982	0f 91 00 00 00 00 00 00	r1 += r9
    1983	b7 07 00 00 00 00 00 00	r7 = 0x0
    1984	71 11 00 00 00 00 00 00	r1 = *(u8 *)(r1 + 0x0)
    1985	bf 69 00 00 00 00 00 00	r9 = r6
    1986	bf 68 00 00 00 00 00 00	r8 = r6
    1987	b7 02 00 00 0a 00 00 00	r2 = 0xa
    1988	1d 21 01 00 00 00 00 00	if r1 == r2 goto +0x1 <LBB184_15>
    1989	05 00 f4 ff 00 00 00 00	goto -0xc <LBB184_11>

0000000000003e30 <LBB184_15>
    1990	79 a1 88 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x78)
    1991	71 11 00 00 00 00 00 00	r1 = *(u8 *)(r1 + 0x0)
    1992	55 01 16 00 00 00 00 00	if r1 != 0x0 goto +0x16 <LBB184_20>

0000000000003e48 <LBB184_16>
    1993	79 a2 a0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x60)
    1994	79 a4 90 ff 00 00 00 00	r4 = *(u64 *)(r10 - 0x70)
    1995	0f 42 00 00 00 00 00 00	r2 += r4
    1996	bf 83 00 00 00 00 00 00	r3 = r8
    1997	1f 43 00 00 00 00 00 00	r3 -= r4
    1998	b7 01 00 00 00 00 00 00	r1 = 0x0
    1999	1d 48 b7 ff 00 00 00 00	if r8 == r4 goto -0x49 <LBB184_19>
    2000	bf 31 00 00 00 00 00 00	r1 = r3
    2001	0f 21 00 00 00 00 00 00	r1 += r2
    2002	71 14 ff ff 00 00 00 00	r4 = *(u8 *)(r1 - 0x1)
    2003	b7 01 00 00 01 00 00 00	r1 = 0x1
    2004	15 04 b2 ff 0a 00 00 00	if r4 == 0xa goto -0x4e <LBB184_19>
    2005	b7 01 00 00 00 00 00 00	r1 = 0x0
    2006	05 00 b0 ff 00 00 00 00	goto -0x50 <LBB184_19>

0000000000003eb8 <LBB184_13>
    2007	bf 69 00 00 00 00 00 00	r9 = r6
    2008	b7 07 00 00 01 00 00 00	r7 = 0x1
    2009	79 a1 90 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x70)
    2010	bf 16 00 00 00 00 00 00	r6 = r1
    2011	bf 48 00 00 00 00 00 00	r8 = r4
    2012	5d 41 e9 ff 00 00 00 00	if r1 != r4 goto -0x17 <LBB184_15>

0000000000003ee8 <LBB184_14>
    2013	b7 00 00 00 00 00 00 00	r0 = 0x0
    2014	05 00 09 00 00 00 00 00	goto +0x9 <LBB184_22>

0000000000003ef8 <LBB184_20>
    2015	79 a1 80 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x80)
    2016	79 14 18 00 00 00 00 00	r4 = *(u64 *)(r1 + 0x18)
    2017	79 a1 78 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x88)
    2018	18 02 00 00 80 97 00 00 00 00 00 00 00 00 00 00	r2 = 0x9780 ll
    2020	b7 03 00 00 04 00 00 00	r3 = 0x4
    2021	8d 00 00 00 04 00 00 00	callx r4
    2022	15 00 e2 ff 00 00 00 00	if r0 == 0x0 goto -0x1e <LBB184_16>

0000000000003f38 <LBB184_21>
    2023	b7 00 00 00 01 00 00 00	r0 = 0x1

0000000000003f40 <LBB184_22>
    2024	95 00 00 00 00 00 00 00	exit

0000000000003f48 <core::fmt::builders::DebugTuple::field>
    2025	bf 28 00 00 00 00 00 00	r8 = r2
    2026	bf 16 00 00 00 00 00 00	r6 = r1
    2027	71 61 10 00 00 00 00 00	r1 = *(u8 *)(r6 + 0x10)
    2028	15 01 07 00 00 00 00 00	if r1 == 0x0 goto +0x7 <LBB188_2>
    2029	b7 09 00 00 01 00 00 00	r9 = 0x1
    2030	79 61 00 00 00 00 00 00	r1 = *(u64 *)(r6 + 0x0)

0000000000003f78 <LBB188_15>
    2031	73 96 10 00 00 00 00 00	*(u8 *)(r6 + 0x10) = r9
    2032	07 01 00 00 01 00 00 00	r1 += 0x1
    2033	7b 16 00 00 00 00 00 00	*(u64 *)(r6 + 0x0) = r1
    2034	bf 60 00 00 00 00 00 00	r0 = r6
    2035	95 00 00 00 00 00 00 00	exit

0000000000003fa0 <LBB188_2>
    2036	79 64 00 00 00 00 00 00	r4 = *(u64 *)(r6 + 0x0)
    2037	79 67 08 00 00 00 00 00	r7 = *(u64 *)(r6 + 0x8)
    2038	61 71 30 00 00 00 00 00	r1 = *(u32 *)(r7 + 0x30)
    2039	bf 12 00 00 00 00 00 00	r2 = r1
    2040	57 02 00 00 04 00 00 00	r2 &= 0x4
    2041	7b 3a 98 ff 00 00 00 00	*(u64 *)(r10 - 0x68) = r3
    2042	55 02 19 00 00 00 00 00	if r2 != 0x0 goto +0x19 <LBB188_8>
    2043	7b 8a 90 ff 00 00 00 00	*(u64 *)(r10 - 0x70) = r8
    2044	18 02 00 00 a2 97 00 00 00 00 00 00 00 00 00 00	r2 = 0x97a2 ll
    2046	15 04 02 00 00 00 00 00	if r4 == 0x0 goto +0x2 <LBB188_5>
    2047	18 02 00 00 9e 97 00 00 00 00 00 00 00 00 00 00	r2 = 0x979e ll

0000000000004008 <LBB188_5>
    2049	b7 09 00 00 01 00 00 00	r9 = 0x1
    2050	b7 03 00 00 01 00 00 00	r3 = 0x1
    2051	bf 48 00 00 00 00 00 00	r8 = r4
    2052	15 04 01 00 00 00 00 00	if r4 == 0x0 goto +0x1 <LBB188_7>
    2053	b7 03 00 00 02 00 00 00	r3 = 0x2

0000000000004030 <LBB188_7>
    2054	79 71 00 00 00 00 00 00	r1 = *(u64 *)(r7 + 0x0)
    2055	79 74 08 00 00 00 00 00	r4 = *(u64 *)(r7 + 0x8)
    2056	79 44 18 00 00 00 00 00	r4 = *(u64 *)(r4 + 0x18)
    2057	8d 00 00 00 04 00 00 00	callx r4
    2058	bf 81 00 00 00 00 00 00	r1 = r8
    2059	55 00 e3 ff 00 00 00 00	if r0 != 0x0 goto -0x1d <LBB188_15>
    2060	79 a1 98 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x68)
    2061	79 13 18 00 00 00 00 00	r3 = *(u64 *)(r1 + 0x18)
    2062	79 a1 90 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x70)
    2063	bf 72 00 00 00 00 00 00	r2 = r7
    2064	8d 00 00 00 03 00 00 00	callx r3
    2065	bf 09 00 00 00 00 00 00	r9 = r0
    2066	bf 81 00 00 00 00 00 00	r1 = r8
    2067	05 00 db ff 00 00 00 00	goto -0x25 <LBB188_15>

00000000000040a0 <LBB188_8>
    2068	7b 4a 90 ff 00 00 00 00	*(u64 *)(r10 - 0x70) = r4
    2069	55 04 0b 00 00 00 00 00	if r4 != 0x0 goto +0xb <LBB188_11>
    2070	79 71 00 00 00 00 00 00	r1 = *(u64 *)(r7 + 0x0)
    2071	79 72 08 00 00 00 00 00	r2 = *(u64 *)(r7 + 0x8)
    2072	79 24 18 00 00 00 00 00	r4 = *(u64 *)(r2 + 0x18)
    2073	18 02 00 00 a0 97 00 00 00 00 00 00 00 00 00 00	r2 = 0x97a0 ll
    2075	b7 03 00 00 02 00 00 00	r3 = 0x2
    2076	8d 00 00 00 04 00 00 00	callx r4
    2077	b7 09 00 00 01 00 00 00	r9 = 0x1
    2078	b7 01 00 00 00 00 00 00	r1 = 0x0
    2079	55 00 cf ff 00 00 00 00	if r0 != 0x0 goto -0x31 <LBB188_15>
    2080	61 71 30 00 00 00 00 00	r1 = *(u32 *)(r7 + 0x30)

0000000000004108 <LBB188_11>
    2081	b7 09 00 00 01 00 00 00	r9 = 0x1
    2082	73 9a bf ff 00 00 00 00	*(u8 *)(r10 - 0x41) = r9
    2083	79 72 00 00 00 00 00 00	r2 = *(u64 *)(r7 + 0x0)
    2084	79 73 08 00 00 00 00 00	r3 = *(u64 *)(r7 + 0x8)
    2085	bf a4 00 00 00 00 00 00	r4 = r10
    2086	07 04 00 00 bf ff ff ff	r4 += -0x41
    2087	7b 4a b0 ff 00 00 00 00	*(u64 *)(r10 - 0x50) = r4
    2088	7b 3a a8 ff 00 00 00 00	*(u64 *)(r10 - 0x58) = r3
    2089	7b 2a a0 ff 00 00 00 00	*(u64 *)(r10 - 0x60) = r2
    2090	79 72 10 00 00 00 00 00	r2 = *(u64 *)(r7 + 0x10)
    2091	79 73 18 00 00 00 00 00	r3 = *(u64 *)(r7 + 0x18)
    2092	79 74 20 00 00 00 00 00	r4 = *(u64 *)(r7 + 0x20)
    2093	79 75 28 00 00 00 00 00	r5 = *(u64 *)(r7 + 0x28)
    2094	61 70 34 00 00 00 00 00	r0 = *(u32 *)(r7 + 0x34)
    2095	71 77 38 00 00 00 00 00	r7 = *(u8 *)(r7 + 0x38)
    2096	73 7a f8 ff 00 00 00 00	*(u8 *)(r10 - 0x8) = r7
    2097	63 0a f4 ff 00 00 00 00	*(u32 *)(r10 - 0xc) = r0
    2098	63 1a f0 ff 00 00 00 00	*(u32 *)(r10 - 0x10) = r1
    2099	7b 5a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r5
    2100	7b 4a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r4
    2101	7b 3a d8 ff 00 00 00 00	*(u64 *)(r10 - 0x28) = r3
    2102	7b 2a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r2
    2103	18 01 00 00 40 a5 00 00 00 00 00 00 00 00 00 00	r1 = 0xa540 ll
    2105	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 0x38) = r1
    2106	bf a1 00 00 00 00 00 00	r1 = r10
    2107	07 01 00 00 a0 ff ff ff	r1 += -0x60
    2108	7b 1a c0 ff 00 00 00 00	*(u64 *)(r10 - 0x40) = r1
    2109	79 a1 98 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x68)
    2110	79 13 18 00 00 00 00 00	r3 = *(u64 *)(r1 + 0x18)
    2111	bf a2 00 00 00 00 00 00	r2 = r10
    2112	07 02 00 00 c0 ff ff ff	r2 += -0x40
    2113	bf 81 00 00 00 00 00 00	r1 = r8
    2114	8d 00 00 00 03 00 00 00	callx r3
    2115	55 00 08 00 00 00 00 00	if r0 != 0x0 goto +0x8 <LBB188_13>
    2116	79 a1 c8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x38)
    2117	79 14 18 00 00 00 00 00	r4 = *(u64 *)(r1 + 0x18)
    2118	79 a1 c0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x40)
    2119	18 02 00 00 9c 97 00 00 00 00 00 00 00 00 00 00	r2 = 0x979c ll
    2121	b7 03 00 00 02 00 00 00	r3 = 0x2
    2122	8d 00 00 00 04 00 00 00	callx r4
    2123	bf 09 00 00 00 00 00 00	r9 = r0

0000000000004260 <LBB188_13>
    2124	79 a1 90 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x70)
    2125	05 00 a1 ff 00 00 00 00	goto -0x5f <LBB188_15>

0000000000004270 <core::fmt::Write::write_char>
    2126	b7 03 00 00 00 00 00 00	r3 = 0x0
    2127	63 3a fc ff 00 00 00 00	*(u32 *)(r10 - 0x4) = r3
    2128	bf 23 00 00 00 00 00 00	r3 = r2
    2129	67 03 00 00 20 00 00 00	r3 <<= 0x20
    2130	77 03 00 00 20 00 00 00	r3 >>= 0x20
    2131	b7 04 00 00 80 00 00 00	r4 = 0x80
    2132	2d 34 1a 00 00 00 00 00	if r4 > r3 goto +0x1a <LBB210_6>
    2133	b7 04 00 00 00 08 00 00	r4 = 0x800
    2134	2d 34 1b 00 00 00 00 00	if r4 > r3 goto +0x1b <LBB210_5>
    2135	bf 23 00 00 00 00 00 00	r3 = r2
    2136	67 03 00 00 20 00 00 00	r3 <<= 0x20
    2137	77 03 00 00 20 00 00 00	r3 >>= 0x20
    2138	b7 04 00 00 00 00 01 00	r4 = 0x10000
    2139	2d 34 1f 00 00 00 00 00	if r4 > r3 goto +0x1f <LBB210_4>
    2140	57 02 00 00 3f 00 00 00	r2 &= 0x3f
    2141	47 02 00 00 80 00 00 00	r2 |= 0x80
    2142	73 2a ff ff 00 00 00 00	*(u8 *)(r10 - 0x1) = r2
    2143	bf 32 00 00 00 00 00 00	r2 = r3
    2144	77 02 00 00 06 00 00 00	r2 >>= 0x6
    2145	57 02 00 00 3f 00 00 00	r2 &= 0x3f
    2146	47 02 00 00 80 00 00 00	r2 |= 0x80
    2147	73 2a fe ff 00 00 00 00	*(u8 *)(r10 - 0x2) = r2
    2148	bf 32 00 00 00 00 00 00	r2 = r3
    2149	77 02 00 00 0c 00 00 00	r2 >>= 0xc
    2150	57 02 00 00 3f 00 00 00	r2 &= 0x3f
    2151	47 02 00 00 80 00 00 00	r2 |= 0x80
    2152	73 2a fd ff 00 00 00 00	*(u8 *)(r10 - 0x3) = r2
    2153	77 03 00 00 12 00 00 00	r3 >>= 0x12
    2154	57 03 00 00 07 00 00 00	r3 &= 0x7
    2155	47 03 00 00 f0 00 00 00	r3 |= 0xf0
    2156	73 3a fc ff 00 00 00 00	*(u8 *)(r10 - 0x4) = r3
    2157	b7 03 00 00 04 00 00 00	r3 = 0x4
    2158	05 00 18 00 00 00 00 00	goto +0x18 <LBB210_7>

0000000000004378 <LBB210_6>
    2159	73 2a fc ff 00 00 00 00	*(u8 *)(r10 - 0x4) = r2
    2160	b7 03 00 00 01 00 00 00	r3 = 0x1
    2161	05 00 15 00 00 00 00 00	goto +0x15 <LBB210_7>

0000000000004390 <LBB210_5>
    2162	bf 23 00 00 00 00 00 00	r3 = r2
    2163	57 03 00 00 3f 00 00 00	r3 &= 0x3f
    2164	47 03 00 00 80 00 00 00	r3 |= 0x80
    2165	73 3a fd ff 00 00 00 00	*(u8 *)(r10 - 0x3) = r3
    2166	77 02 00 00 06 00 00 00	r2 >>= 0x6
    2167	47 02 00 00 c0 00 00 00	r2 |= 0xc0
    2168	73 2a fc ff 00 00 00 00	*(u8 *)(r10 - 0x4) = r2
    2169	b7 03 00 00 02 00 00 00	r3 = 0x2
    2170	05 00 0c 00 00 00 00 00	goto +0xc <LBB210_7>

00000000000043d8 <LBB210_4>
    2171	57 02 00 00 3f 00 00 00	r2 &= 0x3f
    2172	47 02 00 00 80 00 00 00	r2 |= 0x80
    2173	73 2a fe ff 00 00 00 00	*(u8 *)(r10 - 0x2) = r2
    2174	bf 32 00 00 00 00 00 00	r2 = r3
    2175	77 02 00 00 0c 00 00 00	r2 >>= 0xc
    2176	47 02 00 00 e0 00 00 00	r2 |= 0xe0
    2177	73 2a fc ff 00 00 00 00	*(u8 *)(r10 - 0x4) = r2
    2178	77 03 00 00 06 00 00 00	r3 >>= 0x6
    2179	57 03 00 00 3f 00 00 00	r3 &= 0x3f
    2180	47 03 00 00 80 00 00 00	r3 |= 0x80
    2181	73 3a fd ff 00 00 00 00	*(u8 *)(r10 - 0x3) = r3
    2182	b7 03 00 00 03 00 00 00	r3 = 0x3

0000000000004438 <LBB210_7>
    2183	bf a2 00 00 00 00 00 00	r2 = r10
    2184	07 02 00 00 fc ff ff ff	r2 += -0x4
    2185	85 10 00 00 e7 fe ff ff	call -0x119 ; <<core::fmt::builders::PadAdapter as core::fmt::Write>::write_str>
    2186	95 00 00 00 00 00 00 00	exit

0000000000004458 <core::fmt::Write::write_fmt>
    2187	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 0x38) = r1
    2188	bf a6 00 00 00 00 00 00	r6 = r10
    2189	07 06 00 00 d0 ff ff ff	r6 += -0x30
    2190	bf 61 00 00 00 00 00 00	r1 = r6
    2191	b7 03 00 00 30 00 00 00	r3 = 0x30
    2192	85 10 00 00 cf 09 00 00	call 0x9cf ; <memcpy>
    2193	bf a1 00 00 00 00 00 00	r1 = r10
    2194	07 01 00 00 c8 ff ff ff	r1 += -0x38
    2195	18 02 00 00 88 a5 00 00 00 00 00 00 00 00 00 00	r2 = 0xa588 ll
    2197	bf 63 00 00 00 00 00 00	r3 = r6
    2198	85 10 00 00 50 00 00 00	call 0x50 ; <core::fmt::write>
    2199	95 00 00 00 00 00 00 00	exit

00000000000044c0 <<&mut W as core::fmt::Write>::write_str>
    2200	79 11 00 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x0)
    2201	85 10 00 00 d7 fe ff ff	call -0x129 ; <<core::fmt::builders::PadAdapter as core::fmt::Write>::write_str>
    2202	95 00 00 00 00 00 00 00	exit

00000000000044d8 <<&mut W as core::fmt::Write>::write_char>
    2203	79 11 00 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x0)
    2204	b7 03 00 00 00 00 00 00	r3 = 0x0
    2205	63 3a fc ff 00 00 00 00	*(u32 *)(r10 - 0x4) = r3
    2206	bf 23 00 00 00 00 00 00	r3 = r2
    2207	67 03 00 00 20 00 00 00	r3 <<= 0x20
    2208	77 03 00 00 20 00 00 00	r3 >>= 0x20
    2209	b7 04 00 00 80 00 00 00	r4 = 0x80
    2210	2d 34 1a 00 00 00 00 00	if r4 > r3 goto +0x1a <LBB213_6>
    2211	b7 04 00 00 00 08 00 00	r4 = 0x800
    2212	2d 34 1b 00 00 00 00 00	if r4 > r3 goto +0x1b <LBB213_5>
    2213	bf 23 00 00 00 00 00 00	r3 = r2
    2214	67 03 00 00 20 00 00 00	r3 <<= 0x20
    2215	77 03 00 00 20 00 00 00	r3 >>= 0x20
    2216	b7 04 00 00 00 00 01 00	r4 = 0x10000
    2217	2d 34 1f 00 00 00 00 00	if r4 > r3 goto +0x1f <LBB213_4>
    2218	57 02 00 00 3f 00 00 00	r2 &= 0x3f
    2219	47 02 00 00 80 00 00 00	r2 |= 0x80
    2220	73 2a ff ff 00 00 00 00	*(u8 *)(r10 - 0x1) = r2
    2221	bf 32 00 00 00 00 00 00	r2 = r3
    2222	77 02 00 00 06 00 00 00	r2 >>= 0x6
    2223	57 02 00 00 3f 00 00 00	r2 &= 0x3f
    2224	47 02 00 00 80 00 00 00	r2 |= 0x80
    2225	73 2a fe ff 00 00 00 00	*(u8 *)(r10 - 0x2) = r2
    2226	bf 32 00 00 00 00 00 00	r2 = r3
    2227	77 02 00 00 0c 00 00 00	r2 >>= 0xc
    2228	57 02 00 00 3f 00 00 00	r2 &= 0x3f
    2229	47 02 00 00 80 00 00 00	r2 |= 0x80
    2230	73 2a fd ff 00 00 00 00	*(u8 *)(r10 - 0x3) = r2
    2231	77 03 00 00 12 00 00 00	r3 >>= 0x12
    2232	57 03 00 00 07 00 00 00	r3 &= 0x7
    2233	47 03 00 00 f0 00 00 00	r3 |= 0xf0
    2234	73 3a fc ff 00 00 00 00	*(u8 *)(r10 - 0x4) = r3
    2235	b7 03 00 00 04 00 00 00	r3 = 0x4
    2236	05 00 18 00 00 00 00 00	goto +0x18 <LBB213_7>

00000000000045e8 <LBB213_6>
    2237	73 2a fc ff 00 00 00 00	*(u8 *)(r10 - 0x4) = r2
    2238	b7 03 00 00 01 00 00 00	r3 = 0x1
    2239	05 00 15 00 00 00 00 00	goto +0x15 <LBB213_7>

0000000000004600 <LBB213_5>
    2240	bf 23 00 00 00 00 00 00	r3 = r2
    2241	57 03 00 00 3f 00 00 00	r3 &= 0x3f
    2242	47 03 00 00 80 00 00 00	r3 |= 0x80
    2243	73 3a fd ff 00 00 00 00	*(u8 *)(r10 - 0x3) = r3
    2244	77 02 00 00 06 00 00 00	r2 >>= 0x6
    2245	47 02 00 00 c0 00 00 00	r2 |= 0xc0
    2246	73 2a fc ff 00 00 00 00	*(u8 *)(r10 - 0x4) = r2
    2247	b7 03 00 00 02 00 00 00	r3 = 0x2
    2248	05 00 0c 00 00 00 00 00	goto +0xc <LBB213_7>

0000000000004648 <LBB213_4>
    2249	57 02 00 00 3f 00 00 00	r2 &= 0x3f
    2250	47 02 00 00 80 00 00 00	r2 |= 0x80
    2251	73 2a fe ff 00 00 00 00	*(u8 *)(r10 - 0x2) = r2
    2252	bf 32 00 00 00 00 00 00	r2 = r3
    2253	77 02 00 00 0c 00 00 00	r2 >>= 0xc
    2254	47 02 00 00 e0 00 00 00	r2 |= 0xe0
    2255	73 2a fc ff 00 00 00 00	*(u8 *)(r10 - 0x4) = r2
    2256	77 03 00 00 06 00 00 00	r3 >>= 0x6
    2257	57 03 00 00 3f 00 00 00	r3 &= 0x3f
    2258	47 03 00 00 80 00 00 00	r3 |= 0x80
    2259	73 3a fd ff 00 00 00 00	*(u8 *)(r10 - 0x3) = r3
    2260	b7 03 00 00 03 00 00 00	r3 = 0x3

00000000000046a8 <LBB213_7>
    2261	bf a2 00 00 00 00 00 00	r2 = r10
    2262	07 02 00 00 fc ff ff ff	r2 += -0x4
    2263	85 10 00 00 99 fe ff ff	call -0x167 ; <<core::fmt::builders::PadAdapter as core::fmt::Write>::write_str>
    2264	95 00 00 00 00 00 00 00	exit

00000000000046c8 <<&mut W as core::fmt::Write>::write_fmt>
    2265	79 11 00 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x0)
    2266	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 0x38) = r1
    2267	bf a6 00 00 00 00 00 00	r6 = r10
    2268	07 06 00 00 d0 ff ff ff	r6 += -0x30
    2269	bf 61 00 00 00 00 00 00	r1 = r6
    2270	b7 03 00 00 30 00 00 00	r3 = 0x30
    2271	85 10 00 00 80 09 00 00	call 0x980 ; <memcpy>
    2272	bf a1 00 00 00 00 00 00	r1 = r10
    2273	07 01 00 00 c8 ff ff ff	r1 += -0x38
    2274	18 02 00 00 88 a5 00 00 00 00 00 00 00 00 00 00	r2 = 0xa588 ll
    2276	bf 63 00 00 00 00 00 00	r3 = r6
    2277	85 10 00 00 01 00 00 00	call 0x1 ; <core::fmt::write>
    2278	95 00 00 00 00 00 00 00	exit

0000000000004738 <core::fmt::write>
    2279	b7 04 00 00 03 00 00 00	r4 = 0x3
    2280	73 4a f8 ff 00 00 00 00	*(u8 *)(r10 - 0x8) = r4
    2281	18 04 00 00 00 00 00 00 00 00 00 00 20 00 00 00	r4 = 0x2000000000 ll
    2283	7b 4a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r4
    2284	b7 07 00 00 00 00 00 00	r7 = 0x0
    2285	7b 7a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r7
    2286	7b 7a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r7
    2287	7b 2a c8 ff 00 00 00 00	*(u64 *)(r10 - 0x38) = r2
    2288	7b 1a c0 ff 00 00 00 00	*(u64 *)(r10 - 0x40) = r1
    2289	79 38 00 00 00 00 00 00	r8 = *(u64 *)(r3 + 0x0)
    2290	7b 3a b8 ff 00 00 00 00	*(u64 *)(r10 - 0x48) = r3
    2291	55 08 1e 00 00 00 00 00	if r8 != 0x0 goto +0x1e <LBB219_4>
    2292	79 36 28 00 00 00 00 00	r6 = *(u64 *)(r3 + 0x28)
    2293	15 06 6c 00 00 00 00 00	if r6 == 0x0 goto +0x6c <LBB219_23>
    2294	79 a1 b8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x48)
    2295	79 18 20 00 00 00 00 00	r8 = *(u64 *)(r1 + 0x20)
    2296	b7 07 00 00 00 00 00 00	r7 = 0x0
    2297	07 08 00 00 08 00 00 00	r8 += 0x8
    2298	67 06 00 00 04 00 00 00	r6 <<= 0x4
    2299	79 19 10 00 00 00 00 00	r9 = *(u64 *)(r1 + 0x10)
    2300	07 09 00 00 08 00 00 00	r9 += 0x8

00000000000047e8 <LBB219_3>
    2301	79 93 00 00 00 00 00 00	r3 = *(u64 *)(r9 + 0x0)
    2302	55 03 01 00 00 00 00 00	if r3 != 0x0 goto +0x1 <LBB219_25>
    2303	05 00 06 00 00 00 00 00	goto +0x6 <LBB219_24>

0000000000004800 <LBB219_25>
    2304	79 a1 c8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x38)
    2305	79 14 18 00 00 00 00 00	r4 = *(u64 *)(r1 + 0x18)
    2306	79 92 f8 ff 00 00 00 00	r2 = *(u64 *)(r9 - 0x8)
    2307	79 a1 c0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x40)
    2308	8d 00 00 00 04 00 00 00	callx r4
    2309	55 00 6d 00 00 00 00 00	if r0 != 0x0 goto +0x6d <LBB219_22>

0000000000004830 <LBB219_24>
    2310	79 81 f8 ff 00 00 00 00	r1 = *(u64 *)(r8 - 0x8)
    2311	79 83 00 00 00 00 00 00	r3 = *(u64 *)(r8 + 0x0)
    2312	bf a2 00 00 00 00 00 00	r2 = r10
    2313	07 02 00 00 c0 ff ff ff	r2 += -0x40
    2314	8d 00 00 00 03 00 00 00	callx r3
    2315	55 00 67 00 00 00 00 00	if r0 != 0x0 goto +0x67 <LBB219_22>
    2316	07 07 00 00 01 00 00 00	r7 += 0x1
    2317	07 08 00 00 10 00 00 00	r8 += 0x10
    2318	07 09 00 00 10 00 00 00	r9 += 0x10
    2319	07 06 00 00 f0 ff ff ff	r6 += -0x10
    2320	15 06 51 00 00 00 00 00	if r6 == 0x0 goto +0x51 <LBB219_23>
    2321	05 00 eb ff 00 00 00 00	goto -0x15 <LBB219_3>

0000000000004890 <LBB219_4>
    2322	79 39 08 00 00 00 00 00	r9 = *(u64 *)(r3 + 0x8)
    2323	15 09 4e 00 00 00 00 00	if r9 == 0x0 goto +0x4e <LBB219_23>
    2324	b7 07 00 00 00 00 00 00	r7 = 0x0
    2325	07 08 00 00 18 00 00 00	r8 += 0x18
    2326	27 09 00 00 38 00 00 00	r9 *= 0x38
    2327	79 a1 b8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x48)
    2328	79 16 10 00 00 00 00 00	r6 = *(u64 *)(r1 + 0x10)
    2329	07 06 00 00 08 00 00 00	r6 += 0x8

00000000000048d0 <LBB219_6>
    2330	79 63 00 00 00 00 00 00	r3 = *(u64 *)(r6 + 0x0)
    2331	55 03 0e 00 00 00 00 00	if r3 != 0x0 goto +0xe <LBB219_20>

00000000000048e0 <LBB219_7>
    2332	79 a1 b8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x48)
    2333	79 12 20 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x20)
    2334	61 81 0c 00 00 00 00 00	r1 = *(u32 *)(r8 + 0xc)
    2335	63 1a f4 ff 00 00 00 00	*(u32 *)(r10 - 0xc) = r1
    2336	71 81 10 00 00 00 00 00	r1 = *(u8 *)(r8 + 0x10)
    2337	73 1a f8 ff 00 00 00 00	*(u8 *)(r10 - 0x8) = r1
    2338	61 81 08 00 00 00 00 00	r1 = *(u32 *)(r8 + 0x8)
    2339	63 1a f0 ff 00 00 00 00	*(u32 *)(r10 - 0x10) = r1
    2340	79 81 00 00 00 00 00 00	r1 = *(u64 *)(r8 + 0x0)
    2341	79 84 f8 ff 00 00 00 00	r4 = *(u64 *)(r8 - 0x8)
    2342	15 04 0a 00 00 00 00 00	if r4 == 0x0 goto +0xa <LBB219_10>
    2343	b7 03 00 00 00 00 00 00	r3 = 0x0
    2344	15 04 0a 00 01 00 00 00	if r4 == 0x1 goto +0xa <LBB219_11>
    2345	05 00 13 00 00 00 00 00	goto +0x13 <LBB219_13>

0000000000004950 <LBB219_20>
    2346	79 a1 c8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x38)
    2347	79 14 18 00 00 00 00 00	r4 = *(u64 *)(r1 + 0x18)
    2348	79 62 f8 ff 00 00 00 00	r2 = *(u64 *)(r6 - 0x8)
    2349	79 a1 c0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x40)
    2350	8d 00 00 00 04 00 00 00	callx r4
    2351	55 00 43 00 00 00 00 00	if r0 != 0x0 goto +0x43 <LBB219_22>
    2352	05 00 eb ff 00 00 00 00	goto -0x15 <LBB219_7>

0000000000004988 <LBB219_10>
    2353	b7 03 00 00 01 00 00 00	r3 = 0x1
    2354	05 00 0a 00 00 00 00 00	goto +0xa <LBB219_13>

0000000000004998 <LBB219_11>
    2355	67 01 00 00 04 00 00 00	r1 <<= 0x4
    2356	bf 24 00 00 00 00 00 00	r4 = r2
    2357	0f 14 00 00 00 00 00 00	r4 += r1
    2358	79 45 08 00 00 00 00 00	r5 = *(u64 *)(r4 + 0x8)
    2359	18 00 00 00 30 34 00 00 00 00 00 00 00 00 00 00	r0 = 0x3430 ll
    2361	5d 05 03 00 00 00 00 00	if r5 != r0 goto +0x3 <LBB219_13>
    2362	b7 03 00 00 01 00 00 00	r3 = 0x1
    2363	79 41 00 00 00 00 00 00	r1 = *(u64 *)(r4 + 0x0)
    2364	79 11 00 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x0)

00000000000049e8 <LBB219_13>
    2365	7b 1a d8 ff 00 00 00 00	*(u64 *)(r10 - 0x28) = r1
    2366	7b 3a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r3
    2367	79 81 f0 ff 00 00 00 00	r1 = *(u64 *)(r8 - 0x10)
    2368	79 84 e8 ff 00 00 00 00	r4 = *(u64 *)(r8 - 0x18)
    2369	15 04 03 00 00 00 00 00	if r4 == 0x0 goto +0x3 <LBB219_16>
    2370	b7 03 00 00 00 00 00 00	r3 = 0x0
    2371	15 04 03 00 01 00 00 00	if r4 == 0x1 goto +0x3 <LBB219_17>
    2372	05 00 0c 00 00 00 00 00	goto +0xc <LBB219_19>

0000000000004a28 <LBB219_16>
    2373	b7 03 00 00 01 00 00 00	r3 = 0x1
    2374	05 00 0a 00 00 00 00 00	goto +0xa <LBB219_19>

0000000000004a38 <LBB219_17>
    2375	67 01 00 00 04 00 00 00	r1 <<= 0x4
    2376	bf 24 00 00 00 00 00 00	r4 = r2
    2377	0f 14 00 00 00 00 00 00	r4 += r1
    2378	79 45 08 00 00 00 00 00	r5 = *(u64 *)(r4 + 0x8)
    2379	18 00 00 00 30 34 00 00 00 00 00 00 00 00 00 00	r0 = 0x3430 ll
    2381	5d 05 03 00 00 00 00 00	if r5 != r0 goto +0x3 <LBB219_19>
    2382	b7 03 00 00 01 00 00 00	r3 = 0x1
    2383	79 41 00 00 00 00 00 00	r1 = *(u64 *)(r4 + 0x0)
    2384	79 11 00 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x0)

0000000000004a88 <LBB219_19>
    2385	7b 1a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r1
    2386	7b 3a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r3
    2387	79 81 18 00 00 00 00 00	r1 = *(u64 *)(r8 + 0x18)
    2388	67 01 00 00 04 00 00 00	r1 <<= 0x4
    2389	0f 12 00 00 00 00 00 00	r2 += r1
    2390	79 21 00 00 00 00 00 00	r1 = *(u64 *)(r2 + 0x0)
    2391	79 23 08 00 00 00 00 00	r3 = *(u64 *)(r2 + 0x8)
    2392	bf a2 00 00 00 00 00 00	r2 = r10
    2393	07 02 00 00 c0 ff ff ff	r2 += -0x40
    2394	8d 00 00 00 03 00 00 00	callx r3
    2395	55 00 17 00 00 00 00 00	if r0 != 0x0 goto +0x17 <LBB219_22>
    2396	07 07 00 00 01 00 00 00	r7 += 0x1
    2397	07 08 00 00 38 00 00 00	r8 += 0x38
    2398	07 06 00 00 10 00 00 00	r6 += 0x10
    2399	07 09 00 00 c8 ff ff ff	r9 += -0x38
    2400	15 09 01 00 00 00 00 00	if r9 == 0x0 goto +0x1 <LBB219_23>
    2401	05 00 b8 ff 00 00 00 00	goto -0x48 <LBB219_6>

0000000000004b10 <LBB219_23>
    2402	79 a1 b8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x48)
    2403	79 11 18 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x18)
    2404	2d 71 01 00 00 00 00 00	if r1 > r7 goto +0x1 <LBB219_27>
    2405	05 00 0b 00 00 00 00 00	goto +0xb <LBB219_28>

0000000000004b30 <LBB219_27>
    2406	67 07 00 00 04 00 00 00	r7 <<= 0x4
    2407	79 a1 b8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x48)
    2408	79 11 10 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x10)
    2409	0f 71 00 00 00 00 00 00	r1 += r7
    2410	79 13 08 00 00 00 00 00	r3 = *(u64 *)(r1 + 0x8)
    2411	79 12 00 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x0)
    2412	79 a1 c8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x38)
    2413	79 14 18 00 00 00 00 00	r4 = *(u64 *)(r1 + 0x18)
    2414	79 a1 c0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x40)
    2415	8d 00 00 00 04 00 00 00	callx r4
    2416	55 00 02 00 00 00 00 00	if r0 != 0x0 goto +0x2 <LBB219_22>

0000000000004b88 <LBB219_28>
    2417	b7 00 00 00 00 00 00 00	r0 = 0x0
    2418	05 00 01 00 00 00 00 00	goto +0x1 <LBB219_29>

0000000000004b98 <LBB219_22>
    2419	b7 00 00 00 01 00 00 00	r0 = 0x1

0000000000004ba0 <LBB219_29>
    2420	95 00 00 00 00 00 00 00	exit

0000000000004ba8 <core::fmt::Formatter::pad_integral>
    2421	bf 40 00 00 00 00 00 00	r0 = r4
    2422	bf 14 00 00 00 00 00 00	r4 = r1
    2423	79 59 08 f0 00 00 00 00	r9 = *(u64 *)(r5 - 0xff8)
    2424	15 02 0a 00 00 00 00 00	if r2 == 0x0 goto +0xa <LBB220_2>
    2425	b7 01 00 00 00 00 11 00	r1 = 0x110000
    2426	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
    2427	61 47 30 00 00 00 00 00	r7 = *(u32 *)(r4 + 0x30)
    2428	bf 71 00 00 00 00 00 00	r1 = r7
    2429	57 01 00 00 01 00 00 00	r1 &= 0x1
    2430	bf 96 00 00 00 00 00 00	r6 = r9
    2431	15 01 08 00 00 00 00 00	if r1 == 0x0 goto +0x8 <LBB220_4>
    2432	b7 01 00 00 2b 00 00 00	r1 = 0x2b
    2433	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
    2434	05 00 03 00 00 00 00 00	goto +0x3 <LBB220_3>

0000000000004c18 <LBB220_2>
    2435	b7 01 00 00 2d 00 00 00	r1 = 0x2d
    2436	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
    2437	61 47 30 00 00 00 00 00	r7 = *(u32 *)(r4 + 0x30)

0000000000004c30 <LBB220_3>
    2438	bf 96 00 00 00 00 00 00	r6 = r9
    2439	07 06 00 00 01 00 00 00	r6 += 0x1

0000000000004c40 <LBB220_4>
    2440	79 51 00 f0 00 00 00 00	r1 = *(u64 *)(r5 - 0x1000)
    2441	7b 1a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r1
    2442	b7 05 00 00 00 00 00 00	r5 = 0x0
    2443	bf 71 00 00 00 00 00 00	r1 = r7
    2444	57 01 00 00 04 00 00 00	r1 &= 0x4
    2445	15 01 01 00 00 00 00 00	if r1 == 0x0 goto +0x1 <LBB220_14>
    2446	05 00 23 00 00 00 00 00	goto +0x23 <LBB220_6>

0000000000004c78 <LBB220_14>
    2447	7b 9a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r9
    2448	79 41 10 00 00 00 00 00	r1 = *(u64 *)(r4 + 0x10)
    2449	55 01 0b 00 00 00 00 00	if r1 != 0x0 goto +0xb <LBB220_16>
    2450	79 48 08 00 00 00 00 00	r8 = *(u64 *)(r4 + 0x8)
    2451	79 46 00 00 00 00 00 00	r6 = *(u64 *)(r4 + 0x0)
    2452	bf 61 00 00 00 00 00 00	r1 = r6
    2453	bf 54 00 00 00 00 00 00	r4 = r5
    2454	bf 82 00 00 00 00 00 00	r2 = r8
    2455	79 a3 f0 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x10)
    2456	bf 05 00 00 00 00 00 00	r5 = r0
    2457	85 10 00 00 a7 00 00 00	call 0xa7 ; <core::fmt::Formatter::pad_integral::write_prefix>
    2458	b7 07 00 00 01 00 00 00	r7 = 0x1
    2459	55 00 2f 00 00 00 00 00	if r0 != 0x0 goto +0x2f <LBB220_43>
    2460	05 00 28 00 00 00 00 00	goto +0x28 <LBB220_19>

0000000000004ce8 <LBB220_16>
    2461	79 49 18 00 00 00 00 00	r9 = *(u64 *)(r4 + 0x18)
    2462	3d 96 1c 00 00 00 00 00	if r6 >= r9 goto +0x1c <LBB220_18>
    2463	57 07 00 00 08 00 00 00	r7 &= 0x8
    2464	15 07 01 00 00 00 00 00	if r7 == 0x0 goto +0x1 <LBB220_20>
    2465	05 00 45 00 00 00 00 00	goto +0x45 <LBB220_29>

0000000000004d10 <LBB220_20>
    2466	7b 0a c8 ff 00 00 00 00	*(u64 *)(r10 - 0x38) = r0
    2467	71 41 38 00 00 00 00 00	r1 = *(u8 *)(r4 + 0x38)
    2468	b7 08 00 00 01 00 00 00	r8 = 0x1
    2469	15 01 01 00 03 00 00 00	if r1 == 0x3 goto +0x1 <LBB220_22>
    2470	bf 18 00 00 00 00 00 00	r8 = r1

0000000000004d38 <LBB220_22>
    2471	1f 69 00 00 00 00 00 00	r9 -= r6
    2472	57 08 00 00 03 00 00 00	r8 &= 0x3
    2473	7b 9a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r9
    2474	15 08 5b 00 00 00 00 00	if r8 == 0x0 goto +0x5b <LBB220_25>
    2475	15 08 57 00 01 00 00 00	if r8 == 0x1 goto +0x57 <LBB220_44>
    2476	bf 98 00 00 00 00 00 00	r8 = r9
    2477	77 08 00 00 01 00 00 00	r8 >>= 0x1
    2478	07 09 00 00 01 00 00 00	r9 += 0x1
    2479	77 09 00 00 01 00 00 00	r9 >>= 0x1
    2480	7b 9a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r9
    2481	05 00 54 00 00 00 00 00	goto +0x54 <LBB220_25>

0000000000004d90 <LBB220_6>
    2482	b7 01 00 00 20 00 00 00	r1 = 0x20
    2483	7b 4a d8 ff 00 00 00 00	*(u64 *)(r10 - 0x28) = r4
    2484	7b 3a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r3
    2485	2d 01 18 00 00 00 00 00	if r1 > r0 goto +0x18 <LBB220_8>
    2486	bf 31 00 00 00 00 00 00	r1 = r3
    2487	bf 08 00 00 00 00 00 00	r8 = r0
    2488	bf 02 00 00 00 00 00 00	r2 = r0
    2489	85 10 00 00 61 04 00 00	call 0x461 ; <core::str::count::do_count_chars>
    2490	05 00 1f 00 00 00 00 00	goto +0x1f <LBB220_13>

0000000000004dd8 <LBB220_18>
    2491	79 48 08 00 00 00 00 00	r8 = *(u64 *)(r4 + 0x8)
    2492	79 46 00 00 00 00 00 00	r6 = *(u64 *)(r4 + 0x0)
    2493	bf 61 00 00 00 00 00 00	r1 = r6
    2494	bf 54 00 00 00 00 00 00	r4 = r5
    2495	bf 82 00 00 00 00 00 00	r2 = r8
    2496	79 a3 f0 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x10)
    2497	bf 05 00 00 00 00 00 00	r5 = r0
    2498	85 10 00 00 7e 00 00 00	call 0x7e ; <core::fmt::Formatter::pad_integral::write_prefix>
    2499	b7 07 00 00 01 00 00 00	r7 = 0x1
    2500	55 00 06 00 00 00 00 00	if r0 != 0x0 goto +0x6 <LBB220_43>

0000000000004e28 <LBB220_19>
    2501	79 84 18 00 00 00 00 00	r4 = *(u64 *)(r8 + 0x18)
    2502	bf 61 00 00 00 00 00 00	r1 = r6
    2503	79 a2 e0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x20)
    2504	79 a3 e8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x18)
    2505	8d 00 00 00 04 00 00 00	callx r4
    2506	bf 07 00 00 00 00 00 00	r7 = r0

0000000000004e58 <LBB220_43>
    2507	57 07 00 00 01 00 00 00	r7 &= 0x1
    2508	bf 70 00 00 00 00 00 00	r0 = r7
    2509	95 00 00 00 00 00 00 00	exit

0000000000004e70 <LBB220_8>
    2510	bf 01 00 00 00 00 00 00	r1 = r0
    2511	b7 00 00 00 00 00 00 00	r0 = 0x0
    2512	bf 18 00 00 00 00 00 00	r8 = r1
    2513	15 01 08 00 00 00 00 00	if r1 == 0x0 goto +0x8 <LBB220_13>
    2514	b7 00 00 00 00 00 00 00	r0 = 0x0
    2515	bf 81 00 00 00 00 00 00	r1 = r8
    2516	79 a2 f8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x8)
    2517	05 00 0a 00 00 00 00 00	goto +0xa <LBB220_10>

0000000000004eb0 <LBB220_12>
    2518	0f 30 00 00 00 00 00 00	r0 += r3
    2519	07 02 00 00 01 00 00 00	r2 += 0x1
    2520	07 01 00 00 ff ff ff ff	r1 += -0x1
    2521	55 01 06 00 00 00 00 00	if r1 != 0x0 goto +0x6 <LBB220_10>

0000000000004ed0 <LBB220_13>
    2522	0f 60 00 00 00 00 00 00	r0 += r6
    2523	79 a5 f8 ff 00 00 00 00	r5 = *(u64 *)(r10 - 0x8)
    2524	bf 06 00 00 00 00 00 00	r6 = r0
    2525	bf 80 00 00 00 00 00 00	r0 = r8
    2526	79 a4 d8 ff 00 00 00 00	r4 = *(u64 *)(r10 - 0x28)
    2527	05 00 af ff 00 00 00 00	goto -0x51 <LBB220_14>

0000000000004f00 <LBB220_10>
    2528	71 24 00 00 00 00 00 00	r4 = *(u8 *)(r2 + 0x0)
    2529	67 04 00 00 38 00 00 00	r4 <<= 0x38
    2530	c7 04 00 00 38 00 00 00	r4 s>>= 0x38
    2531	b7 03 00 00 01 00 00 00	r3 = 0x1
    2532	65 04 f1 ff bf ff ff ff	if r4 s> -0x41 goto -0xf <LBB220_12>
    2533	b7 03 00 00 00 00 00 00	r3 = 0x0
    2534	05 00 ef ff 00 00 00 00	goto -0x11 <LBB220_12>

0000000000004f38 <LBB220_29>
    2535	61 41 34 00 00 00 00 00	r1 = *(u32 *)(r4 + 0x34)
    2536	7b 1a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r1
    2537	b7 01 00 00 30 00 00 00	r1 = 0x30
    2538	63 14 34 00 00 00 00 00	*(u32 *)(r4 + 0x34) = r1
    2539	71 41 38 00 00 00 00 00	r1 = *(u8 *)(r4 + 0x38)
    2540	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 0x38) = r1
    2541	b7 07 00 00 01 00 00 00	r7 = 0x1
    2542	73 74 38 00 00 00 00 00	*(u8 *)(r4 + 0x38) = r7
    2543	79 41 00 00 00 00 00 00	r1 = *(u64 *)(r4 + 0x0)
    2544	7b 4a d8 ff 00 00 00 00	*(u64 *)(r10 - 0x28) = r4
    2545	79 42 08 00 00 00 00 00	r2 = *(u64 *)(r4 + 0x8)
    2546	7b 1a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r1
    2547	bf 54 00 00 00 00 00 00	r4 = r5
    2548	bf 28 00 00 00 00 00 00	r8 = r2
    2549	79 a3 f0 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x10)
    2550	bf 05 00 00 00 00 00 00	r5 = r0
    2551	85 10 00 00 49 00 00 00	call 0x49 ; <core::fmt::Formatter::pad_integral::write_prefix>
    2552	55 00 d2 ff 00 00 00 00	if r0 != 0x0 goto -0x2e <LBB220_43>
    2553	1f 69 00 00 00 00 00 00	r9 -= r6
    2554	07 09 00 00 01 00 00 00	r9 += 0x1

0000000000004fd8 <LBB220_31>
    2555	07 09 00 00 ff ff ff ff	r9 += -0x1
    2556	15 09 38 00 00 00 00 00	if r9 == 0x0 goto +0x38 <LBB220_33>
    2557	79 83 20 00 00 00 00 00	r3 = *(u64 *)(r8 + 0x20)
    2558	79 a1 f8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x8)
    2559	b7 02 00 00 30 00 00 00	r2 = 0x30
    2560	8d 00 00 00 03 00 00 00	callx r3
    2561	55 00 c9 ff 00 00 00 00	if r0 != 0x0 goto -0x37 <LBB220_43>
    2562	05 00 f8 ff 00 00 00 00	goto -0x8 <LBB220_31>

0000000000005018 <LBB220_44>
    2563	b7 01 00 00 00 00 00 00	r1 = 0x0
    2564	7b 1a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r1
    2565	bf 98 00 00 00 00 00 00	r8 = r9

0000000000005030 <LBB220_25>
    2566	7b 5a c0 ff 00 00 00 00	*(u64 *)(r10 - 0x40) = r5
    2567	07 08 00 00 01 00 00 00	r8 += 0x1
    2568	61 41 34 00 00 00 00 00	r1 = *(u32 *)(r4 + 0x34)
    2569	7b 1a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r1
    2570	79 46 08 00 00 00 00 00	r6 = *(u64 *)(r4 + 0x8)
    2571	79 49 00 00 00 00 00 00	r9 = *(u64 *)(r4 + 0x0)
    2572	b7 07 00 00 01 00 00 00	r7 = 0x1

0000000000005068 <LBB220_26>
    2573	07 08 00 00 ff ff ff ff	r8 += -0x1
    2574	15 08 06 00 00 00 00 00	if r8 == 0x0 goto +0x6 <LBB220_28>
    2575	79 63 20 00 00 00 00 00	r3 = *(u64 *)(r6 + 0x20)
    2576	bf 91 00 00 00 00 00 00	r1 = r9
    2577	79 a2 f8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x8)
    2578	8d 00 00 00 03 00 00 00	callx r3
    2579	55 00 b7 ff 00 00 00 00	if r0 != 0x0 goto -0x49 <LBB220_43>
    2580	05 00 f8 ff 00 00 00 00	goto -0x8 <LBB220_26>

00000000000050a8 <LBB220_28>
    2581	b7 07 00 00 01 00 00 00	r7 = 0x1
    2582	79 a1 f8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x8)
    2583	15 01 b3 ff 00 00 11 00	if r1 == 0x110000 goto -0x4d <LBB220_43>
    2584	bf 91 00 00 00 00 00 00	r1 = r9
    2585	bf 62 00 00 00 00 00 00	r2 = r6
    2586	79 a3 f0 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x10)
    2587	79 a4 c0 ff 00 00 00 00	r4 = *(u64 *)(r10 - 0x40)
    2588	79 a5 c8 ff 00 00 00 00	r5 = *(u64 *)(r10 - 0x38)
    2589	85 10 00 00 23 00 00 00	call 0x23 ; <core::fmt::Formatter::pad_integral::write_prefix>
    2590	55 00 ac ff 00 00 00 00	if r0 != 0x0 goto -0x54 <LBB220_43>
    2591	79 64 18 00 00 00 00 00	r4 = *(u64 *)(r6 + 0x18)
    2592	bf 91 00 00 00 00 00 00	r1 = r9
    2593	79 a2 e0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x20)
    2594	79 a3 e8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x18)
    2595	8d 00 00 00 04 00 00 00	callx r4
    2596	55 00 a6 ff 00 00 00 00	if r0 != 0x0 goto -0x5a <LBB220_43>
    2597	b7 07 00 00 00 00 00 00	r7 = 0x0
    2598	79 a8 d0 ff 00 00 00 00	r8 = *(u64 *)(r10 - 0x30)

0000000000005138 <LBB220_38>
    2599	bf 81 00 00 00 00 00 00	r1 = r8
    2600	1d 78 08 00 00 00 00 00	if r8 == r7 goto +0x8 <LBB220_41>
    2601	79 63 20 00 00 00 00 00	r3 = *(u64 *)(r6 + 0x20)
    2602	bf 91 00 00 00 00 00 00	r1 = r9
    2603	79 a2 f8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x8)
    2604	8d 00 00 00 03 00 00 00	callx r3
    2605	07 07 00 00 01 00 00 00	r7 += 0x1
    2606	15 00 f8 ff 00 00 00 00	if r0 == 0x0 goto -0x8 <LBB220_38>
    2607	07 07 00 00 ff ff ff ff	r7 += -0x1
    2608	bf 71 00 00 00 00 00 00	r1 = r7

0000000000005188 <LBB220_41>
    2609	b7 07 00 00 01 00 00 00	r7 = 0x1
    2610	2d 18 98 ff 00 00 00 00	if r8 > r1 goto -0x68 <LBB220_43>

0000000000005198 <LBB220_42>
    2611	b7 07 00 00 00 00 00 00	r7 = 0x0
    2612	05 00 96 ff 00 00 00 00	goto -0x6a <LBB220_43>

00000000000051a8 <LBB220_33>
    2613	79 84 18 00 00 00 00 00	r4 = *(u64 *)(r8 + 0x18)
    2614	79 a1 f8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x8)
    2615	79 a2 e0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x20)
    2616	79 a3 e8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x18)
    2617	8d 00 00 00 04 00 00 00	callx r4
    2618	55 00 90 ff 00 00 00 00	if r0 != 0x0 goto -0x70 <LBB220_43>
    2619	79 a8 d8 ff 00 00 00 00	r8 = *(u64 *)(r10 - 0x28)
    2620	79 a1 c8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x38)
    2621	73 18 38 00 00 00 00 00	*(u8 *)(r8 + 0x38) = r1
    2622	79 a1 d0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x30)
    2623	63 18 34 00 00 00 00 00	*(u32 *)(r8 + 0x34) = r1
    2624	05 00 f2 ff 00 00 00 00	goto -0xe <LBB220_42>

0000000000005208 <core::fmt::Formatter::pad_integral::write_prefix>
    2625	bf 56 00 00 00 00 00 00	r6 = r5
    2626	bf 47 00 00 00 00 00 00	r7 = r4
    2627	bf 29 00 00 00 00 00 00	r9 = r2
    2628	bf 18 00 00 00 00 00 00	r8 = r1
    2629	bf 31 00 00 00 00 00 00	r1 = r3
    2630	67 01 00 00 20 00 00 00	r1 <<= 0x20
    2631	77 01 00 00 20 00 00 00	r1 >>= 0x20
    2632	15 01 07 00 00 00 11 00	if r1 == 0x110000 goto +0x7 <LBB221_2>
    2633	79 94 20 00 00 00 00 00	r4 = *(u64 *)(r9 + 0x20)
    2634	bf 81 00 00 00 00 00 00	r1 = r8
    2635	bf 32 00 00 00 00 00 00	r2 = r3
    2636	8d 00 00 00 04 00 00 00	callx r4
    2637	bf 01 00 00 00 00 00 00	r1 = r0
    2638	b7 00 00 00 01 00 00 00	r0 = 0x1
    2639	55 01 02 00 00 00 00 00	if r1 != 0x0 goto +0x2 <LBB221_3>

0000000000005280 <LBB221_2>
    2640	b7 00 00 00 00 00 00 00	r0 = 0x0
    2641	55 07 01 00 00 00 00 00	if r7 != 0x0 goto +0x1 <LBB221_4>

0000000000005290 <LBB221_3>
    2642	95 00 00 00 00 00 00 00	exit

0000000000005298 <LBB221_4>
    2643	79 94 18 00 00 00 00 00	r4 = *(u64 *)(r9 + 0x18)
    2644	bf 81 00 00 00 00 00 00	r1 = r8
    2645	bf 72 00 00 00 00 00 00	r2 = r7
    2646	bf 63 00 00 00 00 00 00	r3 = r6
    2647	8d 00 00 00 04 00 00 00	callx r4
    2648	05 00 f9 ff 00 00 00 00	goto -0x7 <LBB221_3>

00000000000052c8 <core::fmt::Formatter::pad>
    2649	bf 15 00 00 00 00 00 00	r5 = r1
    2650	79 51 20 00 00 00 00 00	r1 = *(u64 *)(r5 + 0x20)
    2651	79 54 10 00 00 00 00 00	r4 = *(u64 *)(r5 + 0x10)
    2652	15 04 01 00 01 00 00 00	if r4 == 0x1 goto +0x1 <LBB222_2>
    2653	55 01 10 00 01 00 00 00	if r1 != 0x1 goto +0x10 <LBB222_3>

00000000000052f0 <LBB222_2>
    2654	7b 3a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r3
    2655	7b 4a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r4
    2656	7b 5a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r5
    2657	7b 2a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r2
    2658	15 01 01 00 01 00 00 00	if r1 == 0x1 goto +0x1 <LBB222_6>
    2659	05 00 5e 00 00 00 00 00	goto +0x5e <LBB222_20>

0000000000005320 <LBB222_6>
    2660	79 a6 e8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 0x18)
    2661	bf 64 00 00 00 00 00 00	r4 = r6
    2662	79 a1 f0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x10)
    2663	0f 14 00 00 00 00 00 00	r4 += r1
    2664	b7 02 00 00 00 00 00 00	r2 = 0x0
    2665	79 a1 e0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x20)
    2666	79 15 28 00 00 00 00 00	r5 = *(u64 *)(r1 + 0x28)
    2667	07 05 00 00 01 00 00 00	r5 += 0x1
    2668	7b 4a d8 ff 00 00 00 00	*(u64 *)(r10 - 0x28) = r4
    2669	05 00 1f 00 00 00 00 00	goto +0x1f <LBB222_7>

0000000000005370 <LBB222_3>
    2670	79 51 00 00 00 00 00 00	r1 = *(u64 *)(r5 + 0x0)
    2671	79 54 08 00 00 00 00 00	r4 = *(u64 *)(r5 + 0x8)
    2672	79 44 18 00 00 00 00 00	r4 = *(u64 *)(r4 + 0x18)
    2673	05 00 33 00 00 00 00 00	goto +0x33 <LBB222_4>

0000000000005390 <LBB222_12>
    2674	67 07 00 00 06 00 00 00	r7 <<= 0x6
    2675	71 36 02 00 00 00 00 00	r6 = *(u8 *)(r3 + 0x2)
    2676	57 06 00 00 3f 00 00 00	r6 &= 0x3f
    2677	4f 67 00 00 00 00 00 00	r7 |= r6
    2678	bf 36 00 00 00 00 00 00	r6 = r3
    2679	07 06 00 00 03 00 00 00	r6 += 0x3
    2680	bf 18 00 00 00 00 00 00	r8 = r1
    2681	67 08 00 00 0c 00 00 00	r8 <<= 0xc
    2682	bf 79 00 00 00 00 00 00	r9 = r7
    2683	4f 89 00 00 00 00 00 00	r9 |= r8
    2684	79 a4 d8 ff 00 00 00 00	r4 = *(u64 *)(r10 - 0x28)
    2685	b7 08 00 00 f0 00 00 00	r8 = 0xf0
    2686	2d 08 0b 00 00 00 00 00	if r8 > r0 goto +0xb <LBB222_14>
    2687	67 07 00 00 06 00 00 00	r7 <<= 0x6
    2688	71 30 03 00 00 00 00 00	r0 = *(u8 *)(r3 + 0x3)
    2689	57 00 00 00 3f 00 00 00	r0 &= 0x3f
    2690	4f 07 00 00 00 00 00 00	r7 |= r0
    2691	67 01 00 00 12 00 00 00	r1 <<= 0x12
    2692	57 01 00 00 00 00 1c 00	r1 &= 0x1c0000
    2693	4f 17 00 00 00 00 00 00	r7 |= r1
    2694	bf 36 00 00 00 00 00 00	r6 = r3
    2695	07 06 00 00 04 00 00 00	r6 += 0x4
    2696	bf 79 00 00 00 00 00 00	r9 = r7
    2697	15 07 38 00 00 00 11 00	if r7 == 0x110000 goto +0x38 <LBB222_20>

0000000000005450 <LBB222_14>
    2698	1f 32 00 00 00 00 00 00	r2 -= r3
    2699	0f 62 00 00 00 00 00 00	r2 += r6
    2700	15 09 35 00 00 00 11 00	if r9 == 0x110000 goto +0x35 <LBB222_20>

0000000000005468 <LBB222_7>
    2701	bf 63 00 00 00 00 00 00	r3 = r6
    2702	07 05 00 00 ff ff ff ff	r5 += -0x1
    2703	15 05 1a 00 00 00 00 00	if r5 == 0x0 goto +0x1a <LBB222_15>
    2704	1d 43 31 00 00 00 00 00	if r3 == r4 goto +0x31 <LBB222_20>
    2705	71 30 00 00 00 00 00 00	r0 = *(u8 *)(r3 + 0x0)
    2706	bf 01 00 00 00 00 00 00	r1 = r0
    2707	67 01 00 00 38 00 00 00	r1 <<= 0x38
    2708	c7 01 00 00 38 00 00 00	r1 s>>= 0x38
    2709	65 01 0b 00 ff ff ff ff	if r1 s> -0x1 goto +0xb <LBB222_11>
    2710	bf 36 00 00 00 00 00 00	r6 = r3
    2711	07 06 00 00 02 00 00 00	r6 += 0x2
    2712	71 37 01 00 00 00 00 00	r7 = *(u8 *)(r3 + 0x1)
    2713	57 07 00 00 3f 00 00 00	r7 &= 0x3f
    2714	bf 01 00 00 00 00 00 00	r1 = r0
    2715	57 01 00 00 1f 00 00 00	r1 &= 0x1f
    2716	bf 19 00 00 00 00 00 00	r9 = r1
    2717	67 09 00 00 06 00 00 00	r9 <<= 0x6
    2718	4f 79 00 00 00 00 00 00	r9 |= r7
    2719	25 00 d2 ff df 00 00 00	if r0 > 0xdf goto -0x2e <LBB222_12>
    2720	05 00 e9 ff 00 00 00 00	goto -0x17 <LBB222_14>

0000000000005508 <LBB222_11>
    2721	bf 36 00 00 00 00 00 00	r6 = r3
    2722	07 06 00 00 01 00 00 00	r6 += 0x1
    2723	bf 09 00 00 00 00 00 00	r9 = r0
    2724	05 00 e5 ff 00 00 00 00	goto -0x1b <LBB222_14>

0000000000005528 <LBB222_4>
    2725	8d 00 00 00 04 00 00 00	callx r4
    2726	bf 06 00 00 00 00 00 00	r6 = r0

0000000000005538 <LBB222_5>
    2727	57 06 00 00 01 00 00 00	r6 &= 0x1
    2728	bf 60 00 00 00 00 00 00	r0 = r6
    2729	95 00 00 00 00 00 00 00	exit

0000000000005550 <LBB222_15>
    2730	1d 43 17 00 00 00 00 00	if r3 == r4 goto +0x17 <LBB222_20>
    2731	71 34 00 00 00 00 00 00	r4 = *(u8 *)(r3 + 0x0)
    2732	bf 41 00 00 00 00 00 00	r1 = r4
    2733	67 01 00 00 38 00 00 00	r1 <<= 0x38
    2734	c7 01 00 00 38 00 00 00	r1 s>>= 0x38
    2735	65 01 7d 00 ff ff ff ff	if r1 s> -0x1 goto +0x7d <LBB222_21>
    2736	b7 01 00 00 e0 00 00 00	r1 = 0xe0
    2737	2d 41 7b 00 00 00 00 00	if r1 > r4 goto +0x7b <LBB222_21>
    2738	b7 01 00 00 f0 00 00 00	r1 = 0xf0
    2739	2d 41 79 00 00 00 00 00	if r1 > r4 goto +0x79 <LBB222_21>
    2740	71 31 01 00 00 00 00 00	r1 = *(u8 *)(r3 + 0x1)
    2741	57 01 00 00 3f 00 00 00	r1 &= 0x3f
    2742	67 01 00 00 0c 00 00 00	r1 <<= 0xc
    2743	71 35 02 00 00 00 00 00	r5 = *(u8 *)(r3 + 0x2)
    2744	57 05 00 00 3f 00 00 00	r5 &= 0x3f
    2745	67 05 00 00 06 00 00 00	r5 <<= 0x6
    2746	4f 15 00 00 00 00 00 00	r5 |= r1
    2747	71 31 03 00 00 00 00 00	r1 = *(u8 *)(r3 + 0x3)
    2748	57 01 00 00 3f 00 00 00	r1 &= 0x3f
    2749	4f 15 00 00 00 00 00 00	r5 |= r1
    2750	67 04 00 00 12 00 00 00	r4 <<= 0x12
    2751	57 04 00 00 00 00 1c 00	r4 &= 0x1c0000
    2752	4f 45 00 00 00 00 00 00	r5 |= r4
    2753	55 05 6b 00 00 00 11 00	if r5 != 0x110000 goto +0x6b <LBB222_21>

0000000000005610 <LBB222_20>
    2754	79 a1 f8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x8)
    2755	15 01 0a 00 00 00 00 00	if r1 == 0x0 goto +0xa <LBB222_31>
    2756	79 a9 e0 ff 00 00 00 00	r9 = *(u64 *)(r10 - 0x20)
    2757	79 96 18 00 00 00 00 00	r6 = *(u64 *)(r9 + 0x18)
    2758	b7 01 00 00 20 00 00 00	r1 = 0x20
    2759	79 a8 f0 ff 00 00 00 00	r8 = *(u64 *)(r10 - 0x10)
    2760	2d 81 0c 00 00 00 00 00	if r1 > r8 goto +0xc <LBB222_34>
    2761	79 a7 e8 ff 00 00 00 00	r7 = *(u64 *)(r10 - 0x18)
    2762	bf 71 00 00 00 00 00 00	r1 = r7
    2763	bf 82 00 00 00 00 00 00	r2 = r8
    2764	85 10 00 00 4e 03 00 00	call 0x34e ; <core::str::count::do_count_chars>
    2765	05 00 12 00 00 00 00 00	goto +0x12 <LBB222_39>

0000000000005670 <LBB222_31>
    2766	79 a2 e0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x20)
    2767	79 21 00 00 00 00 00 00	r1 = *(u64 *)(r2 + 0x0)
    2768	79 22 08 00 00 00 00 00	r2 = *(u64 *)(r2 + 0x8)
    2769	79 24 18 00 00 00 00 00	r4 = *(u64 *)(r2 + 0x18)
    2770	79 a2 e8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x18)
    2771	79 a3 f0 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x10)
    2772	05 00 d0 ff 00 00 00 00	goto -0x30 <LBB222_4>

00000000000056a8 <LBB222_34>
    2773	b7 00 00 00 00 00 00 00	r0 = 0x0
    2774	79 a7 e8 ff 00 00 00 00	r7 = *(u64 *)(r10 - 0x18)
    2775	15 08 08 00 00 00 00 00	if r8 == 0x0 goto +0x8 <LBB222_39>
    2776	b7 00 00 00 00 00 00 00	r0 = 0x0
    2777	bf 81 00 00 00 00 00 00	r1 = r8
    2778	bf 72 00 00 00 00 00 00	r2 = r7
    2779	05 00 0a 00 00 00 00 00	goto +0xa <LBB222_36>

00000000000056e0 <LBB222_38>
    2780	0f 30 00 00 00 00 00 00	r0 += r3
    2781	07 02 00 00 01 00 00 00	r2 += 0x1
    2782	07 01 00 00 ff ff ff ff	r1 += -0x1
    2783	55 01 06 00 00 00 00 00	if r1 != 0x0 goto +0x6 <LBB222_36>

0000000000005700 <LBB222_39>
    2784	3d 60 0c 00 00 00 00 00	if r0 >= r6 goto +0xc <LBB222_49>
    2785	71 91 38 00 00 00 00 00	r1 = *(u8 *)(r9 + 0x38)
    2786	b7 07 00 00 00 00 00 00	r7 = 0x0
    2787	15 01 0f 00 03 00 00 00	if r1 == 0x3 goto +0xf <LBB222_42>
    2788	bf 17 00 00 00 00 00 00	r7 = r1
    2789	05 00 0d 00 00 00 00 00	goto +0xd <LBB222_42>

0000000000005730 <LBB222_36>
    2790	71 24 00 00 00 00 00 00	r4 = *(u8 *)(r2 + 0x0)
    2791	67 04 00 00 38 00 00 00	r4 <<= 0x38
    2792	c7 04 00 00 38 00 00 00	r4 s>>= 0x38
    2793	b7 03 00 00 01 00 00 00	r3 = 0x1
    2794	65 04 f1 ff bf ff ff ff	if r4 s> -0x41 goto -0xf <LBB222_38>
    2795	b7 03 00 00 00 00 00 00	r3 = 0x0
    2796	05 00 ef ff 00 00 00 00	goto -0x11 <LBB222_38>

0000000000005768 <LBB222_49>
    2797	79 91 00 00 00 00 00 00	r1 = *(u64 *)(r9 + 0x0)
    2798	79 92 08 00 00 00 00 00	r2 = *(u64 *)(r9 + 0x8)
    2799	79 24 18 00 00 00 00 00	r4 = *(u64 *)(r2 + 0x18)
    2800	bf 72 00 00 00 00 00 00	r2 = r7
    2801	bf 83 00 00 00 00 00 00	r3 = r8
    2802	05 00 b2 ff 00 00 00 00	goto -0x4e <LBB222_4>

0000000000005798 <LBB222_42>
    2803	1f 06 00 00 00 00 00 00	r6 -= r0
    2804	57 07 00 00 03 00 00 00	r7 &= 0x3
    2805	7b 6a d8 ff 00 00 00 00	*(u64 *)(r10 - 0x28) = r6
    2806	15 07 0a 00 00 00 00 00	if r7 == 0x0 goto +0xa <LBB222_45>
    2807	15 07 06 00 01 00 00 00	if r7 == 0x1 goto +0x6 <LBB222_57>
    2808	bf 67 00 00 00 00 00 00	r7 = r6
    2809	77 07 00 00 01 00 00 00	r7 >>= 0x1
    2810	07 06 00 00 01 00 00 00	r6 += 0x1
    2811	77 06 00 00 01 00 00 00	r6 >>= 0x1
    2812	7b 6a d8 ff 00 00 00 00	*(u64 *)(r10 - 0x28) = r6
    2813	05 00 03 00 00 00 00 00	goto +0x3 <LBB222_45>

00000000000057f0 <LBB222_57>
    2814	b7 01 00 00 00 00 00 00	r1 = 0x0
    2815	7b 1a d8 ff 00 00 00 00	*(u64 *)(r10 - 0x28) = r1
    2816	bf 67 00 00 00 00 00 00	r7 = r6

0000000000005808 <LBB222_45>
    2817	7b 8a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r8
    2818	07 07 00 00 01 00 00 00	r7 += 0x1
    2819	bf 91 00 00 00 00 00 00	r1 = r9
    2820	61 19 34 00 00 00 00 00	r9 = *(u32 *)(r1 + 0x34)
    2821	79 12 08 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x8)
    2822	7b 2a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r2
    2823	79 18 00 00 00 00 00 00	r8 = *(u64 *)(r1 + 0x0)
    2824	b7 06 00 00 01 00 00 00	r6 = 0x1

0000000000005848 <LBB222_46>
    2825	07 07 00 00 ff ff ff ff	r7 += -0x1
    2826	15 07 07 00 00 00 00 00	if r7 == 0x0 goto +0x7 <LBB222_48>
    2827	79 a1 f8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x8)
    2828	79 13 20 00 00 00 00 00	r3 = *(u64 *)(r1 + 0x20)
    2829	bf 81 00 00 00 00 00 00	r1 = r8
    2830	bf 92 00 00 00 00 00 00	r2 = r9
    2831	8d 00 00 00 03 00 00 00	callx r3
    2832	55 00 96 ff 00 00 00 00	if r0 != 0x0 goto -0x6a <LBB222_5>
    2833	05 00 f7 ff 00 00 00 00	goto -0x9 <LBB222_46>

0000000000005890 <LBB222_48>
    2834	b7 06 00 00 01 00 00 00	r6 = 0x1
    2835	bf 91 00 00 00 00 00 00	r1 = r9
    2836	15 01 92 ff 00 00 11 00	if r1 == 0x110000 goto -0x6e <LBB222_5>
    2837	79 a1 f8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x8)
    2838	79 14 18 00 00 00 00 00	r4 = *(u64 *)(r1 + 0x18)
    2839	bf 81 00 00 00 00 00 00	r1 = r8
    2840	79 a2 e8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x18)
    2841	79 a3 f0 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x10)
    2842	8d 00 00 00 04 00 00 00	callx r4
    2843	55 00 8b ff 00 00 00 00	if r0 != 0x0 goto -0x75 <LBB222_5>
    2844	b7 06 00 00 00 00 00 00	r6 = 0x0
    2845	79 a7 d8 ff 00 00 00 00	r7 = *(u64 *)(r10 - 0x28)

00000000000058f0 <LBB222_52>
    2846	bf 71 00 00 00 00 00 00	r1 = r7
    2847	1d 67 09 00 00 00 00 00	if r7 == r6 goto +0x9 <LBB222_55>
    2848	79 a1 f8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x8)
    2849	79 13 20 00 00 00 00 00	r3 = *(u64 *)(r1 + 0x20)
    2850	bf 81 00 00 00 00 00 00	r1 = r8
    2851	bf 92 00 00 00 00 00 00	r2 = r9
    2852	8d 00 00 00 03 00 00 00	callx r3
    2853	07 06 00 00 01 00 00 00	r6 += 0x1
    2854	15 00 f7 ff 00 00 00 00	if r0 == 0x0 goto -0x9 <LBB222_52>
    2855	07 06 00 00 ff ff ff ff	r6 += -0x1
    2856	bf 61 00 00 00 00 00 00	r1 = r6

0000000000005948 <LBB222_55>
    2857	b7 06 00 00 01 00 00 00	r6 = 0x1
    2858	2d 17 7c ff 00 00 00 00	if r7 > r1 goto -0x84 <LBB222_5>
    2859	b7 06 00 00 00 00 00 00	r6 = 0x0
    2860	05 00 7a ff 00 00 00 00	goto -0x86 <LBB222_5>

0000000000005968 <LBB222_21>
    2861	79 a5 e8 ff 00 00 00 00	r5 = *(u64 *)(r10 - 0x18)
    2862	79 a0 f0 ff 00 00 00 00	r0 = *(u64 *)(r10 - 0x10)
    2863	15 02 0c 00 00 00 00 00	if r2 == 0x0 goto +0xc <LBB222_25>
    2864	2d 20 03 00 00 00 00 00	if r0 > r2 goto +0x3 <LBB222_24>
    2865	b7 01 00 00 00 00 00 00	r1 = 0x0
    2866	1d 02 09 00 00 00 00 00	if r2 == r0 goto +0x9 <LBB222_25>
    2867	05 00 09 00 00 00 00 00	goto +0x9 <LBB222_26>

00000000000059a0 <LBB222_24>
    2868	bf 53 00 00 00 00 00 00	r3 = r5
    2869	0f 23 00 00 00 00 00 00	r3 += r2
    2870	b7 01 00 00 00 00 00 00	r1 = 0x0
    2871	71 33 00 00 00 00 00 00	r3 = *(u8 *)(r3 + 0x0)
    2872	67 03 00 00 38 00 00 00	r3 <<= 0x38
    2873	c7 03 00 00 38 00 00 00	r3 s>>= 0x38
    2874	b7 04 00 00 c0 ff ff ff	r4 = -0x40
    2875	6d 34 01 00 00 00 00 00	if r4 s> r3 goto +0x1 <LBB222_26>

00000000000059e0 <LBB222_25>
    2876	bf 51 00 00 00 00 00 00	r1 = r5

00000000000059e8 <LBB222_26>
    2877	15 01 01 00 00 00 00 00	if r1 == 0x0 goto +0x1 <LBB222_28>
    2878	bf 20 00 00 00 00 00 00	r0 = r2

00000000000059f8 <LBB222_28>
    2879	7b 0a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r0
    2880	15 01 01 00 00 00 00 00	if r1 == 0x0 goto +0x1 <LBB222_30>
    2881	bf 15 00 00 00 00 00 00	r5 = r1

0000000000005a10 <LBB222_30>
    2882	7b 5a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r5
    2883	05 00 7e ff 00 00 00 00	goto -0x82 <LBB222_20>

0000000000005a20 <<core::fmt::Formatter as core::fmt::Write>::write_str>
    2884	79 14 00 00 00 00 00 00	r4 = *(u64 *)(r1 + 0x0)
    2885	79 11 08 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x8)
    2886	79 15 18 00 00 00 00 00	r5 = *(u64 *)(r1 + 0x18)
    2887	bf 41 00 00 00 00 00 00	r1 = r4
    2888	8d 00 00 00 05 00 00 00	callx r5
    2889	95 00 00 00 00 00 00 00	exit

0000000000005a50 <core::fmt::Formatter::debug_lower_hex>
    2890	61 10 30 00 00 00 00 00	r0 = *(u32 *)(r1 + 0x30)
    2891	57 00 00 00 10 00 00 00	r0 &= 0x10
    2892	77 00 00 00 04 00 00 00	r0 >>= 0x4
    2893	95 00 00 00 00 00 00 00	exit

0000000000005a70 <core::fmt::Formatter::debug_upper_hex>
    2894	61 10 30 00 00 00 00 00	r0 = *(u32 *)(r1 + 0x30)
    2895	57 00 00 00 20 00 00 00	r0 &= 0x20
    2896	77 00 00 00 05 00 00 00	r0 >>= 0x5
    2897	95 00 00 00 00 00 00 00	exit

0000000000005a90 <core::fmt::Formatter::debug_tuple_field1_finish>
    2898	bf 56 00 00 00 00 00 00	r6 = r5
    2899	bf 47 00 00 00 00 00 00	r7 = r4
    2900	bf 38 00 00 00 00 00 00	r8 = r3
    2901	bf 19 00 00 00 00 00 00	r9 = r1
    2902	79 91 08 00 00 00 00 00	r1 = *(u64 *)(r9 + 0x8)
    2903	79 14 18 00 00 00 00 00	r4 = *(u64 *)(r1 + 0x18)
    2904	79 91 00 00 00 00 00 00	r1 = *(u64 *)(r9 + 0x0)
    2905	8d 00 00 00 04 00 00 00	callx r4
    2906	73 0a f8 ff 00 00 00 00	*(u8 *)(r10 - 0x8) = r0
    2907	7b 9a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r9
    2908	b7 01 00 00 00 00 00 00	r1 = 0x0
    2909	b7 02 00 00 01 00 00 00	r2 = 0x1
    2910	15 08 01 00 00 00 00 00	if r8 == 0x0 goto +0x1 <LBB246_2>
    2911	b7 02 00 00 00 00 00 00	r2 = 0x0

0000000000005b00 <LBB246_2>
    2912	73 2a f9 ff 00 00 00 00	*(u8 *)(r10 - 0x7) = r2
    2913	7b 1a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r1
    2914	bf a1 00 00 00 00 00 00	r1 = r10
    2915	07 01 00 00 e8 ff ff ff	r1 += -0x18
    2916	bf 72 00 00 00 00 00 00	r2 = r7
    2917	bf 63 00 00 00 00 00 00	r3 = r6
    2918	85 10 00 00 82 fc ff ff	call -0x37e ; <core::fmt::builders::DebugTuple::field>
    2919	71 a6 f8 ff 00 00 00 00	r6 = *(u8 *)(r10 - 0x8)
    2920	79 a1 e8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x18)
    2921	15 01 1c 00 00 00 00 00	if r1 == 0x0 goto +0x1c <LBB246_9>
    2922	bf 62 00 00 00 00 00 00	r2 = r6
    2923	b7 06 00 00 01 00 00 00	r6 = 0x1
    2924	55 02 19 00 00 00 00 00	if r2 != 0x0 goto +0x19 <LBB246_9>
    2925	79 a7 f0 ff 00 00 00 00	r7 = *(u64 *)(r10 - 0x10)
    2926	55 01 05 00 01 00 00 00	if r1 != 0x1 goto +0x5 <LBB246_7>
    2927	71 a1 f9 ff 00 00 00 00	r1 = *(u8 *)(r10 - 0x7)
    2928	15 01 03 00 00 00 00 00	if r1 == 0x0 goto +0x3 <LBB246_7>
    2929	61 71 30 00 00 00 00 00	r1 = *(u32 *)(r7 + 0x30)
    2930	57 01 00 00 04 00 00 00	r1 &= 0x4
    2931	15 01 09 00 00 00 00 00	if r1 == 0x0 goto +0x9 <LBB246_8>

0000000000005ba0 <LBB246_7>
    2932	79 71 00 00 00 00 00 00	r1 = *(u64 *)(r7 + 0x0)
    2933	79 72 08 00 00 00 00 00	r2 = *(u64 *)(r7 + 0x8)
    2934	79 24 18 00 00 00 00 00	r4 = *(u64 *)(r2 + 0x18)
    2935	18 02 00 00 0b 97 00 00 00 00 00 00 00 00 00 00	r2 = 0x970b ll
    2937	b7 03 00 00 01 00 00 00	r3 = 0x1
    2938	8d 00 00 00 04 00 00 00	callx r4
    2939	bf 06 00 00 00 00 00 00	r6 = r0
    2940	05 00 09 00 00 00 00 00	goto +0x9 <LBB246_9>

0000000000005be8 <LBB246_8>
    2941	79 71 00 00 00 00 00 00	r1 = *(u64 *)(r7 + 0x0)
    2942	79 72 08 00 00 00 00 00	r2 = *(u64 *)(r7 + 0x8)
    2943	79 24 18 00 00 00 00 00	r4 = *(u64 *)(r2 + 0x18)
    2944	b7 06 00 00 01 00 00 00	r6 = 0x1
    2945	18 02 00 00 a3 97 00 00 00 00 00 00 00 00 00 00	r2 = 0x97a3 ll
    2947	b7 03 00 00 01 00 00 00	r3 = 0x1
    2948	8d 00 00 00 04 00 00 00	callx r4
    2949	15 00 ee ff 00 00 00 00	if r0 == 0x0 goto -0x12 <LBB246_7>

0000000000005c30 <LBB246_9>
    2950	57 06 00 00 ff 00 00 00	r6 &= 0xff
    2951	b7 00 00 00 01 00 00 00	r0 = 0x1
    2952	55 06 01 00 00 00 00 00	if r6 != 0x0 goto +0x1 <LBB246_11>
    2953	b7 00 00 00 00 00 00 00	r0 = 0x0

0000000000005c50 <LBB246_11>
    2954	95 00 00 00 00 00 00 00	exit

0000000000005c58 <<str as core::fmt::Debug>::fmt>
    2955	7b 2a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r2
    2956	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
    2957	79 37 00 00 00 00 00 00	r7 = *(u64 *)(r3 + 0x0)
    2958	79 31 08 00 00 00 00 00	r1 = *(u64 *)(r3 + 0x8)
    2959	7b 1a d8 ff 00 00 00 00	*(u64 *)(r10 - 0x28) = r1
    2960	79 13 20 00 00 00 00 00	r3 = *(u64 *)(r1 + 0x20)
    2961	bf 71 00 00 00 00 00 00	r1 = r7
    2962	b7 02 00 00 22 00 00 00	r2 = 0x22
    2963	7b 3a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r3
    2964	8d 00 00 00 03 00 00 00	callx r3
    2965	b7 01 00 00 01 00 00 00	r1 = 0x1
    2966	7b 1a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r1
    2967	55 00 1c 01 00 00 00 00	if r0 != 0x0 goto +0x11c <LBB260_70>
    2968	b7 01 00 00 00 00 00 00	r1 = 0x0
    2969	79 a8 e0 ff 00 00 00 00	r8 = *(u64 *)(r10 - 0x20)
    2970	15 08 0b 01 00 00 00 00	if r8 == 0x0 goto +0x10b <LBB260_13>
    2971	79 a1 f0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x10)
    2972	bf 12 00 00 00 00 00 00	r2 = r1
    2973	0f 82 00 00 00 00 00 00	r2 += r8
    2974	7b 2a a8 ff 00 00 00 00	*(u64 *)(r10 - 0x58) = r2
    2975	b7 02 00 00 00 00 00 00	r2 = 0x0
    2976	7b 2a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r2
    2977	bf 10 00 00 00 00 00 00	r0 = r1
    2978	b7 04 00 00 00 00 00 00	r4 = 0x0

0000000000005d18 <LBB260_3>
    2979	71 02 00 00 00 00 00 00	r2 = *(u8 *)(r0 + 0x0)
    2980	bf 21 00 00 00 00 00 00	r1 = r2
    2981	67 01 00 00 38 00 00 00	r1 <<= 0x38
    2982	c7 01 00 00 38 00 00 00	r1 s>>= 0x38
    2983	65 01 23 00 ff ff ff ff	if r1 s> -0x1 goto +0x23 <LBB260_14>
    2984	bf 09 00 00 00 00 00 00	r9 = r0
    2985	07 09 00 00 02 00 00 00	r9 += 0x2
    2986	71 06 01 00 00 00 00 00	r6 = *(u8 *)(r0 + 0x1)
    2987	57 06 00 00 3f 00 00 00	r6 &= 0x3f
    2988	bf 23 00 00 00 00 00 00	r3 = r2
    2989	57 03 00 00 1f 00 00 00	r3 &= 0x1f
    2990	bf 31 00 00 00 00 00 00	r1 = r3
    2991	67 01 00 00 06 00 00 00	r1 <<= 0x6
    2992	4f 61 00 00 00 00 00 00	r1 |= r6
    2993	25 02 01 00 df 00 00 00	if r2 > 0xdf goto +0x1 <LBB260_5>
    2994	05 00 1b 00 00 00 00 00	goto +0x1b <LBB260_15>

0000000000005d98 <LBB260_5>
    2995	67 06 00 00 06 00 00 00	r6 <<= 0x6
    2996	71 05 02 00 00 00 00 00	r5 = *(u8 *)(r0 + 0x2)
    2997	57 05 00 00 3f 00 00 00	r5 &= 0x3f
    2998	4f 56 00 00 00 00 00 00	r6 |= r5
    2999	bf 09 00 00 00 00 00 00	r9 = r0
    3000	07 09 00 00 03 00 00 00	r9 += 0x3
    3001	bf 35 00 00 00 00 00 00	r5 = r3
    3002	67 05 00 00 0c 00 00 00	r5 <<= 0xc
    3003	bf 61 00 00 00 00 00 00	r1 = r6
    3004	4f 51 00 00 00 00 00 00	r1 |= r5
    3005	b7 05 00 00 f0 00 00 00	r5 = 0xf0
    3006	2d 25 0f 00 00 00 00 00	if r5 > r2 goto +0xf <LBB260_15>
    3007	67 06 00 00 06 00 00 00	r6 <<= 0x6
    3008	71 92 00 00 00 00 00 00	r2 = *(u8 *)(r9 + 0x0)
    3009	57 02 00 00 3f 00 00 00	r2 &= 0x3f
    3010	4f 26 00 00 00 00 00 00	r6 |= r2
    3011	67 03 00 00 12 00 00 00	r3 <<= 0x12
    3012	57 03 00 00 00 00 1c 00	r3 &= 0x1c0000
    3013	4f 36 00 00 00 00 00 00	r6 |= r3
    3014	15 06 d8 00 00 00 11 00	if r6 == 0x110000 goto +0xd8 <LBB260_8>
    3015	bf 09 00 00 00 00 00 00	r9 = r0
    3016	07 09 00 00 04 00 00 00	r9 += 0x4
    3017	bf 61 00 00 00 00 00 00	r1 = r6
    3018	05 00 03 00 00 00 00 00	goto +0x3 <LBB260_15>

0000000000005e58 <LBB260_14>
    3019	bf 09 00 00 00 00 00 00	r9 = r0
    3020	07 09 00 00 01 00 00 00	r9 += 0x1
    3021	bf 21 00 00 00 00 00 00	r1 = r2

0000000000005e70 <LBB260_15>
    3022	b7 06 00 00 02 00 11 00	r6 = 0x110002
    3023	7b 0a c8 ff 00 00 00 00	*(u64 *)(r10 - 0x38) = r0
    3024	7b 9a c0 ff 00 00 00 00	*(u64 *)(r10 - 0x40) = r9
    3025	65 01 07 00 0c 00 00 00	if r1 s> 0xc goto +0x7 <LBB260_19>
    3026	b7 09 00 00 30 00 00 00	r9 = 0x30
    3027	15 01 39 00 00 00 00 00	if r1 == 0x0 goto +0x39 <LBB260_29>
    3028	15 01 b9 00 09 00 00 00	if r1 == 0x9 goto +0xb9 <LBB260_23>
    3029	15 01 01 00 0a 00 00 00	if r1 == 0xa goto +0x1 <LBB260_25>
    3030	05 00 05 00 00 00 00 00	goto +0x5 <LBB260_22>

0000000000005eb8 <LBB260_25>
    3031	b7 09 00 00 6e 00 00 00	r9 = 0x6e
    3032	05 00 34 00 00 00 00 00	goto +0x34 <LBB260_29>

0000000000005ec8 <LBB260_19>
    3033	15 01 b6 00 0d 00 00 00	if r1 == 0xd goto +0xb6 <LBB260_24>
    3034	15 01 38 00 22 00 00 00	if r1 == 0x22 goto +0x38 <LBB260_26>
    3035	15 01 37 00 5c 00 00 00	if r1 == 0x5c goto +0x37 <LBB260_26>

0000000000005ee0 <LBB260_22>
    3036	bf 46 00 00 00 00 00 00	r6 = r4
    3037	bf 19 00 00 00 00 00 00	r9 = r1
    3038	85 10 00 00 1b 06 00 00	call 0x61b ; <core::unicode::unicode_data::grapheme_extend::lookup>
    3039	bf 91 00 00 00 00 00 00	r1 = r9
    3040	bf 64 00 00 00 00 00 00	r4 = r6
    3041	55 00 04 00 00 00 00 00	if r0 != 0x0 goto +0x4 <LBB260_28>
    3042	85 10 00 00 65 04 00 00	call 0x465 ; <core::unicode::printable::is_printable>
    3043	bf 91 00 00 00 00 00 00	r1 = r9
    3044	bf 64 00 00 00 00 00 00	r4 = r6
    3045	55 00 a1 00 00 00 00 00	if r0 != 0x0 goto +0xa1 <LBB260_68>

0000000000005f30 <LBB260_28>
    3046	bf 13 00 00 00 00 00 00	r3 = r1
    3047	47 03 00 00 01 00 00 00	r3 |= 0x1
    3048	bf 32 00 00 00 00 00 00	r2 = r3
    3049	77 02 00 00 01 00 00 00	r2 >>= 0x1
    3050	4f 23 00 00 00 00 00 00	r3 |= r2
    3051	bf 32 00 00 00 00 00 00	r2 = r3
    3052	77 02 00 00 02 00 00 00	r2 >>= 0x2
    3053	4f 23 00 00 00 00 00 00	r3 |= r2
    3054	bf 32 00 00 00 00 00 00	r2 = r3
    3055	57 02 00 00 f0 ff 1f 00	r2 &= 0x1ffff0
    3056	77 02 00 00 04 00 00 00	r2 >>= 0x4
    3057	4f 23 00 00 00 00 00 00	r3 |= r2
    3058	bf 32 00 00 00 00 00 00	r2 = r3
    3059	77 02 00 00 08 00 00 00	r2 >>= 0x8
    3060	4f 23 00 00 00 00 00 00	r3 |= r2
    3061	bf 32 00 00 00 00 00 00	r2 = r3
    3062	57 02 00 00 00 00 ff 7f	r2 &= 0x7fff0000
    3063	77 02 00 00 10 00 00 00	r2 >>= 0x10
    3064	4f 23 00 00 00 00 00 00	r3 |= r2
    3065	a7 03 00 00 ff ff ff ff	r3 ^= -0x1
    3066	bf 32 00 00 00 00 00 00	r2 = r3
    3067	77 02 00 00 01 00 00 00	r2 >>= 0x1
    3068	57 02 00 00 55 55 55 55	r2 &= 0x55555555
    3069	1f 23 00 00 00 00 00 00	r3 -= r2
    3070	bf 39 00 00 00 00 00 00	r9 = r3
    3071	57 09 00 00 33 33 33 33	r9 &= 0x33333333
    3072	77 03 00 00 02 00 00 00	r3 >>= 0x2
    3073	57 03 00 00 33 33 33 33	r3 &= 0x33333333
    3074	0f 39 00 00 00 00 00 00	r9 += r3
    3075	bf 92 00 00 00 00 00 00	r2 = r9
    3076	77 02 00 00 04 00 00 00	r2 >>= 0x4
    3077	0f 29 00 00 00 00 00 00	r9 += r2
    3078	57 09 00 00 0f 0f 0f 0f	r9 &= 0xf0f0f0f
    3079	27 09 00 00 01 01 01 01	r9 *= 0x1010101
    3080	77 09 00 00 1a 00 00 00	r9 >>= 0x1a
    3081	57 09 00 00 3f 00 00 00	r9 &= 0x3f
    3082	a7 09 00 00 07 00 00 00	r9 ^= 0x7
    3083	bf 16 00 00 00 00 00 00	r6 = r1
    3084	15 01 7a 00 01 00 11 00	if r1 == 0x110001 goto +0x7a <LBB260_68>

0000000000006068 <LBB260_29>
    3085	79 a5 d0 ff 00 00 00 00	r5 = *(u64 *)(r10 - 0x30)
    3086	2d 45 89 00 00 00 00 00	if r5 > r4 goto +0x89 <LBB260_38>
    3087	15 05 0c 00 00 00 00 00	if r5 == 0x0 goto +0xc <LBB260_34>
    3088	2d 58 04 00 00 00 00 00	if r8 > r5 goto +0x4 <LBB260_33>
    3089	1d 85 0a 00 00 00 00 00	if r5 == r8 goto +0xa <LBB260_34>
    3090	05 00 85 00 00 00 00 00	goto +0x85 <LBB260_38>

0000000000006098 <LBB260_26>
    3091	bf 19 00 00 00 00 00 00	r9 = r1
    3092	05 00 f8 ff 00 00 00 00	goto -0x8 <LBB260_29>

00000000000060a8 <LBB260_33>
    3093	79 a2 f0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x10)
    3094	0f 52 00 00 00 00 00 00	r2 += r5
    3095	71 23 00 00 00 00 00 00	r3 = *(u8 *)(r2 + 0x0)
    3096	67 03 00 00 38 00 00 00	r3 <<= 0x38
    3097	c7 03 00 00 38 00 00 00	r3 s>>= 0x38
    3098	b7 02 00 00 c0 ff ff ff	r2 = -0x40
    3099	6d 32 7c 00 00 00 00 00	if r2 s> r3 goto +0x7c <LBB260_38>

00000000000060e0 <LBB260_34>
    3100	15 04 03 00 00 00 00 00	if r4 == 0x0 goto +0x3 <LBB260_39>
    3101	2d 48 74 00 00 00 00 00	if r8 > r4 goto +0x74 <LBB260_37>
    3102	1d 84 01 00 00 00 00 00	if r4 == r8 goto +0x1 <LBB260_39>
    3103	05 00 78 00 00 00 00 00	goto +0x78 <LBB260_38>

0000000000006100 <LBB260_39>
    3104	7b 1a b0 ff 00 00 00 00	*(u64 *)(r10 - 0x50) = r1
    3105	79 a2 f0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x10)
    3106	0f 52 00 00 00 00 00 00	r2 += r5
    3107	7b 4a b8 ff 00 00 00 00	*(u64 *)(r10 - 0x48) = r4
    3108	bf 43 00 00 00 00 00 00	r3 = r4
    3109	1f 53 00 00 00 00 00 00	r3 -= r5
    3110	79 a1 d8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x28)
    3111	79 14 18 00 00 00 00 00	r4 = *(u64 *)(r1 + 0x18)
    3112	bf 71 00 00 00 00 00 00	r1 = r7
    3113	8d 00 00 00 04 00 00 00	callx r4
    3114	55 00 89 00 00 00 00 00	if r0 != 0x0 goto +0x89 <LBB260_70>
    3115	b7 08 00 00 05 00 00 00	r8 = 0x5
    3116	05 00 4d 00 00 00 00 00	goto +0x4d <LBB260_41>

0000000000006168 <LBB260_43>
    3117	67 05 00 00 20 00 00 00	r5 <<= 0x20
    3118	77 05 00 00 20 00 00 00	r5 >>= 0x20
    3119	65 05 02 00 01 00 00 00	if r5 s> 0x1 goto +0x2 <LBB260_46>
    3120	15 05 10 00 01 00 00 00	if r5 == 0x1 goto +0x10 <LBB260_62>
    3121	05 00 17 00 00 00 00 00	goto +0x17 <LBB260_63>

0000000000006190 <LBB260_46>
    3122	b7 06 00 00 01 00 11 00	r6 = 0x110001
    3123	b7 02 00 00 5c 00 00 00	r2 = 0x5c
    3124	bf 48 00 00 00 00 00 00	r8 = r4
    3125	bf 19 00 00 00 00 00 00	r9 = r1
    3126	15 05 3f 00 02 00 00 00	if r5 == 0x2 goto +0x3f <LBB260_60>
    3127	bf 45 00 00 00 00 00 00	r5 = r4
    3128	57 05 00 00 ff 00 00 00	r5 &= 0xff
    3129	65 05 1d 00 02 00 00 00	if r5 s> 0x2 goto +0x1d <LBB260_51>
    3130	b7 08 00 00 00 00 00 00	r8 = 0x0
    3131	b7 02 00 00 7d 00 00 00	r2 = 0x7d
    3132	bf 36 00 00 00 00 00 00	r6 = r3
    3133	bf 19 00 00 00 00 00 00	r9 = r1
    3134	15 05 37 00 01 00 00 00	if r5 == 0x1 goto +0x37 <LBB260_60>
    3135	15 05 1b 00 02 00 00 00	if r5 == 0x2 goto +0x1b <LBB260_54>
    3136	05 00 08 00 00 00 00 00	goto +0x8 <LBB260_63>

0000000000006208 <LBB260_62>
    3137	b7 06 00 00 00 00 11 00	r6 = 0x110000
    3138	bf 13 00 00 00 00 00 00	r3 = r1
    3139	67 03 00 00 20 00 00 00	r3 <<= 0x20
    3140	77 03 00 00 20 00 00 00	r3 >>= 0x20
    3141	bf 12 00 00 00 00 00 00	r2 = r1
    3142	bf 48 00 00 00 00 00 00	r8 = r4
    3143	bf 19 00 00 00 00 00 00	r9 = r1
    3144	55 03 2d 00 00 00 11 00	if r3 != 0x110000 goto +0x2d <LBB260_60>

0000000000006248 <LBB260_63>
    3145	b7 03 00 00 01 00 00 00	r3 = 0x1
    3146	79 a8 e0 ff 00 00 00 00	r8 = *(u64 *)(r10 - 0x20)
    3147	b7 01 00 00 80 00 00 00	r1 = 0x80
    3148	79 a4 b8 ff 00 00 00 00	r4 = *(u64 *)(r10 - 0x48)
    3149	79 a2 b0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x50)
    3150	2d 21 36 00 00 00 00 00	if r1 > r2 goto +0x36 <LBB260_67>
    3151	b7 03 00 00 02 00 00 00	r3 = 0x2
    3152	b7 01 00 00 00 08 00 00	r1 = 0x800
    3153	2d 21 33 00 00 00 00 00	if r1 > r2 goto +0x33 <LBB260_67>
    3154	b7 03 00 00 03 00 00 00	r3 = 0x3
    3155	b7 01 00 00 00 00 01 00	r1 = 0x10000
    3156	2d 21 30 00 00 00 00 00	if r1 > r2 goto +0x30 <LBB260_67>
    3157	b7 03 00 00 04 00 00 00	r3 = 0x4
    3158	05 00 2e 00 00 00 00 00	goto +0x2e <LBB260_67>

00000000000062b8 <LBB260_51>
    3159	15 05 17 00 03 00 00 00	if r5 == 0x3 goto +0x17 <LBB260_57>
    3160	15 05 19 00 04 00 00 00	if r5 == 0x4 goto +0x19 <LBB260_58>
    3161	b7 08 00 00 04 00 00 00	r8 = 0x4
    3162	05 00 19 00 00 00 00 00	goto +0x19 <LBB260_59>

00000000000062d8 <LBB260_54>
    3163	bf 12 00 00 00 00 00 00	r2 = r1
    3164	67 02 00 00 02 00 00 00	r2 <<= 0x2
    3165	57 02 00 00 1c 00 00 00	r2 &= 0x1c
    3166	bf 35 00 00 00 00 00 00	r5 = r3
    3167	67 05 00 00 20 00 00 00	r5 <<= 0x20
    3168	77 05 00 00 20 00 00 00	r5 >>= 0x20
    3169	7f 25 00 00 00 00 00 00	r5 >>= r2
    3170	57 05 00 00 0f 00 00 00	r5 &= 0xf
    3171	b7 02 00 00 30 00 00 00	r2 = 0x30
    3172	b7 00 00 00 0a 00 00 00	r0 = 0xa
    3173	2d 50 01 00 00 00 00 00	if r0 > r5 goto +0x1 <LBB260_56>
    3174	b7 02 00 00 57 00 00 00	r2 = 0x57

0000000000006338 <LBB260_56>
    3175	0f 52 00 00 00 00 00 00	r2 += r5
    3176	b7 09 00 00 00 00 00 00	r9 = 0x0
    3177	b7 08 00 00 01 00 00 00	r8 = 0x1
    3178	bf 36 00 00 00 00 00 00	r6 = r3
    3179	15 01 0a 00 00 00 00 00	if r1 == 0x0 goto +0xa <LBB260_60>
    3180	07 01 00 00 ff ff ff ff	r1 += -0x1
    3181	bf 48 00 00 00 00 00 00	r8 = r4
    3182	05 00 05 00 00 00 00 00	goto +0x5 <LBB260_59>

0000000000006378 <LBB260_57>
    3183	b7 08 00 00 02 00 00 00	r8 = 0x2
    3184	b7 02 00 00 7b 00 00 00	r2 = 0x7b
    3185	05 00 02 00 00 00 00 00	goto +0x2 <LBB260_59>

0000000000006390 <LBB260_58>
    3186	b7 08 00 00 03 00 00 00	r8 = 0x3
    3187	b7 02 00 00 75 00 00 00	r2 = 0x75

00000000000063a0 <LBB260_59>
    3188	bf 36 00 00 00 00 00 00	r6 = r3
    3189	bf 19 00 00 00 00 00 00	r9 = r1

00000000000063b0 <LBB260_60>
    3190	bf 71 00 00 00 00 00 00	r1 = r7
    3191	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x8)
    3192	8d 00 00 00 03 00 00 00	callx r3
    3193	55 00 3a 00 00 00 00 00	if r0 != 0x0 goto +0x3a <LBB260_70>

00000000000063d0 <LBB260_41>
    3194	bf 84 00 00 00 00 00 00	r4 = r8
    3195	bf 63 00 00 00 00 00 00	r3 = r6
    3196	bf 91 00 00 00 00 00 00	r1 = r9
    3197	bf 35 00 00 00 00 00 00	r5 = r3
    3198	07 05 00 00 00 00 ef ff	r5 += -0x110000
    3199	bf 32 00 00 00 00 00 00	r2 = r3
    3200	67 02 00 00 20 00 00 00	r2 <<= 0x20
    3201	77 02 00 00 20 00 00 00	r2 >>= 0x20
    3202	25 02 aa ff ff ff 10 00	if r2 > 0x10ffff goto -0x56 <LBB260_43>
    3203	b7 05 00 00 03 00 00 00	r5 = 0x3
    3204	05 00 a8 ff 00 00 00 00	goto -0x58 <LBB260_43>

0000000000006428 <LBB260_67>
    3205	0f 43 00 00 00 00 00 00	r3 += r4
    3206	7b 3a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r3

0000000000006438 <LBB260_68>
    3207	79 a1 c8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x38)
    3208	1f 14 00 00 00 00 00 00	r4 -= r1
    3209	79 a0 c0 ff 00 00 00 00	r0 = *(u64 *)(r10 - 0x40)
    3210	0f 04 00 00 00 00 00 00	r4 += r0
    3211	79 a1 a8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x58)
    3212	1d 10 12 00 00 00 00 00	if r0 == r1 goto +0x12 <LBB260_8>
    3213	05 00 15 ff 00 00 00 00	goto -0xeb <LBB260_3>

0000000000006470 <LBB260_23>
    3214	b7 09 00 00 74 00 00 00	r9 = 0x74
    3215	05 00 7d ff 00 00 00 00	goto -0x83 <LBB260_29>

0000000000006480 <LBB260_24>
    3216	b7 09 00 00 72 00 00 00	r9 = 0x72
    3217	05 00 7b ff 00 00 00 00	goto -0x85 <LBB260_29>

0000000000006490 <LBB260_37>
    3218	79 a2 f0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x10)
    3219	0f 42 00 00 00 00 00 00	r2 += r4
    3220	71 22 00 00 00 00 00 00	r2 = *(u8 *)(r2 + 0x0)
    3221	67 02 00 00 38 00 00 00	r2 <<= 0x38
    3222	c7 02 00 00 38 00 00 00	r2 s>>= 0x38
    3223	65 02 88 ff bf ff ff ff	if r2 s> -0x41 goto -0x78 <LBB260_39>

00000000000064c0 <LBB260_38>
    3224	79 a1 f0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x10)
    3225	bf 82 00 00 00 00 00 00	r2 = r8
    3226	bf 53 00 00 00 00 00 00	r3 = r5
    3227	18 05 00 00 b8 a5 00 00 00 00 00 00 00 00 00 00	r5 = 0xa5b8 ll
    3229	85 10 00 00 3a 02 00 00	call 0x23a ; <core::str::slice_error_fail>
    3230	85 10 00 00 ff ff ff ff	call -0x1 ; abort

00000000000064f8 <LBB260_8>
    3231	b7 01 00 00 00 00 00 00	r1 = 0x0
    3232	79 a3 d0 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x30)
    3233	15 03 04 00 00 00 00 00	if r3 == 0x0 goto +0x4 <LBB260_13>
    3234	2d 38 13 00 00 00 00 00	if r8 > r3 goto +0x13 <LBB260_11>
    3235	bf 31 00 00 00 00 00 00	r1 = r3
    3236	1d 83 01 00 00 00 00 00	if r3 == r8 goto +0x1 <LBB260_13>
    3237	05 00 17 00 00 00 00 00	goto +0x17 <LBB260_12>

0000000000006530 <LBB260_13>
    3238	79 a2 f0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x10)
    3239	0f 12 00 00 00 00 00 00	r2 += r1
    3240	1f 18 00 00 00 00 00 00	r8 -= r1
    3241	79 a1 d8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x28)
    3242	79 14 18 00 00 00 00 00	r4 = *(u64 *)(r1 + 0x18)
    3243	bf 71 00 00 00 00 00 00	r1 = r7
    3244	bf 83 00 00 00 00 00 00	r3 = r8
    3245	8d 00 00 00 04 00 00 00	callx r4
    3246	55 00 05 00 00 00 00 00	if r0 != 0x0 goto +0x5 <LBB260_70>
    3247	bf 71 00 00 00 00 00 00	r1 = r7
    3248	b7 02 00 00 22 00 00 00	r2 = 0x22
    3249	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x8)
    3250	8d 00 00 00 03 00 00 00	callx r3
    3251	7b 0a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r0

00000000000065a0 <LBB260_70>
    3252	79 a0 e8 ff 00 00 00 00	r0 = *(u64 *)(r10 - 0x18)
    3253	95 00 00 00 00 00 00 00	exit

00000000000065b0 <LBB260_11>
    3254	79 a1 f0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x10)
    3255	0f 31 00 00 00 00 00 00	r1 += r3
    3256	71 12 00 00 00 00 00 00	r2 = *(u8 *)(r1 + 0x0)
    3257	67 02 00 00 38 00 00 00	r2 <<= 0x38
    3258	c7 02 00 00 38 00 00 00	r2 s>>= 0x38
    3259	bf 31 00 00 00 00 00 00	r1 = r3
    3260	65 02 e9 ff bf ff ff ff	if r2 s> -0x41 goto -0x17 <LBB260_13>

00000000000065e8 <LBB260_12>
    3261	79 a1 f0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x10)
    3262	bf 82 00 00 00 00 00 00	r2 = r8
    3263	bf 84 00 00 00 00 00 00	r4 = r8
    3264	18 05 00 00 d0 a5 00 00 00 00 00 00 00 00 00 00	r5 = 0xa5d0 ll
    3266	85 10 00 00 15 02 00 00	call 0x215 ; <core::str::slice_error_fail>
    3267	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000006620 <<char as core::fmt::Debug>::fmt>
    3268	bf 18 00 00 00 00 00 00	r8 = r1
    3269	79 26 00 00 00 00 00 00	r6 = *(u64 *)(r2 + 0x0)
    3270	79 21 08 00 00 00 00 00	r1 = *(u64 *)(r2 + 0x8)
    3271	79 13 20 00 00 00 00 00	r3 = *(u64 *)(r1 + 0x20)
    3272	bf 61 00 00 00 00 00 00	r1 = r6
    3273	b7 02 00 00 27 00 00 00	r2 = 0x27
    3274	7b 3a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r3
    3275	8d 00 00 00 03 00 00 00	callx r3
    3276	b7 01 00 00 01 00 00 00	r1 = 0x1
    3277	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
    3278	55 00 94 00 00 00 00 00	if r0 != 0x0 goto +0x94 <LBB262_39>
    3279	b7 07 00 00 02 00 11 00	r7 = 0x110002
    3280	61 89 00 00 00 00 00 00	r9 = *(u32 *)(r8 + 0x0)
    3281	65 09 07 00 0c 00 00 00	if r9 s> 0xc goto +0x7 <LBB262_5>
    3282	b7 08 00 00 30 00 00 00	r8 = 0x30
    3283	15 09 3d 00 00 00 00 00	if r9 == 0x0 goto +0x3d <LBB262_15>
    3284	15 09 39 00 09 00 00 00	if r9 == 0x9 goto +0x39 <LBB262_9>
    3285	15 09 01 00 0a 00 00 00	if r9 == 0xa goto +0x1 <LBB262_11>
    3286	05 00 05 00 00 00 00 00	goto +0x5 <LBB262_8>

00000000000066b8 <LBB262_11>
    3287	b7 08 00 00 6e 00 00 00	r8 = 0x6e
    3288	05 00 38 00 00 00 00 00	goto +0x38 <LBB262_15>

00000000000066c8 <LBB262_5>
    3289	15 09 36 00 0d 00 00 00	if r9 == 0xd goto +0x36 <LBB262_10>
    3290	15 09 31 00 27 00 00 00	if r9 == 0x27 goto +0x31 <LBB262_12>
    3291	15 09 30 00 5c 00 00 00	if r9 == 0x5c goto +0x30 <LBB262_12>

00000000000066e0 <LBB262_8>
    3292	bf 91 00 00 00 00 00 00	r1 = r9
    3293	85 10 00 00 1c 05 00 00	call 0x51c ; <core::unicode::unicode_data::grapheme_extend::lookup>
    3294	55 00 05 00 00 00 00 00	if r0 != 0x0 goto +0x5 <LBB262_14>
    3295	bf 91 00 00 00 00 00 00	r1 = r9
    3296	85 10 00 00 67 03 00 00	call 0x367 ; <core::unicode::printable::is_printable>
    3297	b7 07 00 00 01 00 11 00	r7 = 0x110001
    3298	bf 98 00 00 00 00 00 00	r8 = r9
    3299	55 00 2d 00 00 00 00 00	if r0 != 0x0 goto +0x2d <LBB262_15>

0000000000006720 <LBB262_14>
    3300	bf 91 00 00 00 00 00 00	r1 = r9
    3301	47 01 00 00 01 00 00 00	r1 |= 0x1
    3302	bf 12 00 00 00 00 00 00	r2 = r1
    3303	77 02 00 00 01 00 00 00	r2 >>= 0x1
    3304	4f 21 00 00 00 00 00 00	r1 |= r2
    3305	bf 12 00 00 00 00 00 00	r2 = r1
    3306	77 02 00 00 02 00 00 00	r2 >>= 0x2
    3307	4f 21 00 00 00 00 00 00	r1 |= r2
    3308	bf 12 00 00 00 00 00 00	r2 = r1
    3309	77 02 00 00 04 00 00 00	r2 >>= 0x4
    3310	4f 21 00 00 00 00 00 00	r1 |= r2
    3311	bf 12 00 00 00 00 00 00	r2 = r1
    3312	77 02 00 00 08 00 00 00	r2 >>= 0x8
    3313	4f 21 00 00 00 00 00 00	r1 |= r2
    3314	18 02 00 00 00 00 ff ff 00 00 00 00 00 00 00 00	r2 = 0xffff0000 ll
    3316	bf 13 00 00 00 00 00 00	r3 = r1
    3317	5f 23 00 00 00 00 00 00	r3 &= r2
    3318	77 03 00 00 10 00 00 00	r3 >>= 0x10
    3319	4f 31 00 00 00 00 00 00	r1 |= r3
    3320	a7 01 00 00 ff ff ff ff	r1 ^= -0x1
    3321	bf 12 00 00 00 00 00 00	r2 = r1
    3322	77 02 00 00 01 00 00 00	r2 >>= 0x1
    3323	57 02 00 00 55 55 55 55	r2 &= 0x55555555
    3324	1f 21 00 00 00 00 00 00	r1 -= r2
    3325	bf 18 00 00 00 00 00 00	r8 = r1
    3326	57 08 00 00 33 33 33 33	r8 &= 0x33333333
    3327	77 01 00 00 02 00 00 00	r1 >>= 0x2
    3328	57 01 00 00 33 33 33 33	r1 &= 0x33333333
    3329	0f 18 00 00 00 00 00 00	r8 += r1
    3330	bf 81 00 00 00 00 00 00	r1 = r8
    3331	77 01 00 00 04 00 00 00	r1 >>= 0x4
    3332	0f 18 00 00 00 00 00 00	r8 += r1
    3333	57 08 00 00 0f 0f 0f 0f	r8 &= 0xf0f0f0f
    3334	27 08 00 00 01 01 01 01	r8 *= 0x1010101
    3335	77 08 00 00 1a 00 00 00	r8 >>= 0x1a
    3336	57 08 00 00 3f 00 00 00	r8 &= 0x3f
    3337	a7 08 00 00 07 00 00 00	r8 ^= 0x7
    3338	bf 97 00 00 00 00 00 00	r7 = r9
    3339	05 00 05 00 00 00 00 00	goto +0x5 <LBB262_15>

0000000000006860 <LBB262_12>
    3340	bf 98 00 00 00 00 00 00	r8 = r9
    3341	05 00 03 00 00 00 00 00	goto +0x3 <LBB262_15>

0000000000006870 <LBB262_9>
    3342	b7 08 00 00 74 00 00 00	r8 = 0x74
    3343	05 00 01 00 00 00 00 00	goto +0x1 <LBB262_15>

0000000000006880 <LBB262_10>
    3344	b7 08 00 00 72 00 00 00	r8 = 0x72

0000000000006888 <LBB262_15>
    3345	b7 09 00 00 05 00 00 00	r9 = 0x5
    3346	05 00 45 00 00 00 00 00	goto +0x45 <LBB262_16>

0000000000006898 <LBB262_18>
    3347	67 05 00 00 20 00 00 00	r5 <<= 0x20
    3348	77 05 00 00 20 00 00 00	r5 >>= 0x20
    3349	65 05 02 00 01 00 00 00	if r5 s> 0x1 goto +0x2 <LBB262_21>
    3350	15 05 10 00 01 00 00 00	if r5 == 0x1 goto +0x10 <LBB262_37>
    3351	05 00 17 00 00 00 00 00	goto +0x17 <LBB262_38>

00000000000068c0 <LBB262_21>
    3352	b7 07 00 00 01 00 11 00	r7 = 0x110001
    3353	b7 02 00 00 5c 00 00 00	r2 = 0x5c
    3354	bf 49 00 00 00 00 00 00	r9 = r4
    3355	bf 18 00 00 00 00 00 00	r8 = r1
    3356	15 05 37 00 02 00 00 00	if r5 == 0x2 goto +0x37 <LBB262_35>
    3357	bf 45 00 00 00 00 00 00	r5 = r4
    3358	57 05 00 00 ff 00 00 00	r5 &= 0xff
    3359	65 05 15 00 02 00 00 00	if r5 s> 0x2 goto +0x15 <LBB262_26>
    3360	b7 09 00 00 00 00 00 00	r9 = 0x0
    3361	b7 02 00 00 7d 00 00 00	r2 = 0x7d
    3362	bf 37 00 00 00 00 00 00	r7 = r3
    3363	bf 18 00 00 00 00 00 00	r8 = r1
    3364	15 05 2f 00 01 00 00 00	if r5 == 0x1 goto +0x2f <LBB262_35>
    3365	15 05 13 00 02 00 00 00	if r5 == 0x2 goto +0x13 <LBB262_29>
    3366	05 00 08 00 00 00 00 00	goto +0x8 <LBB262_38>

0000000000006938 <LBB262_37>
    3367	b7 07 00 00 00 00 11 00	r7 = 0x110000
    3368	bf 13 00 00 00 00 00 00	r3 = r1
    3369	67 03 00 00 20 00 00 00	r3 <<= 0x20
    3370	77 03 00 00 20 00 00 00	r3 >>= 0x20
    3371	bf 12 00 00 00 00 00 00	r2 = r1
    3372	bf 49 00 00 00 00 00 00	r9 = r4
    3373	bf 18 00 00 00 00 00 00	r8 = r1
    3374	55 03 25 00 00 00 11 00	if r3 != 0x110000 goto +0x25 <LBB262_35>

0000000000006978 <LBB262_38>
    3375	bf 61 00 00 00 00 00 00	r1 = r6
    3376	b7 02 00 00 27 00 00 00	r2 = 0x27
    3377	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x8)
    3378	8d 00 00 00 03 00 00 00	callx r3
    3379	7b 0a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r0
    3380	05 00 2e 00 00 00 00 00	goto +0x2e <LBB262_39>

00000000000069a8 <LBB262_26>
    3381	15 05 17 00 03 00 00 00	if r5 == 0x3 goto +0x17 <LBB262_32>
    3382	15 05 19 00 04 00 00 00	if r5 == 0x4 goto +0x19 <LBB262_33>
    3383	b7 09 00 00 04 00 00 00	r9 = 0x4
    3384	05 00 19 00 00 00 00 00	goto +0x19 <LBB262_34>

00000000000069c8 <LBB262_29>
    3385	bf 12 00 00 00 00 00 00	r2 = r1
    3386	67 02 00 00 02 00 00 00	r2 <<= 0x2
    3387	57 02 00 00 1c 00 00 00	r2 &= 0x1c
    3388	bf 35 00 00 00 00 00 00	r5 = r3
    3389	67 05 00 00 20 00 00 00	r5 <<= 0x20
    3390	77 05 00 00 20 00 00 00	r5 >>= 0x20
    3391	7f 25 00 00 00 00 00 00	r5 >>= r2
    3392	57 05 00 00 0f 00 00 00	r5 &= 0xf
    3393	b7 02 00 00 30 00 00 00	r2 = 0x30
    3394	b7 00 00 00 0a 00 00 00	r0 = 0xa
    3395	2d 50 01 00 00 00 00 00	if r0 > r5 goto +0x1 <LBB262_31>
    3396	b7 02 00 00 57 00 00 00	r2 = 0x57

0000000000006a28 <LBB262_31>
    3397	0f 52 00 00 00 00 00 00	r2 += r5
    3398	b7 08 00 00 00 00 00 00	r8 = 0x0
    3399	b7 09 00 00 01 00 00 00	r9 = 0x1
    3400	bf 37 00 00 00 00 00 00	r7 = r3
    3401	15 01 0a 00 00 00 00 00	if r1 == 0x0 goto +0xa <LBB262_35>
    3402	07 01 00 00 ff ff ff ff	r1 += -0x1
    3403	bf 49 00 00 00 00 00 00	r9 = r4
    3404	05 00 05 00 00 00 00 00	goto +0x5 <LBB262_34>

0000000000006a68 <LBB262_32>
    3405	b7 09 00 00 02 00 00 00	r9 = 0x2
    3406	b7 02 00 00 7b 00 00 00	r2 = 0x7b
    3407	05 00 02 00 00 00 00 00	goto +0x2 <LBB262_34>

0000000000006a80 <LBB262_33>
    3408	b7 09 00 00 03 00 00 00	r9 = 0x3
    3409	b7 02 00 00 75 00 00 00	r2 = 0x75

0000000000006a90 <LBB262_34>
    3410	bf 37 00 00 00 00 00 00	r7 = r3
    3411	bf 18 00 00 00 00 00 00	r8 = r1

0000000000006aa0 <LBB262_35>
    3412	bf 61 00 00 00 00 00 00	r1 = r6
    3413	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x8)
    3414	8d 00 00 00 03 00 00 00	callx r3
    3415	55 00 0b 00 00 00 00 00	if r0 != 0x0 goto +0xb <LBB262_39>

0000000000006ac0 <LBB262_16>
    3416	bf 94 00 00 00 00 00 00	r4 = r9
    3417	bf 73 00 00 00 00 00 00	r3 = r7
    3418	bf 81 00 00 00 00 00 00	r1 = r8
    3419	bf 35 00 00 00 00 00 00	r5 = r3
    3420	07 05 00 00 00 00 ef ff	r5 += -0x110000
    3421	bf 32 00 00 00 00 00 00	r2 = r3
    3422	67 02 00 00 20 00 00 00	r2 <<= 0x20
    3423	77 02 00 00 20 00 00 00	r2 >>= 0x20
    3424	25 02 b2 ff ff ff 10 00	if r2 > 0x10ffff goto -0x4e <LBB262_18>
    3425	b7 05 00 00 03 00 00 00	r5 = 0x3
    3426	05 00 b0 ff 00 00 00 00	goto -0x50 <LBB262_18>

0000000000006b18 <LBB262_39>
    3427	79 a0 f0 ff 00 00 00 00	r0 = *(u64 *)(r10 - 0x10)
    3428	95 00 00 00 00 00 00 00	exit

0000000000006b28 <core::slice::memchr::memchr_aligned>
    3429	b7 05 00 00 00 00 00 00	r5 = 0x0
    3430	bf 30 00 00 00 00 00 00	r0 = r3
    3431	07 00 00 00 07 00 00 00	r0 += 0x7
    3432	57 00 00 00 f8 ff ff ff	r0 &= -0x8
    3433	5d 30 41 00 00 00 00 00	if r0 != r3 goto +0x41 <LBB267_4>

0000000000006b50 <LBB267_1>
    3434	bf 40 00 00 00 00 00 00	r0 = r4
    3435	07 00 00 00 f0 ff ff ff	r0 += -0x10
    3436	2d 05 2c 00 00 00 00 00	if r5 > r0 goto +0x2c <LBB267_12>
    3437	7b 4a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r4
    3438	7b 1a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r1
    3439	bf 26 00 00 00 00 00 00	r6 = r2
    3440	57 06 00 00 ff 00 00 00	r6 &= 0xff
    3441	18 07 00 00 01 01 01 01 00 00 00 00 01 01 01 01	r7 = 0x101010101010101 ll
    3443	2f 76 00 00 00 00 00 00	r6 *= r7
    3444	18 04 00 00 80 80 80 80 00 00 00 00 80 80 80 80	r4 = -0x7f7f7f7f7f7f7f80 ll
    3446	05 00 0c 00 00 00 00 00	goto +0xc <LBB267_3>

0000000000006bb8 <LBB267_18>
    3447	79 91 08 00 00 00 00 00	r1 = *(u64 *)(r9 + 0x8)
    3448	af 61 00 00 00 00 00 00	r1 ^= r6
    3449	bf 17 00 00 00 00 00 00	r7 = r1
    3450	18 08 00 00 ff fe fe fe 00 00 00 00 fe fe fe fe	r8 = -0x101010101010101 ll
    3452	0f 87 00 00 00 00 00 00	r7 += r8
    3453	a7 01 00 00 ff ff ff ff	r1 ^= -0x1
    3454	5f 71 00 00 00 00 00 00	r1 &= r7
    3455	5f 41 00 00 00 00 00 00	r1 &= r4
    3456	55 01 0f 00 00 00 00 00	if r1 != 0x0 goto +0xf <LBB267_10>
    3457	07 05 00 00 10 00 00 00	r5 += 0x10
    3458	2d 05 0d 00 00 00 00 00	if r5 > r0 goto +0xd <LBB267_10>

0000000000006c18 <LBB267_3>
    3459	bf 39 00 00 00 00 00 00	r9 = r3
    3460	0f 59 00 00 00 00 00 00	r9 += r5
    3461	79 97 00 00 00 00 00 00	r7 = *(u64 *)(r9 + 0x0)
    3462	af 67 00 00 00 00 00 00	r7 ^= r6
    3463	bf 71 00 00 00 00 00 00	r1 = r7
    3464	18 08 00 00 ff fe fe fe 00 00 00 00 fe fe fe fe	r8 = -0x101010101010101 ll
    3466	0f 81 00 00 00 00 00 00	r1 += r8
    3467	a7 07 00 00 ff ff ff ff	r7 ^= -0x1
    3468	5f 17 00 00 00 00 00 00	r7 &= r1
    3469	5f 47 00 00 00 00 00 00	r7 &= r4
    3470	55 07 01 00 00 00 00 00	if r7 != 0x0 goto +0x1 <LBB267_10>
    3471	05 00 e7 ff 00 00 00 00	goto -0x19 <LBB267_18>

0000000000006c80 <LBB267_10>
    3472	79 a1 f8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x8)
    3473	79 a4 f0 ff 00 00 00 00	r4 = *(u64 *)(r10 - 0x10)
    3474	3d 54 06 00 00 00 00 00	if r4 >= r5 goto +0x6 <LBB267_12>
    3475	bf 51 00 00 00 00 00 00	r1 = r5
    3476	bf 42 00 00 00 00 00 00	r2 = r4
    3477	18 03 00 00 e8 a5 00 00 00 00 00 00 00 00 00 00	r3 = 0xa5e8 ll
    3479	85 10 00 00 29 00 00 00	call 0x29 ; <core::slice::index::slice_start_index_len_fail>
    3480	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000006cc8 <LBB267_12>
    3481	b7 07 00 00 00 00 00 00	r7 = 0x0
    3482	bf 46 00 00 00 00 00 00	r6 = r4
    3483	1d 54 22 00 00 00 00 00	if r4 == r5 goto +0x22 <LBB267_17>
    3484	bf 40 00 00 00 00 00 00	r0 = r4
    3485	1f 50 00 00 00 00 00 00	r0 -= r5
    3486	0f 53 00 00 00 00 00 00	r3 += r5
    3487	b7 08 00 00 00 00 00 00	r8 = 0x0

0000000000006d00 <LBB267_14>
    3488	bf 36 00 00 00 00 00 00	r6 = r3
    3489	0f 86 00 00 00 00 00 00	r6 += r8
    3490	71 66 00 00 00 00 00 00	r6 = *(u8 *)(r6 + 0x0)
    3491	bf 27 00 00 00 00 00 00	r7 = r2
    3492	57 07 00 00 ff 00 00 00	r7 &= 0xff
    3493	1d 76 15 00 00 00 00 00	if r6 == r7 goto +0x15 <LBB267_16>
    3494	b7 07 00 00 00 00 00 00	r7 = 0x0
    3495	07 08 00 00 01 00 00 00	r8 += 0x1
    3496	bf 46 00 00 00 00 00 00	r6 = r4
    3497	2d 80 f6 ff 00 00 00 00	if r0 > r8 goto -0xa <LBB267_14>
    3498	05 00 13 00 00 00 00 00	goto +0x13 <LBB267_17>

0000000000006d58 <LBB267_4>
    3499	1f 30 00 00 00 00 00 00	r0 -= r3
    3500	2d 04 01 00 00 00 00 00	if r4 > r0 goto +0x1 <LBB267_6>
    3501	bf 40 00 00 00 00 00 00	r0 = r4

0000000000006d70 <LBB267_6>
    3502	15 00 bb ff 00 00 00 00	if r0 == 0x0 goto -0x45 <LBB267_1>
    3503	b7 06 00 00 00 00 00 00	r6 = 0x0
    3504	b7 07 00 00 01 00 00 00	r7 = 0x1

0000000000006d88 <LBB267_8>
    3505	bf 35 00 00 00 00 00 00	r5 = r3
    3506	0f 65 00 00 00 00 00 00	r5 += r6
    3507	71 55 00 00 00 00 00 00	r5 = *(u8 *)(r5 + 0x0)
    3508	bf 28 00 00 00 00 00 00	r8 = r2
    3509	57 08 00 00 ff 00 00 00	r8 &= 0xff
    3510	1d 85 07 00 00 00 00 00	if r5 == r8 goto +0x7 <LBB267_17>
    3511	07 06 00 00 01 00 00 00	r6 += 0x1
    3512	bf 05 00 00 00 00 00 00	r5 = r0
    3513	2d 60 f7 ff 00 00 00 00	if r0 > r6 goto -0x9 <LBB267_8>
    3514	05 00 af ff 00 00 00 00	goto -0x51 <LBB267_1>

0000000000006dd8 <LBB267_16>
    3515	0f 85 00 00 00 00 00 00	r5 += r8
    3516	b7 07 00 00 01 00 00 00	r7 = 0x1
    3517	bf 56 00 00 00 00 00 00	r6 = r5

0000000000006df0 <LBB267_17>
    3518	7b 61 08 00 00 00 00 00	*(u64 *)(r1 + 0x8) = r6
    3519	7b 71 00 00 00 00 00 00	*(u64 *)(r1 + 0x0) = r7
    3520	95 00 00 00 00 00 00 00	exit

0000000000006e08 <core::slice::index::slice_start_index_len_fail>
    3521	85 10 00 00 01 00 00 00	call 0x1 ; <core::slice::index::slice_start_index_len_fail_rt>
    3522	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000006e18 <core::slice::index::slice_start_index_len_fail_rt>
    3523	7b 2a a8 ff 00 00 00 00	*(u64 *)(r10 - 0x58) = r2
    3524	7b 1a a0 ff 00 00 00 00	*(u64 *)(r10 - 0x60) = r1
    3525	18 01 00 00 00 a6 00 00 00 00 00 00 00 00 00 00	r1 = 0xa600 ll
    3527	7b 1a c0 ff 00 00 00 00	*(u64 *)(r10 - 0x40) = r1
    3528	b7 01 00 00 02 00 00 00	r1 = 0x2
    3529	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 0x38) = r1
    3530	7b 1a d8 ff 00 00 00 00	*(u64 *)(r10 - 0x28) = r1
    3531	bf a1 00 00 00 00 00 00	r1 = r10
    3532	07 01 00 00 e0 ff ff ff	r1 += -0x20
    3533	7b 1a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r1
    3534	b7 01 00 00 00 00 00 00	r1 = 0x0
    3535	7b 1a b0 ff 00 00 00 00	*(u64 *)(r10 - 0x50) = r1
    3536	bf a1 00 00 00 00 00 00	r1 = r10
    3537	07 01 00 00 a8 ff ff ff	r1 += -0x58
    3538	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
    3539	18 01 00 00 68 8e 00 00 00 00 00 00 00 00 00 00	r1 = 0x8e68 ll
    3541	7b 1a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r1
    3542	7b 1a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r1
    3543	bf a1 00 00 00 00 00 00	r1 = r10
    3544	07 01 00 00 a0 ff ff ff	r1 += -0x60
    3545	7b 1a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r1
    3546	bf a1 00 00 00 00 00 00	r1 = r10
    3547	07 01 00 00 b0 ff ff ff	r1 += -0x50
    3548	bf 32 00 00 00 00 00 00	r2 = r3
    3549	85 10 00 00 37 f9 ff ff	call -0x6c9 ; <core::panicking::panic_fmt>
    3550	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000006ef8 <core::slice::index::slice_end_index_len_fail>
    3551	85 10 00 00 01 00 00 00	call 0x1 ; <core::slice::index::slice_end_index_len_fail_rt>
    3552	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000006f08 <core::slice::index::slice_end_index_len_fail_rt>
    3553	7b 2a a8 ff 00 00 00 00	*(u64 *)(r10 - 0x58) = r2
    3554	7b 1a a0 ff 00 00 00 00	*(u64 *)(r10 - 0x60) = r1
    3555	18 01 00 00 20 a6 00 00 00 00 00 00 00 00 00 00	r1 = 0xa620 ll
    3557	7b 1a c0 ff 00 00 00 00	*(u64 *)(r10 - 0x40) = r1
    3558	b7 01 00 00 02 00 00 00	r1 = 0x2
    3559	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 0x38) = r1
    3560	7b 1a d8 ff 00 00 00 00	*(u64 *)(r10 - 0x28) = r1
    3561	bf a1 00 00 00 00 00 00	r1 = r10
    3562	07 01 00 00 e0 ff ff ff	r1 += -0x20
    3563	7b 1a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r1
    3564	b7 01 00 00 00 00 00 00	r1 = 0x0
    3565	7b 1a b0 ff 00 00 00 00	*(u64 *)(r10 - 0x50) = r1
    3566	bf a1 00 00 00 00 00 00	r1 = r10
    3567	07 01 00 00 a8 ff ff ff	r1 += -0x58
    3568	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
    3569	18 01 00 00 68 8e 00 00 00 00 00 00 00 00 00 00	r1 = 0x8e68 ll
    3571	7b 1a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r1
    3572	7b 1a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r1
    3573	bf a1 00 00 00 00 00 00	r1 = r10
    3574	07 01 00 00 a0 ff ff ff	r1 += -0x60
    3575	7b 1a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r1
    3576	bf a1 00 00 00 00 00 00	r1 = r10
    3577	07 01 00 00 b0 ff ff ff	r1 += -0x50
    3578	bf 32 00 00 00 00 00 00	r2 = r3
    3579	85 10 00 00 19 f9 ff ff	call -0x6e7 ; <core::panicking::panic_fmt>
    3580	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000006fe8 <core::slice::index::slice_index_order_fail>
    3581	85 10 00 00 01 00 00 00	call 0x1 ; <core::slice::index::slice_index_order_fail_rt>
    3582	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000006ff8 <core::slice::index::slice_index_order_fail_rt>
    3583	7b 2a a8 ff 00 00 00 00	*(u64 *)(r10 - 0x58) = r2
    3584	7b 1a a0 ff 00 00 00 00	*(u64 *)(r10 - 0x60) = r1
    3585	18 01 00 00 40 a6 00 00 00 00 00 00 00 00 00 00	r1 = 0xa640 ll
    3587	7b 1a c0 ff 00 00 00 00	*(u64 *)(r10 - 0x40) = r1
    3588	b7 01 00 00 02 00 00 00	r1 = 0x2
    3589	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 0x38) = r1
    3590	7b 1a d8 ff 00 00 00 00	*(u64 *)(r10 - 0x28) = r1
    3591	bf a1 00 00 00 00 00 00	r1 = r10
    3592	07 01 00 00 e0 ff ff ff	r1 += -0x20
    3593	7b 1a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r1
    3594	b7 01 00 00 00 00 00 00	r1 = 0x0
    3595	7b 1a b0 ff 00 00 00 00	*(u64 *)(r10 - 0x50) = r1
    3596	bf a1 00 00 00 00 00 00	r1 = r10
    3597	07 01 00 00 a8 ff ff ff	r1 += -0x58
    3598	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
    3599	18 01 00 00 68 8e 00 00 00 00 00 00 00 00 00 00	r1 = 0x8e68 ll
    3601	7b 1a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r1
    3602	7b 1a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r1
    3603	bf a1 00 00 00 00 00 00	r1 = r10
    3604	07 01 00 00 a0 ff ff ff	r1 += -0x60
    3605	7b 1a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r1
    3606	bf a1 00 00 00 00 00 00	r1 = r10
    3607	07 01 00 00 b0 ff ff ff	r1 += -0x50
    3608	bf 32 00 00 00 00 00 00	r2 = r3
    3609	85 10 00 00 fb f8 ff ff	call -0x705 ; <core::panicking::panic_fmt>
    3610	85 10 00 00 ff ff ff ff	call -0x1 ; abort

00000000000070d8 <core::str::count::do_count_chars>
    3611	bf 16 00 00 00 00 00 00	r6 = r1
    3612	07 06 00 00 07 00 00 00	r6 += 0x7
    3613	57 06 00 00 f8 ff ff ff	r6 &= -0x8
    3614	bf 65 00 00 00 00 00 00	r5 = r6
    3615	1f 15 00 00 00 00 00 00	r5 -= r1
    3616	2d 25 86 00 00 00 00 00	if r5 > r2 goto +0x86 <LBB291_15>
    3617	25 05 85 00 08 00 00 00	if r5 > 0x8 goto +0x85 <LBB291_15>
    3618	bf 28 00 00 00 00 00 00	r8 = r2
    3619	1f 58 00 00 00 00 00 00	r8 -= r5
    3620	b7 03 00 00 08 00 00 00	r3 = 0x8
    3621	2d 83 81 00 00 00 00 00	if r3 > r8 goto +0x81 <LBB291_15>
    3622	bf 83 00 00 00 00 00 00	r3 = r8
    3623	57 03 00 00 07 00 00 00	r3 &= 0x7
    3624	b7 02 00 00 00 00 00 00	r2 = 0x0
    3625	b7 04 00 00 00 00 00 00	r4 = 0x0
    3626	1d 16 09 00 00 00 00 00	if r6 == r1 goto +0x9 <LBB291_8>
    3627	bf 10 00 00 00 00 00 00	r0 = r1
    3628	1f 60 00 00 00 00 00 00	r0 -= r6
    3629	b7 04 00 00 00 00 00 00	r4 = 0x0
    3630	bf 16 00 00 00 00 00 00	r6 = r1
    3631	05 00 0c 00 00 00 00 00	goto +0xc <LBB291_5>

0000000000007180 <LBB291_7>
    3632	0f 74 00 00 00 00 00 00	r4 += r7
    3633	07 06 00 00 01 00 00 00	r6 += 0x1
    3634	07 00 00 00 01 00 00 00	r0 += 0x1
    3635	55 00 08 00 00 00 00 00	if r0 != 0x0 goto +0x8 <LBB291_5>

00000000000071a0 <LBB291_8>
    3636	0f 51 00 00 00 00 00 00	r1 += r5
    3637	15 03 11 00 00 00 00 00	if r3 == 0x0 goto +0x11 <LBB291_13>
    3638	bf 82 00 00 00 00 00 00	r2 = r8
    3639	57 02 00 00 f8 ff ff ff	r2 &= -0x8
    3640	bf 15 00 00 00 00 00 00	r5 = r1
    3641	0f 25 00 00 00 00 00 00	r5 += r2
    3642	b7 02 00 00 00 00 00 00	r2 = 0x0
    3643	05 00 10 00 00 00 00 00	goto +0x10 <LBB291_10>

00000000000071e0 <LBB291_5>
    3644	71 69 00 00 00 00 00 00	r9 = *(u8 *)(r6 + 0x0)
    3645	67 09 00 00 38 00 00 00	r9 <<= 0x38
    3646	c7 09 00 00 38 00 00 00	r9 s>>= 0x38
    3647	b7 07 00 00 01 00 00 00	r7 = 0x1
    3648	65 09 ef ff bf ff ff ff	if r9 s> -0x41 goto -0x11 <LBB291_7>
    3649	b7 07 00 00 00 00 00 00	r7 = 0x0
    3650	05 00 ed ff 00 00 00 00	goto -0x13 <LBB291_7>

0000000000007218 <LBB291_12>
    3651	0f 02 00 00 00 00 00 00	r2 += r0
    3652	07 05 00 00 01 00 00 00	r5 += 0x1
    3653	07 03 00 00 ff ff ff ff	r3 += -0x1
    3654	55 03 05 00 00 00 00 00	if r3 != 0x0 goto +0x5 <LBB291_10>

0000000000007238 <LBB291_13>
    3655	77 08 00 00 03 00 00 00	r8 >>= 0x3
    3656	0f 42 00 00 00 00 00 00	r2 += r4
    3657	18 07 00 00 01 01 01 01 00 00 00 00 01 01 01 01	r7 = 0x101010101010101 ll
    3659	05 00 47 00 00 00 00 00	goto +0x47 <LBB291_14>

0000000000007260 <LBB291_10>
    3660	71 56 00 00 00 00 00 00	r6 = *(u8 *)(r5 + 0x0)
    3661	67 06 00 00 38 00 00 00	r6 <<= 0x38
    3662	c7 06 00 00 38 00 00 00	r6 s>>= 0x38
    3663	b7 00 00 00 01 00 00 00	r0 = 0x1
    3664	65 06 f2 ff bf ff ff ff	if r6 s> -0x41 goto -0xe <LBB291_12>
    3665	b7 00 00 00 00 00 00 00	r0 = 0x0
    3666	05 00 f0 ff 00 00 00 00	goto -0x10 <LBB291_12>

0000000000007298 <LBB291_25>
    3667	15 08 22 00 00 00 00 00	if r8 == 0x0 goto +0x22 <LBB291_27>
    3668	79 85 00 00 00 00 00 00	r5 = *(u64 *)(r8 + 0x0)
    3669	bf 56 00 00 00 00 00 00	r6 = r5
    3670	77 06 00 00 06 00 00 00	r6 >>= 0x6
    3671	a7 05 00 00 ff ff ff ff	r5 ^= -0x1
    3672	77 05 00 00 07 00 00 00	r5 >>= 0x7
    3673	4f 65 00 00 00 00 00 00	r5 |= r6
    3674	5f 75 00 00 00 00 00 00	r5 &= r7
    3675	0f 25 00 00 00 00 00 00	r5 += r2
    3676	79 82 08 00 00 00 00 00	r2 = *(u64 *)(r8 + 0x8)
    3677	bf 26 00 00 00 00 00 00	r6 = r2
    3678	77 06 00 00 06 00 00 00	r6 >>= 0x6
    3679	a7 02 00 00 ff ff ff ff	r2 ^= -0x1
    3680	77 02 00 00 07 00 00 00	r2 >>= 0x7
    3681	4f 62 00 00 00 00 00 00	r2 |= r6
    3682	5f 72 00 00 00 00 00 00	r2 &= r7
    3683	0f 52 00 00 00 00 00 00	r2 += r5
    3684	79 85 10 00 00 00 00 00	r5 = *(u64 *)(r8 + 0x10)
    3685	bf 56 00 00 00 00 00 00	r6 = r5
    3686	77 06 00 00 06 00 00 00	r6 >>= 0x6
    3687	a7 05 00 00 ff ff ff ff	r5 ^= -0x1
    3688	77 05 00 00 07 00 00 00	r5 >>= 0x7
    3689	4f 65 00 00 00 00 00 00	r5 |= r6
    3690	5f 75 00 00 00 00 00 00	r5 &= r7
    3691	0f 25 00 00 00 00 00 00	r5 += r2
    3692	79 82 18 00 00 00 00 00	r2 = *(u64 *)(r8 + 0x18)
    3693	bf 26 00 00 00 00 00 00	r6 = r2
    3694	77 06 00 00 06 00 00 00	r6 >>= 0x6
    3695	a7 02 00 00 ff ff ff ff	r2 ^= -0x1
    3696	77 02 00 00 07 00 00 00	r2 >>= 0x7
    3697	4f 62 00 00 00 00 00 00	r2 |= r6
    3698	5f 72 00 00 00 00 00 00	r2 &= r7
    3699	0f 52 00 00 00 00 00 00	r2 += r5
    3700	07 08 00 00 20 00 00 00	r8 += 0x20
    3701	5d 18 dd ff 00 00 00 00	if r8 != r1 goto -0x23 <LBB291_25>

00000000000073b0 <LBB291_27>
    3702	bf 95 00 00 00 00 00 00	r5 = r9
    3703	67 05 00 00 03 00 00 00	r5 <<= 0x3
    3704	bf 31 00 00 00 00 00 00	r1 = r3
    3705	0f 51 00 00 00 00 00 00	r1 += r5
    3706	bf 48 00 00 00 00 00 00	r8 = r4
    3707	1f 98 00 00 00 00 00 00	r8 -= r9
    3708	57 09 00 00 03 00 00 00	r9 &= 0x3
    3709	bf 25 00 00 00 00 00 00	r5 = r2
    3710	18 06 00 00 ff 00 ff 00 00 00 00 00 ff 00 ff 00	r6 = 0xff00ff00ff00ff ll
    3712	5f 65 00 00 00 00 00 00	r5 &= r6
    3713	77 02 00 00 08 00 00 00	r2 >>= 0x8
    3714	5f 62 00 00 00 00 00 00	r2 &= r6
    3715	0f 52 00 00 00 00 00 00	r2 += r5
    3716	18 05 00 00 01 00 01 00 00 00 00 00 01 00 01 00	r5 = 0x1000100010001 ll
    3718	2f 52 00 00 00 00 00 00	r2 *= r5
    3719	77 02 00 00 30 00 00 00	r2 >>= 0x30
    3720	0f 02 00 00 00 00 00 00	r2 += r0
    3721	15 09 09 00 00 00 00 00	if r9 == 0x0 goto +0x9 <LBB291_14>
    3722	b7 00 00 00 00 00 00 00	r0 = 0x0
    3723	15 03 33 00 00 00 00 00	if r3 == 0x0 goto +0x33 <LBB291_33>
    3724	79 a1 f8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x8)
    3725	67 01 00 00 03 00 00 00	r1 <<= 0x3
    3726	7b 1a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r1
    3727	b7 01 00 00 c0 00 00 00	r1 = 0xc0
    3728	2d 41 1a 00 00 00 00 00	if r1 > r4 goto +0x1a <LBB291_31>
    3729	b7 04 00 00 c0 00 00 00	r4 = 0xc0
    3730	05 00 18 00 00 00 00 00	goto +0x18 <LBB291_31>

0000000000007498 <LBB291_14>
    3731	bf 20 00 00 00 00 00 00	r0 = r2
    3732	bf 84 00 00 00 00 00 00	r4 = r8
    3733	bf 13 00 00 00 00 00 00	r3 = r1
    3734	15 04 39 00 00 00 00 00	if r4 == 0x0 goto +0x39 <LBB291_20>
    3735	b7 01 00 00 c0 00 00 00	r1 = 0xc0
    3736	bf 49 00 00 00 00 00 00	r9 = r4
    3737	2d 41 01 00 00 00 00 00	if r1 > r4 goto +0x1 <LBB291_23>
    3738	b7 09 00 00 c0 00 00 00	r9 = 0xc0

00000000000074d8 <LBB291_23>
    3739	bf 91 00 00 00 00 00 00	r1 = r9
    3740	57 01 00 00 fc 00 00 00	r1 &= 0xfc
    3741	b7 02 00 00 00 00 00 00	r2 = 0x0
    3742	7b 1a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r1
    3743	15 01 d6 ff 00 00 00 00	if r1 == 0x0 goto -0x2a <LBB291_27>
    3744	79 a2 f8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x8)
    3745	67 02 00 00 03 00 00 00	r2 <<= 0x3
    3746	bf 31 00 00 00 00 00 00	r1 = r3
    3747	0f 21 00 00 00 00 00 00	r1 += r2
    3748	b7 02 00 00 00 00 00 00	r2 = 0x0
    3749	bf 38 00 00 00 00 00 00	r8 = r3
    3750	05 00 ac ff 00 00 00 00	goto -0x54 <LBB291_25>

0000000000007538 <LBB291_15>
    3751	b7 00 00 00 00 00 00 00	r0 = 0x0
    3752	15 02 27 00 00 00 00 00	if r2 == 0x0 goto +0x27 <LBB291_20>
    3753	b7 00 00 00 00 00 00 00	r0 = 0x0
    3754	05 00 26 00 00 00 00 00	goto +0x26 <LBB291_17>

0000000000007558 <LBB291_31>
    3755	79 a1 f8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x8)
    3756	0f 13 00 00 00 00 00 00	r3 += r1
    3757	b7 05 00 00 00 00 00 00	r5 = 0x0
    3758	57 04 00 00 03 00 00 00	r4 &= 0x3
    3759	67 04 00 00 03 00 00 00	r4 <<= 0x3
    3760	18 01 00 00 01 01 01 01 00 00 00 00 01 01 01 01	r1 = 0x101010101010101 ll

0000000000007590 <LBB291_32>
    3762	79 30 00 00 00 00 00 00	r0 = *(u64 *)(r3 + 0x0)
    3763	bf 06 00 00 00 00 00 00	r6 = r0
    3764	77 06 00 00 06 00 00 00	r6 >>= 0x6
    3765	a7 00 00 00 ff ff ff ff	r0 ^= -0x1
    3766	77 00 00 00 07 00 00 00	r0 >>= 0x7
    3767	4f 60 00 00 00 00 00 00	r0 |= r6
    3768	5f 10 00 00 00 00 00 00	r0 &= r1
    3769	0f 50 00 00 00 00 00 00	r0 += r5
    3770	07 03 00 00 08 00 00 00	r3 += 0x8
    3771	07 04 00 00 f8 ff ff ff	r4 += -0x8
    3772	bf 05 00 00 00 00 00 00	r5 = r0
    3773	15 04 01 00 00 00 00 00	if r4 == 0x0 goto +0x1 <LBB291_33>
    3774	05 00 f3 ff 00 00 00 00	goto -0xd <LBB291_32>

00000000000075f8 <LBB291_33>
    3775	18 01 00 00 ff 00 ff 00 00 00 00 00 ff 00 ff 00	r1 = 0xff00ff00ff00ff ll
    3777	bf 03 00 00 00 00 00 00	r3 = r0
    3778	5f 13 00 00 00 00 00 00	r3 &= r1
    3779	77 00 00 00 08 00 00 00	r0 >>= 0x8
    3780	5f 10 00 00 00 00 00 00	r0 &= r1
    3781	0f 30 00 00 00 00 00 00	r0 += r3
    3782	18 01 00 00 01 00 01 00 00 00 00 00 01 00 01 00	r1 = 0x1000100010001 ll
    3784	2f 10 00 00 00 00 00 00	r0 *= r1
    3785	77 00 00 00 30 00 00 00	r0 >>= 0x30
    3786	0f 20 00 00 00 00 00 00	r0 += r2
    3787	05 00 04 00 00 00 00 00	goto +0x4 <LBB291_20>

0000000000007660 <LBB291_19>
    3788	0f 30 00 00 00 00 00 00	r0 += r3
    3789	07 01 00 00 01 00 00 00	r1 += 0x1
    3790	07 02 00 00 ff ff ff ff	r2 += -0x1
    3791	55 02 01 00 00 00 00 00	if r2 != 0x0 goto +0x1 <LBB291_17>

0000000000007680 <LBB291_20>
    3792	95 00 00 00 00 00 00 00	exit

0000000000007688 <LBB291_17>
    3793	71 14 00 00 00 00 00 00	r4 = *(u8 *)(r1 + 0x0)
    3794	67 04 00 00 38 00 00 00	r4 <<= 0x38
    3795	c7 04 00 00 38 00 00 00	r4 s>>= 0x38
    3796	b7 03 00 00 01 00 00 00	r3 = 0x1
    3797	65 04 f6 ff bf ff ff ff	if r4 s> -0x41 goto -0xa <LBB291_19>
    3798	b7 03 00 00 00 00 00 00	r3 = 0x0
    3799	05 00 f4 ff 00 00 00 00	goto -0xc <LBB291_19>

00000000000076c0 <core::str::slice_error_fail>
    3800	85 10 00 00 01 00 00 00	call 0x1 ; <core::str::slice_error_fail_rt>
    3801	85 10 00 00 ff ff ff ff	call -0x1 ; abort

00000000000076d0 <core::str::slice_error_fail_rt>
    3802	7b 4a 38 ff 00 00 00 00	*(u64 *)(r10 - 0xc8) = r4
    3803	7b 3a 30 ff 00 00 00 00	*(u64 *)(r10 - 0xd0) = r3
    3804	b7 00 00 00 01 01 00 00	r0 = 0x101
    3805	2d 20 0d 00 00 00 00 00	if r0 > r2 goto +0xd <LBB313_2>

00000000000076f0 <LBB313_1>
    3806	bf 16 00 00 00 00 00 00	r6 = r1
    3807	0f 06 00 00 00 00 00 00	r6 += r0
    3808	07 00 00 00 ff ff ff ff	r0 += -0x1
    3809	71 66 ff ff 00 00 00 00	r6 = *(u8 *)(r6 - 0x1)
    3810	67 06 00 00 38 00 00 00	r6 <<= 0x38
    3811	c7 06 00 00 38 00 00 00	r6 s>>= 0x38
    3812	65 06 01 00 bf ff ff ff	if r6 s> -0x41 goto +0x1 <LBB313_4>
    3813	05 00 f8 ff 00 00 00 00	goto -0x8 <LBB313_1>

0000000000007730 <LBB313_4>
    3814	2d 02 51 00 00 00 00 00	if r2 > r0 goto +0x51 <LBB313_6>
    3815	1d 02 01 00 00 00 00 00	if r2 == r0 goto +0x1 <LBB313_8>
    3816	05 00 55 00 00 00 00 00	goto +0x55 <LBB313_7>

0000000000007748 <LBB313_8>
    3817	7b 0a 48 ff 00 00 00 00	*(u64 *)(r10 - 0xb8) = r0
    3818	05 00 01 00 00 00 00 00	goto +0x1 <LBB313_3>

0000000000007758 <LBB313_2>
    3819	7b 2a 48 ff 00 00 00 00	*(u64 *)(r10 - 0xb8) = r2

0000000000007760 <LBB313_3>
    3820	7b 1a 40 ff 00 00 00 00	*(u64 *)(r10 - 0xc0) = r1
    3821	b7 00 00 00 00 00 00 00	r0 = 0x0
    3822	18 06 00 00 e0 96 00 00 00 00 00 00 00 00 00 00	r6 = 0x96e0 ll

0000000000007780 <LBB313_10>
    3824	7b 0a 58 ff 00 00 00 00	*(u64 *)(r10 - 0xa8) = r0
    3825	7b 6a 50 ff 00 00 00 00	*(u64 *)(r10 - 0xb0) = r6
    3826	2d 23 22 00 00 00 00 00	if r3 > r2 goto +0x22 <LBB313_13>
    3827	2d 24 21 00 00 00 00 00	if r4 > r2 goto +0x21 <LBB313_13>
    3828	2d 43 01 00 00 00 00 00	if r3 > r4 goto +0x1 <LBB313_42>
    3829	05 00 4c 00 00 00 00 00	goto +0x4c <LBB313_17>

00000000000077b0 <LBB313_42>
    3830	18 01 00 00 90 a6 00 00 00 00 00 00 00 00 00 00	r1 = 0xa690 ll
    3832	7b 1a 90 ff 00 00 00 00	*(u64 *)(r10 - 0x70) = r1
    3833	b7 01 00 00 04 00 00 00	r1 = 0x4
    3834	7b 1a 98 ff 00 00 00 00	*(u64 *)(r10 - 0x68) = r1
    3835	7b 1a a8 ff 00 00 00 00	*(u64 *)(r10 - 0x58) = r1
    3836	bf a1 00 00 00 00 00 00	r1 = r10
    3837	07 01 00 00 b0 ff ff ff	r1 += -0x50
    3838	7b 1a a0 ff 00 00 00 00	*(u64 *)(r10 - 0x60) = r1
    3839	b7 01 00 00 00 00 00 00	r1 = 0x0
    3840	7b 1a 80 ff 00 00 00 00	*(u64 *)(r10 - 0x80) = r1
    3841	bf a1 00 00 00 00 00 00	r1 = r10
    3842	07 01 00 00 50 ff ff ff	r1 += -0xb0
    3843	7b 1a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r1
    3844	18 01 00 00 00 8f 00 00 00 00 00 00 00 00 00 00	r1 = 0x8f00 ll
    3846	7b 1a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r1
    3847	7b 1a d8 ff 00 00 00 00	*(u64 *)(r10 - 0x28) = r1
    3848	bf a1 00 00 00 00 00 00	r1 = r10
    3849	07 01 00 00 40 ff ff ff	r1 += -0xc0
    3850	7b 1a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r1
    3851	bf a1 00 00 00 00 00 00	r1 = r10
    3852	07 01 00 00 38 ff ff ff	r1 += -0xc8
    3853	7b 1a c0 ff 00 00 00 00	*(u64 *)(r10 - 0x40) = r1
    3854	18 01 00 00 68 8e 00 00 00 00 00 00 00 00 00 00	r1 = 0x8e68 ll
    3856	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 0x38) = r1
    3857	7b 1a b8 ff 00 00 00 00	*(u64 *)(r10 - 0x48) = r1
    3858	bf a1 00 00 00 00 00 00	r1 = r10
    3859	07 01 00 00 30 ff ff ff	r1 += -0xd0
    3860	05 00 1d 00 00 00 00 00	goto +0x1d <LBB313_16>

00000000000078a8 <LBB313_13>
    3861	2d 23 01 00 00 00 00 00	if r3 > r2 goto +0x1 <LBB313_15>
    3862	bf 43 00 00 00 00 00 00	r3 = r4

00000000000078b8 <LBB313_15>
    3863	7b 3a 70 ff 00 00 00 00	*(u64 *)(r10 - 0x90) = r3
    3864	18 01 00 00 60 a6 00 00 00 00 00 00 00 00 00 00	r1 = 0xa660 ll
    3866	7b 1a 90 ff 00 00 00 00	*(u64 *)(r10 - 0x70) = r1
    3867	b7 01 00 00 03 00 00 00	r1 = 0x3
    3868	7b 1a 98 ff 00 00 00 00	*(u64 *)(r10 - 0x68) = r1
    3869	7b 1a a8 ff 00 00 00 00	*(u64 *)(r10 - 0x58) = r1
    3870	bf a1 00 00 00 00 00 00	r1 = r10
    3871	07 01 00 00 b0 ff ff ff	r1 += -0x50
    3872	7b 1a a0 ff 00 00 00 00	*(u64 *)(r10 - 0x60) = r1
    3873	b7 01 00 00 00 00 00 00	r1 = 0x0
    3874	7b 1a 80 ff 00 00 00 00	*(u64 *)(r10 - 0x80) = r1
    3875	bf a1 00 00 00 00 00 00	r1 = r10
    3876	07 01 00 00 50 ff ff ff	r1 += -0xb0
    3877	7b 1a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r1
    3878	18 01 00 00 00 8f 00 00 00 00 00 00 00 00 00 00	r1 = 0x8f00 ll
    3880	7b 1a d8 ff 00 00 00 00	*(u64 *)(r10 - 0x28) = r1
    3881	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 0x38) = r1
    3882	bf a1 00 00 00 00 00 00	r1 = r10
    3883	07 01 00 00 40 ff ff ff	r1 += -0xc0
    3884	7b 1a c0 ff 00 00 00 00	*(u64 *)(r10 - 0x40) = r1
    3885	18 01 00 00 68 8e 00 00 00 00 00 00 00 00 00 00	r1 = 0x8e68 ll
    3887	7b 1a b8 ff 00 00 00 00	*(u64 *)(r10 - 0x48) = r1
    3888	bf a1 00 00 00 00 00 00	r1 = r10
    3889	07 01 00 00 70 ff ff ff	r1 += -0x90

0000000000007990 <LBB313_16>
    3890	7b 1a b0 ff 00 00 00 00	*(u64 *)(r10 - 0x50) = r1
    3891	bf a1 00 00 00 00 00 00	r1 = r10
    3892	07 01 00 00 80 ff ff ff	r1 += -0x80
    3893	bf 52 00 00 00 00 00 00	r2 = r5
    3894	85 10 00 00 de f7 ff ff	call -0x822 ; <core::panicking::panic_fmt>
    3895	85 10 00 00 ff ff ff ff	call -0x1 ; abort

00000000000079c0 <LBB313_6>
    3896	bf 16 00 00 00 00 00 00	r6 = r1
    3897	0f 06 00 00 00 00 00 00	r6 += r0
    3898	71 66 00 00 00 00 00 00	r6 = *(u8 *)(r6 + 0x0)
    3899	67 06 00 00 38 00 00 00	r6 <<= 0x38
    3900	c7 06 00 00 38 00 00 00	r6 s>>= 0x38
    3901	65 06 08 00 bf ff ff ff	if r6 s> -0x41 goto +0x8 <LBB313_9>

00000000000079f0 <LBB313_7>
    3902	b7 03 00 00 00 00 00 00	r3 = 0x0
    3903	bf 04 00 00 00 00 00 00	r4 = r0
    3904	85 10 00 00 97 ff ff ff	call -0x69 ; <core::str::slice_error_fail>
    3905	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000007a10 <LBB313_17>
    3906	15 03 10 00 00 00 00 00	if r3 == 0x0 goto +0x10 <LBB313_21>
    3907	2d 32 08 00 00 00 00 00	if r2 > r3 goto +0x8 <LBB313_20>
    3908	1d 23 0e 00 00 00 00 00	if r3 == r2 goto +0xe <LBB313_21>
    3909	05 00 0e 00 00 00 00 00	goto +0xe <LBB313_22>

0000000000007a30 <LBB313_9>
    3910	7b 0a 48 ff 00 00 00 00	*(u64 *)(r10 - 0xb8) = r0
    3911	7b 1a 40 ff 00 00 00 00	*(u64 *)(r10 - 0xc0) = r1
    3912	b7 00 00 00 05 00 00 00	r0 = 0x5
    3913	18 06 00 00 03 99 00 00 00 00 00 00 00 00 00 00	r6 = 0x9903 ll
    3915	05 00 a4 ff 00 00 00 00	goto -0x5c <LBB313_10>

0000000000007a60 <LBB313_20>
    3916	bf 10 00 00 00 00 00 00	r0 = r1
    3917	0f 30 00 00 00 00 00 00	r0 += r3
    3918	71 00 00 00 00 00 00 00	r0 = *(u8 *)(r0 + 0x0)
    3919	67 00 00 00 38 00 00 00	r0 <<= 0x38
    3920	c7 00 00 00 38 00 00 00	r0 s>>= 0x38
    3921	b7 06 00 00 c0 ff ff ff	r6 = -0x40
    3922	6d 06 01 00 00 00 00 00	if r6 s> r0 goto +0x1 <LBB313_22>

0000000000007a98 <LBB313_21>
    3923	bf 43 00 00 00 00 00 00	r3 = r4

0000000000007aa0 <LBB313_22>
    3924	7b 3a 60 ff 00 00 00 00	*(u64 *)(r10 - 0xa0) = r3
    3925	bf 24 00 00 00 00 00 00	r4 = r2
    3926	3d 23 21 00 00 00 00 00	if r3 >= r2 goto +0x21 <LBB313_32>
    3927	bf 30 00 00 00 00 00 00	r0 = r3
    3928	07 00 00 00 fd ff ff ff	r0 += -0x3
    3929	b7 04 00 00 00 00 00 00	r4 = 0x0
    3930	b7 06 00 00 01 00 00 00	r6 = 0x1
    3931	2d 30 01 00 00 00 00 00	if r0 > r3 goto +0x1 <LBB313_25>
    3932	b7 06 00 00 00 00 00 00	r6 = 0x0

0000000000007ae8 <LBB313_25>
    3933	55 06 01 00 00 00 00 00	if r6 != 0x0 goto +0x1 <LBB313_27>
    3934	bf 04 00 00 00 00 00 00	r4 = r0

0000000000007af8 <LBB313_27>
    3935	bf 30 00 00 00 00 00 00	r0 = r3
    3936	07 00 00 00 01 00 00 00	r0 += 0x1
    3937	3d 40 06 00 00 00 00 00	if r0 >= r4 goto +0x6 <LBB313_29>
    3938	bf 41 00 00 00 00 00 00	r1 = r4
    3939	bf 02 00 00 00 00 00 00	r2 = r0
    3940	18 03 00 00 20 a7 00 00 00 00 00 00 00 00 00 00	r3 = 0xa720 ll
    3942	85 10 00 00 96 fe ff ff	call -0x16a ; <core::slice::index::slice_index_order_fail>
    3943	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000007b40 <LBB313_29>
    3944	bf 16 00 00 00 00 00 00	r6 = r1
    3945	0f 46 00 00 00 00 00 00	r6 += r4
    3946	bf 14 00 00 00 00 00 00	r4 = r1
    3947	0f 04 00 00 00 00 00 00	r4 += r0
    3948	1f 64 00 00 00 00 00 00	r4 -= r6
    3949	b7 00 00 00 c0 ff ff ff	r0 = -0x40

0000000000007b70 <LBB313_30>
    3950	bf 16 00 00 00 00 00 00	r6 = r1
    3951	0f 36 00 00 00 00 00 00	r6 += r3
    3952	07 03 00 00 ff ff ff ff	r3 += -0x1
    3953	07 04 00 00 ff ff ff ff	r4 += -0x1
    3954	71 66 00 00 00 00 00 00	r6 = *(u8 *)(r6 + 0x0)
    3955	67 06 00 00 38 00 00 00	r6 <<= 0x38
    3956	c7 06 00 00 38 00 00 00	r6 s>>= 0x38
    3957	6d 60 f8 ff 00 00 00 00	if r0 s> r6 goto -0x8 <LBB313_30>
    3958	07 03 00 00 01 00 00 00	r3 += 0x1
    3959	bf 34 00 00 00 00 00 00	r4 = r3

0000000000007bc0 <LBB313_32>
    3960	15 04 03 00 00 00 00 00	if r4 == 0x0 goto +0x3 <LBB313_37>
    3961	2d 42 2c 00 00 00 00 00	if r2 > r4 goto +0x2c <LBB313_35>
    3962	1d 24 01 00 00 00 00 00	if r4 == r2 goto +0x1 <LBB313_37>
    3963	05 00 30 00 00 00 00 00	goto +0x30 <LBB313_36>

0000000000007be0 <LBB313_37>
    3964	1d 24 23 00 00 00 00 00	if r4 == r2 goto +0x23 <LBB313_43>
    3965	0f 41 00 00 00 00 00 00	r1 += r4
    3966	71 16 00 00 00 00 00 00	r6 = *(u8 *)(r1 + 0x0)
    3967	bf 62 00 00 00 00 00 00	r2 = r6
    3968	67 02 00 00 38 00 00 00	r2 <<= 0x38
    3969	c7 02 00 00 38 00 00 00	r2 s>>= 0x38
    3970	65 02 2d 00 ff ff ff ff	if r2 s> -0x1 goto +0x2d <LBB313_44>
    3971	71 12 01 00 00 00 00 00	r2 = *(u8 *)(r1 + 0x1)
    3972	57 02 00 00 3f 00 00 00	r2 &= 0x3f
    3973	bf 63 00 00 00 00 00 00	r3 = r6
    3974	57 03 00 00 1f 00 00 00	r3 &= 0x1f
    3975	bf 30 00 00 00 00 00 00	r0 = r3
    3976	67 00 00 00 06 00 00 00	r0 <<= 0x6
    3977	4f 20 00 00 00 00 00 00	r0 |= r2
    3978	25 06 01 00 df 00 00 00	if r6 > 0xdf goto +0x1 <LBB313_40>
    3979	05 00 25 00 00 00 00 00	goto +0x25 <LBB313_45>

0000000000007c60 <LBB313_40>
    3980	67 02 00 00 06 00 00 00	r2 <<= 0x6
    3981	71 10 02 00 00 00 00 00	r0 = *(u8 *)(r1 + 0x2)
    3982	57 00 00 00 3f 00 00 00	r0 &= 0x3f
    3983	4f 02 00 00 00 00 00 00	r2 |= r0
    3984	bf 37 00 00 00 00 00 00	r7 = r3
    3985	67 07 00 00 0c 00 00 00	r7 <<= 0xc
    3986	bf 20 00 00 00 00 00 00	r0 = r2
    3987	4f 70 00 00 00 00 00 00	r0 |= r7
    3988	b7 07 00 00 f0 00 00 00	r7 = 0xf0
    3989	2d 67 1b 00 00 00 00 00	if r7 > r6 goto +0x1b <LBB313_45>
    3990	67 02 00 00 06 00 00 00	r2 <<= 0x6
    3991	71 11 03 00 00 00 00 00	r1 = *(u8 *)(r1 + 0x3)
    3992	57 01 00 00 3f 00 00 00	r1 &= 0x3f
    3993	4f 12 00 00 00 00 00 00	r2 |= r1
    3994	67 03 00 00 12 00 00 00	r3 <<= 0x12
    3995	57 03 00 00 00 00 1c 00	r3 &= 0x1c0000
    3996	4f 32 00 00 00 00 00 00	r2 |= r3
    3997	bf 20 00 00 00 00 00 00	r0 = r2
    3998	15 02 01 00 00 00 11 00	if r2 == 0x110000 goto +0x1 <LBB313_43>
    3999	05 00 11 00 00 00 00 00	goto +0x11 <LBB313_45>

0000000000007d00 <LBB313_43>
    4000	18 01 00 00 e0 96 00 00 00 00 00 00 00 00 00 00	r1 = 0x96e0 ll
    4002	b7 02 00 00 2b 00 00 00	r2 = 0x2b
    4003	bf 53 00 00 00 00 00 00	r3 = r5
    4004	85 10 00 00 7e f7 ff ff	call -0x882 ; <core::panicking::panic>
    4005	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000007d30 <LBB313_35>
    4006	bf 13 00 00 00 00 00 00	r3 = r1
    4007	0f 43 00 00 00 00 00 00	r3 += r4
    4008	71 33 00 00 00 00 00 00	r3 = *(u8 *)(r3 + 0x0)
    4009	67 03 00 00 38 00 00 00	r3 <<= 0x38
    4010	c7 03 00 00 38 00 00 00	r3 s>>= 0x38
    4011	65 03 d0 ff bf ff ff ff	if r3 s> -0x41 goto -0x30 <LBB313_37>

0000000000007d60 <LBB313_36>
    4012	bf 43 00 00 00 00 00 00	r3 = r4
    4013	bf 24 00 00 00 00 00 00	r4 = r2
    4014	85 10 00 00 29 ff ff ff	call -0xd7 ; <core::str::slice_error_fail>
    4015	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000007d80 <LBB313_44>
    4016	bf 60 00 00 00 00 00 00	r0 = r6

0000000000007d88 <LBB313_45>
    4017	b7 01 00 00 01 00 00 00	r1 = 0x1
    4018	63 0a 6c ff 00 00 00 00	*(u32 *)(r10 - 0x94) = r0
    4019	b7 02 00 00 80 00 00 00	r2 = 0x80
    4020	2d 02 07 00 00 00 00 00	if r2 > r0 goto +0x7 <LBB313_49>
    4021	b7 01 00 00 02 00 00 00	r1 = 0x2
    4022	b7 02 00 00 00 08 00 00	r2 = 0x800
    4023	2d 02 04 00 00 00 00 00	if r2 > r0 goto +0x4 <LBB313_49>
    4024	b7 01 00 00 03 00 00 00	r1 = 0x3
    4025	b7 02 00 00 00 00 01 00	r2 = 0x10000
    4026	2d 02 01 00 00 00 00 00	if r2 > r0 goto +0x1 <LBB313_49>
    4027	b7 01 00 00 04 00 00 00	r1 = 0x4

0000000000007de0 <LBB313_49>
    4028	7b 4a 70 ff 00 00 00 00	*(u64 *)(r10 - 0x90) = r4
    4029	0f 41 00 00 00 00 00 00	r1 += r4
    4030	7b 1a 78 ff 00 00 00 00	*(u64 *)(r10 - 0x88) = r1
    4031	18 01 00 00 d0 a6 00 00 00 00 00 00 00 00 00 00	r1 = 0xa6d0 ll
    4033	7b 1a 90 ff 00 00 00 00	*(u64 *)(r10 - 0x70) = r1
    4034	b7 01 00 00 05 00 00 00	r1 = 0x5
    4035	7b 1a 98 ff 00 00 00 00	*(u64 *)(r10 - 0x68) = r1
    4036	7b 1a a8 ff 00 00 00 00	*(u64 *)(r10 - 0x58) = r1
    4037	bf a1 00 00 00 00 00 00	r1 = r10
    4038	07 01 00 00 b0 ff ff ff	r1 += -0x50
    4039	7b 1a a0 ff 00 00 00 00	*(u64 *)(r10 - 0x60) = r1
    4040	b7 01 00 00 00 00 00 00	r1 = 0x0
    4041	7b 1a 80 ff 00 00 00 00	*(u64 *)(r10 - 0x80) = r1
    4042	bf a1 00 00 00 00 00 00	r1 = r10
    4043	07 01 00 00 50 ff ff ff	r1 += -0xb0
    4044	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
    4045	18 01 00 00 00 8f 00 00 00 00 00 00 00 00 00 00	r1 = 0x8f00 ll
    4047	7b 1a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r1
    4048	7b 1a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r1
    4049	bf a1 00 00 00 00 00 00	r1 = r10
    4050	07 01 00 00 40 ff ff ff	r1 += -0xc0
    4051	7b 1a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r1
    4052	18 01 00 00 50 34 00 00 00 00 00 00 00 00 00 00	r1 = 0x3450 ll
    4054	7b 1a d8 ff 00 00 00 00	*(u64 *)(r10 - 0x28) = r1
    4055	bf a1 00 00 00 00 00 00	r1 = r10
    4056	07 01 00 00 70 ff ff ff	r1 += -0x90
    4057	7b 1a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r1
    4058	18 01 00 00 20 66 00 00 00 00 00 00 00 00 00 00	r1 = 0x6620 ll
    4060	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 0x38) = r1
    4061	bf a1 00 00 00 00 00 00	r1 = r10
    4062	07 01 00 00 6c ff ff ff	r1 += -0x94
    4063	7b 1a c0 ff 00 00 00 00	*(u64 *)(r10 - 0x40) = r1
    4064	18 01 00 00 68 8e 00 00 00 00 00 00 00 00 00 00	r1 = 0x8e68 ll
    4066	7b 1a b8 ff 00 00 00 00	*(u64 *)(r10 - 0x48) = r1
    4067	bf a1 00 00 00 00 00 00	r1 = r10
    4068	07 01 00 00 60 ff ff ff	r1 += -0xa0
    4069	05 00 4c ff 00 00 00 00	goto -0xb4 <LBB313_16>

0000000000007f30 <core::unicode::printable::check>
    4070	bf 19 00 00 00 00 00 00	r9 = r1
    4071	79 51 10 f0 00 00 00 00	r1 = *(u64 *)(r5 - 0xff0)
    4072	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
    4073	79 56 08 f0 00 00 00 00	r6 = *(u64 *)(r5 - 0xff8)
    4074	15 03 2a 00 00 00 00 00	if r3 == 0x0 goto +0x2a <LBB332_3>
    4075	67 03 00 00 01 00 00 00	r3 <<= 0x1
    4076	bf 21 00 00 00 00 00 00	r1 = r2
    4077	0f 31 00 00 00 00 00 00	r1 += r3
    4078	7b 1a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r1
    4079	79 58 00 f0 00 00 00 00	r8 = *(u64 *)(r5 - 0x1000)
    4080	bf 93 00 00 00 00 00 00	r3 = r9
    4081	57 03 00 00 00 ff 00 00	r3 &= 0xff00
    4082	77 03 00 00 08 00 00 00	r3 >>= 0x8
    4083	b7 00 00 00 00 00 00 00	r0 = 0x0
    4084	7b 4a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r4
    4085	7b 8a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r8
    4086	05 00 04 00 00 00 00 00	goto +0x4 <LBB332_2>

0000000000007fb8 <LBB332_6>
    4087	2d 31 1d 00 00 00 00 00	if r1 > r3 goto +0x1d <LBB332_3>
    4088	bf 50 00 00 00 00 00 00	r0 = r5
    4089	79 a1 f8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x8)
    4090	1d 12 1a 00 00 00 00 00	if r2 == r1 goto +0x1a <LBB332_3>

0000000000007fd8 <LBB332_2>
    4091	71 27 01 00 00 00 00 00	r7 = *(u8 *)(r2 + 0x1)
    4092	bf 05 00 00 00 00 00 00	r5 = r0
    4093	0f 75 00 00 00 00 00 00	r5 += r7
    4094	71 21 00 00 00 00 00 00	r1 = *(u8 *)(r2 + 0x0)
    4095	07 02 00 00 02 00 00 00	r2 += 0x2
    4096	1d 31 01 00 00 00 00 00	if r1 == r3 goto +0x1 <LBB332_8>
    4097	05 00 f5 ff 00 00 00 00	goto -0xb <LBB332_6>

0000000000008010 <LBB332_8>
    4098	2d 50 39 00 00 00 00 00	if r0 > r5 goto +0x39 <LBB332_10>
    4099	2d 85 3e 00 00 00 00 00	if r5 > r8 goto +0x3e <LBB332_11>
    4100	0f 04 00 00 00 00 00 00	r4 += r0

0000000000008028 <LBB332_13>
    4101	15 07 09 00 00 00 00 00	if r7 == 0x0 goto +0x9 <LBB332_16>
    4102	b7 00 00 00 00 00 00 00	r0 = 0x0
    4103	07 07 00 00 ff ff ff ff	r7 += -0x1
    4104	bf 91 00 00 00 00 00 00	r1 = r9
    4105	57 01 00 00 ff 00 00 00	r1 &= 0xff
    4106	71 48 00 00 00 00 00 00	r8 = *(u8 *)(r4 + 0x0)
    4107	07 04 00 00 01 00 00 00	r4 += 0x1
    4108	5d 18 f8 ff 00 00 00 00	if r8 != r1 goto -0x8 <LBB332_13>

0000000000008068 <LBB332_15>
    4109	57 00 00 00 01 00 00 00	r0 &= 0x1
    4110	95 00 00 00 00 00 00 00	exit

0000000000008078 <LBB332_16>
    4111	bf 50 00 00 00 00 00 00	r0 = r5
    4112	79 a4 e0 ff 00 00 00 00	r4 = *(u64 *)(r10 - 0x20)
    4113	79 a8 e8 ff 00 00 00 00	r8 = *(u64 *)(r10 - 0x18)
    4114	79 a1 f8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x8)
    4115	1d 12 01 00 00 00 00 00	if r2 == r1 goto +0x1 <LBB332_3>
    4116	05 00 e6 ff 00 00 00 00	goto -0x1a <LBB332_2>

00000000000080a8 <LBB332_3>
    4117	b7 00 00 00 01 00 00 00	r0 = 0x1
    4118	79 a1 f0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x10)
    4119	15 01 f5 ff 00 00 00 00	if r1 == 0x0 goto -0xb <LBB332_15>
    4120	bf 62 00 00 00 00 00 00	r2 = r6
    4121	79 a1 f0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x10)
    4122	0f 12 00 00 00 00 00 00	r2 += r1
    4123	b7 00 00 00 01 00 00 00	r0 = 0x1
    4124	57 09 00 00 ff ff 00 00	r9 &= 0xffff
    4125	b7 03 00 00 00 00 00 00	r3 = 0x0
    4126	05 00 06 00 00 00 00 00	goto +0x6 <LBB332_5>

00000000000080f8 <LBB332_21>
    4127	1f 49 00 00 00 00 00 00	r9 -= r4
    4128	67 09 00 00 20 00 00 00	r9 <<= 0x20
    4129	c7 09 00 00 20 00 00 00	r9 s>>= 0x20
    4130	6d 93 ea ff 00 00 00 00	if r3 s> r9 goto -0x16 <LBB332_15>
    4131	a7 00 00 00 01 00 00 00	r0 ^= 0x1
    4132	1d 26 e8 ff 00 00 00 00	if r6 == r2 goto -0x18 <LBB332_15>

0000000000008128 <LBB332_5>
    4133	bf 65 00 00 00 00 00 00	r5 = r6
    4134	07 05 00 00 01 00 00 00	r5 += 0x1
    4135	71 64 00 00 00 00 00 00	r4 = *(u8 *)(r6 + 0x0)
    4136	bf 41 00 00 00 00 00 00	r1 = r4
    4137	67 01 00 00 38 00 00 00	r1 <<= 0x38
    4138	c7 01 00 00 38 00 00 00	r1 s>>= 0x38
    4139	6d 13 02 00 00 00 00 00	if r3 s> r1 goto +0x2 <LBB332_18>
    4140	bf 56 00 00 00 00 00 00	r6 = r5
    4141	05 00 f1 ff 00 00 00 00	goto -0xf <LBB332_21>

0000000000008170 <LBB332_18>
    4142	5d 25 07 00 00 00 00 00	if r5 != r2 goto +0x7 <LBB332_20>
    4143	18 01 00 00 e0 96 00 00 00 00 00 00 00 00 00 00	r1 = 0x96e0 ll
    4145	b7 02 00 00 2b 00 00 00	r2 = 0x2b
    4146	18 03 00 00 50 a7 00 00 00 00 00 00 00 00 00 00	r3 = 0xa750 ll
    4148	85 10 00 00 ee f6 ff ff	call -0x912 ; <core::panicking::panic>
    4149	85 10 00 00 ff ff ff ff	call -0x1 ; abort

00000000000081b0 <LBB332_20>
    4150	57 04 00 00 7f 00 00 00	r4 &= 0x7f
    4151	67 04 00 00 08 00 00 00	r4 <<= 0x8
    4152	71 61 01 00 00 00 00 00	r1 = *(u8 *)(r6 + 0x1)
    4153	4f 14 00 00 00 00 00 00	r4 |= r1
    4154	07 06 00 00 02 00 00 00	r6 += 0x2
    4155	05 00 e3 ff 00 00 00 00	goto -0x1d <LBB332_21>

00000000000081e0 <LBB332_10>
    4156	bf 01 00 00 00 00 00 00	r1 = r0
    4157	bf 52 00 00 00 00 00 00	r2 = r5
    4158	18 03 00 00 38 a7 00 00 00 00 00 00 00 00 00 00	r3 = 0xa738 ll
    4160	85 10 00 00 bc fd ff ff	call -0x244 ; <core::slice::index::slice_index_order_fail>
    4161	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000008210 <LBB332_11>
    4162	bf 51 00 00 00 00 00 00	r1 = r5
    4163	79 a2 e8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x18)
    4164	18 03 00 00 38 a7 00 00 00 00 00 00 00 00 00 00	r3 = 0xa738 ll
    4166	85 10 00 00 98 fd ff ff	call -0x268 ; <core::slice::index::slice_end_index_len_fail>
    4167	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000008240 <core::unicode::printable::is_printable>
    4168	b7 00 00 00 00 00 00 00	r0 = 0x0
    4169	bf 12 00 00 00 00 00 00	r2 = r1
    4170	67 02 00 00 20 00 00 00	r2 <<= 0x20
    4171	77 02 00 00 20 00 00 00	r2 >>= 0x20
    4172	b7 03 00 00 20 00 00 00	r3 = 0x20
    4173	2d 23 27 00 00 00 00 00	if r3 > r2 goto +0x27 <LBB333_7>
    4174	b7 00 00 00 01 00 00 00	r0 = 0x1
    4175	b7 03 00 00 7f 00 00 00	r3 = 0x7f
    4176	2d 23 24 00 00 00 00 00	if r3 > r2 goto +0x24 <LBB333_7>
    4177	bf 12 00 00 00 00 00 00	r2 = r1
    4178	67 02 00 00 20 00 00 00	r2 <<= 0x20
    4179	77 02 00 00 20 00 00 00	r2 >>= 0x20
    4180	b7 03 00 00 00 00 01 00	r3 = 0x10000
    4181	2d 23 11 00 00 00 00 00	if r3 > r2 goto +0x11 <LBB333_5>
    4182	b7 03 00 00 00 00 02 00	r3 = 0x20000
    4183	2d 23 01 00 00 00 00 00	if r3 > r2 goto +0x1 <LBB333_4>
    4184	05 00 1d 00 00 00 00 00	goto +0x1d <LBB333_8>

00000000000082c8 <LBB333_4>
    4185	18 02 00 00 5d 9d 00 00 00 00 00 00 00 00 00 00	r2 = 0x9d5d ll
    4187	7b 2a 08 f0 00 00 00 00	*(u64 *)(r10 - 0xff8) = r2
    4188	b7 02 00 00 c2 01 00 00	r2 = 0x1c2
    4189	7b 2a 10 f0 00 00 00 00	*(u64 *)(r10 - 0xff0) = r2
    4190	b7 02 00 00 c4 00 00 00	r2 = 0xc4
    4191	7b 2a 00 f0 00 00 00 00	*(u64 *)(r10 - 0x1000) = r2
    4192	bf a5 00 00 00 00 00 00	r5 = r10
    4193	18 02 00 00 41 9c 00 00 00 00 00 00 00 00 00 00	r2 = 0x9c41 ll
    4195	b7 03 00 00 2c 00 00 00	r3 = 0x2c
    4196	18 04 00 00 99 9c 00 00 00 00 00 00 00 00 00 00	r4 = 0x9c99 ll
    4198	05 00 0d 00 00 00 00 00	goto +0xd <LBB333_6>

0000000000008338 <LBB333_5>
    4199	18 02 00 00 12 9b 00 00 00 00 00 00 00 00 00 00	r2 = 0x9b12 ll
    4201	7b 2a 08 f0 00 00 00 00	*(u64 *)(r10 - 0xff8) = r2
    4202	b7 02 00 00 2f 01 00 00	r2 = 0x12f
    4203	7b 2a 10 f0 00 00 00 00	*(u64 *)(r10 - 0xff0) = r2
    4204	b7 02 00 00 1f 01 00 00	r2 = 0x11f
    4205	7b 2a 00 f0 00 00 00 00	*(u64 *)(r10 - 0x1000) = r2
    4206	bf a5 00 00 00 00 00 00	r5 = r10
    4207	18 02 00 00 a3 99 00 00 00 00 00 00 00 00 00 00	r2 = 0x99a3 ll
    4209	b7 03 00 00 28 00 00 00	r3 = 0x28
    4210	18 04 00 00 f3 99 00 00 00 00 00 00 00 00 00 00	r4 = 0x99f3 ll

00000000000083a0 <LBB333_6>
    4212	85 10 00 00 71 ff ff ff	call -0x8f ; <core::unicode::printable::check>

00000000000083a8 <LBB333_7>
    4213	95 00 00 00 00 00 00 00	exit

00000000000083b0 <LBB333_8>
    4214	bf 14 00 00 00 00 00 00	r4 = r1
    4215	07 04 00 00 1f 14 fd ff	r4 += -0x2ebe1
    4216	67 04 00 00 20 00 00 00	r4 <<= 0x20
    4217	77 04 00 00 20 00 00 00	r4 >>= 0x20
    4218	b7 03 00 00 01 00 00 00	r3 = 0x1
    4219	b7 05 00 00 1f 0c 00 00	r5 = 0xc1f
    4220	b7 02 00 00 01 00 00 00	r2 = 0x1
    4221	2d 45 01 00 00 00 00 00	if r5 > r4 goto +0x1 <LBB333_10>
    4222	b7 02 00 00 00 00 00 00	r2 = 0x0

00000000000083f8 <LBB333_10>
    4223	bf 15 00 00 00 00 00 00	r5 = r1
    4224	07 05 00 00 e2 05 fd ff	r5 += -0x2fa1e
    4225	67 05 00 00 20 00 00 00	r5 <<= 0x20
    4226	77 05 00 00 20 00 00 00	r5 >>= 0x20
    4227	b7 00 00 00 e2 05 00 00	r0 = 0x5e2
    4228	b7 04 00 00 01 00 00 00	r4 = 0x1
    4229	2d 50 01 00 00 00 00 00	if r0 > r5 goto +0x1 <LBB333_12>
    4230	b7 04 00 00 00 00 00 00	r4 = 0x0

0000000000008438 <LBB333_12>
    4231	bf 10 00 00 00 00 00 00	r0 = r1
    4232	07 00 00 00 c6 48 fd ff	r0 += -0x2b73a
    4233	67 00 00 00 20 00 00 00	r0 <<= 0x20
    4234	77 00 00 00 20 00 00 00	r0 >>= 0x20
    4235	b7 06 00 00 06 00 00 00	r6 = 0x6
    4236	b7 05 00 00 01 00 00 00	r5 = 0x1
    4237	2d 06 01 00 00 00 00 00	if r6 > r0 goto +0x1 <LBB333_14>
    4238	b7 05 00 00 00 00 00 00	r5 = 0x0

0000000000008478 <LBB333_14>
    4239	bf 10 00 00 00 00 00 00	r0 = r1
    4240	07 00 00 00 5e 31 fd ff	r0 += -0x2cea2
    4241	67 00 00 00 20 00 00 00	r0 <<= 0x20
    4242	77 00 00 00 20 00 00 00	r0 >>= 0x20
    4243	b7 06 00 00 0e 00 00 00	r6 = 0xe
    4244	2d 06 01 00 00 00 00 00	if r6 > r0 goto +0x1 <LBB333_16>
    4245	b7 03 00 00 00 00 00 00	r3 = 0x0

00000000000084b0 <LBB333_16>
    4246	67 03 00 00 01 00 00 00	r3 <<= 0x1
    4247	4f 35 00 00 00 00 00 00	r5 |= r3
    4248	67 04 00 00 01 00 00 00	r4 <<= 0x1
    4249	4f 42 00 00 00 00 00 00	r2 |= r4
    4250	67 02 00 00 02 00 00 00	r2 <<= 0x2
    4251	4f 25 00 00 00 00 00 00	r5 |= r2
    4252	b7 00 00 00 00 00 00 00	r0 = 0x0
    4253	55 05 d7 ff 00 00 00 00	if r5 != 0x0 goto -0x29 <LBB333_7>
    4254	bf 12 00 00 00 00 00 00	r2 = r1
    4255	07 02 00 00 b5 ec fc ff	r2 += -0x3134b
    4256	67 02 00 00 20 00 00 00	r2 <<= 0x20
    4257	77 02 00 00 20 00 00 00	r2 >>= 0x20
    4258	b7 03 00 00 05 00 00 00	r3 = 0x5
    4259	b7 00 00 00 00 00 00 00	r0 = 0x0
    4260	2d 23 d0 ff 00 00 00 00	if r3 > r2 goto -0x30 <LBB333_7>
    4261	bf 12 00 00 00 00 00 00	r2 = r1
    4262	07 02 00 00 50 dc fc ff	r2 += -0x323b0
    4263	67 02 00 00 20 00 00 00	r2 <<= 0x20
    4264	77 02 00 00 20 00 00 00	r2 >>= 0x20
    4265	b7 03 00 00 50 dd 0a 00	r3 = 0xadd50
    4266	b7 00 00 00 00 00 00 00	r0 = 0x0
    4267	2d 23 c9 ff 00 00 00 00	if r3 > r2 goto -0x37 <LBB333_7>
    4268	bf 12 00 00 00 00 00 00	r2 = r1
    4269	57 02 00 00 e0 ff ff ff	r2 &= -0x20
    4270	67 02 00 00 20 00 00 00	r2 <<= 0x20
    4271	77 02 00 00 20 00 00 00	r2 >>= 0x20
    4272	b7 00 00 00 00 00 00 00	r0 = 0x0
    4273	15 02 c3 ff e0 a6 02 00	if r2 == 0x2a6e0 goto -0x3d <LBB333_7>
    4274	bf 12 00 00 00 00 00 00	r2 = r1
    4275	57 02 00 00 fe ff ff ff	r2 &= -0x2
    4276	67 02 00 00 20 00 00 00	r2 <<= 0x20
    4277	77 02 00 00 20 00 00 00	r2 >>= 0x20
    4278	b7 00 00 00 00 00 00 00	r0 = 0x0
    4279	15 02 bd ff 1e b8 02 00	if r2 == 0x2b81e goto -0x43 <LBB333_7>
    4280	b7 00 00 00 01 00 00 00	r0 = 0x1
    4281	07 01 00 00 10 fe f1 ff	r1 += -0xe01f0
    4282	67 01 00 00 20 00 00 00	r1 <<= 0x20
    4283	77 01 00 00 20 00 00 00	r1 >>= 0x20
    4284	25 01 b8 ff 0f fe 02 00	if r1 > 0x2fe0f goto -0x48 <LBB333_7>
    4285	b7 00 00 00 00 00 00 00	r0 = 0x0
    4286	05 00 b6 ff 00 00 00 00	goto -0x4a <LBB333_7>

00000000000085f8 <core::fmt::num::<impl core::fmt::LowerHex for u32>::fmt>
    4287	b7 03 00 00 00 00 00 00	r3 = 0x0
    4288	61 14 00 00 00 00 00 00	r4 = *(u32 *)(r1 + 0x0)
    4289	b7 01 00 00 0a 00 00 00	r1 = 0xa
    4290	05 00 15 00 00 00 00 00	goto +0x15 <LBB551_1>

0000000000008618 <LBB551_3>
    4291	0f 05 00 00 00 00 00 00	r5 += r0
    4292	bf a0 00 00 00 00 00 00	r0 = r10
    4293	07 00 00 00 80 ff ff ff	r0 += -0x80
    4294	0f 30 00 00 00 00 00 00	r0 += r3
    4295	73 50 7f 00 00 00 00 00	*(u8 *)(r0 + 0x7f) = r5
    4296	07 03 00 00 ff ff ff ff	r3 += -0x1
    4297	67 04 00 00 20 00 00 00	r4 <<= 0x20
    4298	bf 45 00 00 00 00 00 00	r5 = r4
    4299	77 05 00 00 20 00 00 00	r5 >>= 0x20
    4300	bf 54 00 00 00 00 00 00	r4 = r5
    4301	77 04 00 00 04 00 00 00	r4 >>= 0x4
    4302	25 05 09 00 0f 00 00 00	if r5 > 0xf goto +0x9 <LBB551_1>
    4303	bf 31 00 00 00 00 00 00	r1 = r3
    4304	07 01 00 00 80 00 00 00	r1 += 0x80
    4305	b7 04 00 00 81 00 00 00	r4 = 0x81
    4306	2d 14 0b 00 00 00 00 00	if r4 > r1 goto +0xb <LBB551_6>
    4307	b7 02 00 00 80 00 00 00	r2 = 0x80
    4308	18 03 00 00 70 a5 00 00 00 00 00 00 00 00 00 00	r3 = 0xa570 ll
    4310	85 10 00 00 ea fc ff ff	call -0x316 ; <core::slice::index::slice_start_index_len_fail>
    4311	85 10 00 00 ff ff ff ff	call -0x1 ; abort

00000000000086c0 <LBB551_1>
    4312	bf 40 00 00 00 00 00 00	r0 = r4
    4313	57 00 00 00 0f 00 00 00	r0 &= 0xf
    4314	b7 05 00 00 30 00 00 00	r5 = 0x30
    4315	2d 01 e7 ff 00 00 00 00	if r1 > r0 goto -0x19 <LBB551_3>
    4316	b7 05 00 00 57 00 00 00	r5 = 0x57
    4317	05 00 e5 ff 00 00 00 00	goto -0x1b <LBB551_3>

00000000000086f0 <LBB551_6>
    4318	bf 31 00 00 00 00 00 00	r1 = r3
    4319	87 01 00 00 00 00 00 00	r1 = -r1
    4320	7b 1a 08 f0 00 00 00 00	*(u64 *)(r10 - 0xff8) = r1
    4321	bf a1 00 00 00 00 00 00	r1 = r10
    4322	07 01 00 00 80 ff ff ff	r1 += -0x80
    4323	0f 31 00 00 00 00 00 00	r1 += r3
    4324	07 01 00 00 80 00 00 00	r1 += 0x80
    4325	7b 1a 00 f0 00 00 00 00	*(u64 *)(r10 - 0x1000) = r1
    4326	bf a5 00 00 00 00 00 00	r5 = r10
    4327	bf 21 00 00 00 00 00 00	r1 = r2
    4328	b7 02 00 00 01 00 00 00	r2 = 0x1
    4329	18 03 00 00 bf 97 00 00 00 00 00 00 00 00 00 00	r3 = 0x97bf ll
    4331	b7 04 00 00 02 00 00 00	r4 = 0x2
    4332	85 10 00 00 88 f8 ff ff	call -0x778 ; <core::fmt::Formatter::pad_integral>
    4333	95 00 00 00 00 00 00 00	exit

0000000000008770 <core::fmt::num::<impl core::fmt::UpperHex for u32>::fmt>
    4334	b7 03 00 00 00 00 00 00	r3 = 0x0
    4335	61 14 00 00 00 00 00 00	r4 = *(u32 *)(r1 + 0x0)
    4336	b7 01 00 00 0a 00 00 00	r1 = 0xa
    4337	05 00 15 00 00 00 00 00	goto +0x15 <LBB552_1>

0000000000008790 <LBB552_3>
    4338	0f 05 00 00 00 00 00 00	r5 += r0
    4339	bf a0 00 00 00 00 00 00	r0 = r10
    4340	07 00 00 00 80 ff ff ff	r0 += -0x80
    4341	0f 30 00 00 00 00 00 00	r0 += r3
    4342	73 50 7f 00 00 00 00 00	*(u8 *)(r0 + 0x7f) = r5
    4343	07 03 00 00 ff ff ff ff	r3 += -0x1
    4344	67 04 00 00 20 00 00 00	r4 <<= 0x20
    4345	bf 45 00 00 00 00 00 00	r5 = r4
    4346	77 05 00 00 20 00 00 00	r5 >>= 0x20
    4347	bf 54 00 00 00 00 00 00	r4 = r5
    4348	77 04 00 00 04 00 00 00	r4 >>= 0x4
    4349	25 05 09 00 0f 00 00 00	if r5 > 0xf goto +0x9 <LBB552_1>
    4350	bf 31 00 00 00 00 00 00	r1 = r3
    4351	07 01 00 00 80 00 00 00	r1 += 0x80
    4352	b7 04 00 00 81 00 00 00	r4 = 0x81
    4353	2d 14 0b 00 00 00 00 00	if r4 > r1 goto +0xb <LBB552_6>
    4354	b7 02 00 00 80 00 00 00	r2 = 0x80
    4355	18 03 00 00 70 a5 00 00 00 00 00 00 00 00 00 00	r3 = 0xa570 ll
    4357	85 10 00 00 bb fc ff ff	call -0x345 ; <core::slice::index::slice_start_index_len_fail>
    4358	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000008838 <LBB552_1>
    4359	bf 40 00 00 00 00 00 00	r0 = r4
    4360	57 00 00 00 0f 00 00 00	r0 &= 0xf
    4361	b7 05 00 00 30 00 00 00	r5 = 0x30
    4362	2d 01 e7 ff 00 00 00 00	if r1 > r0 goto -0x19 <LBB552_3>
    4363	b7 05 00 00 37 00 00 00	r5 = 0x37
    4364	05 00 e5 ff 00 00 00 00	goto -0x1b <LBB552_3>

0000000000008868 <LBB552_6>
    4365	bf 31 00 00 00 00 00 00	r1 = r3
    4366	87 01 00 00 00 00 00 00	r1 = -r1
    4367	7b 1a 08 f0 00 00 00 00	*(u64 *)(r10 - 0xff8) = r1
    4368	bf a1 00 00 00 00 00 00	r1 = r10
    4369	07 01 00 00 80 ff ff ff	r1 += -0x80
    4370	0f 31 00 00 00 00 00 00	r1 += r3
    4371	07 01 00 00 80 00 00 00	r1 += 0x80
    4372	7b 1a 00 f0 00 00 00 00	*(u64 *)(r10 - 0x1000) = r1
    4373	bf a5 00 00 00 00 00 00	r5 = r10
    4374	bf 21 00 00 00 00 00 00	r1 = r2
    4375	b7 02 00 00 01 00 00 00	r2 = 0x1
    4376	18 03 00 00 bf 97 00 00 00 00 00 00 00 00 00 00	r3 = 0x97bf ll
    4378	b7 04 00 00 02 00 00 00	r4 = 0x2
    4379	85 10 00 00 59 f8 ff ff	call -0x7a7 ; <core::fmt::Formatter::pad_integral>
    4380	95 00 00 00 00 00 00 00	exit

00000000000088e8 <core::fmt::num::<impl core::fmt::Debug for usize>::fmt>
    4381	bf 23 00 00 00 00 00 00	r3 = r2
    4382	61 32 30 00 00 00 00 00	r2 = *(u32 *)(r3 + 0x30)
    4383	bf 24 00 00 00 00 00 00	r4 = r2
    4384	57 04 00 00 10 00 00 00	r4 &= 0x10
    4385	55 04 07 00 00 00 00 00	if r4 != 0x0 goto +0x7 <LBB569_2>
    4386	57 02 00 00 20 00 00 00	r2 &= 0x20
    4387	15 02 01 00 00 00 00 00	if r2 == 0x0 goto +0x1 <LBB569_10>
    4388	05 00 08 00 00 00 00 00	goto +0x8 <LBB569_11>

0000000000008928 <LBB569_10>
    4389	79 11 00 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x0)
    4390	b7 02 00 00 01 00 00 00	r2 = 0x1
    4391	85 10 00 00 47 00 00 00	call 0x47 ; <core::fmt::num::imp::fmt_u64>
    4392	05 00 45 00 00 00 00 00	goto +0x45 <LBB569_9>

0000000000008948 <LBB569_2>
    4393	b7 02 00 00 00 00 00 00	r2 = 0x0
    4394	79 15 00 00 00 00 00 00	r5 = *(u64 *)(r1 + 0x0)
    4395	b7 01 00 00 0a 00 00 00	r1 = 0xa
    4396	05 00 2b 00 00 00 00 00	goto +0x2b <LBB569_3>

0000000000008968 <LBB569_11>
    4397	b7 02 00 00 00 00 00 00	r2 = 0x0
    4398	79 15 00 00 00 00 00 00	r5 = *(u64 *)(r1 + 0x0)
    4399	b7 01 00 00 0a 00 00 00	r1 = 0xa
    4400	05 00 0e 00 00 00 00 00	goto +0xe <LBB569_12>

0000000000008988 <LBB569_14>
    4401	0f 05 00 00 00 00 00 00	r5 += r0
    4402	bf a0 00 00 00 00 00 00	r0 = r10
    4403	07 00 00 00 80 ff ff ff	r0 += -0x80
    4404	0f 20 00 00 00 00 00 00	r0 += r2
    4405	73 50 7f 00 00 00 00 00	*(u8 *)(r0 + 0x7f) = r5
    4406	07 02 00 00 ff ff ff ff	r2 += -0x1
    4407	bf 45 00 00 00 00 00 00	r5 = r4
    4408	77 05 00 00 04 00 00 00	r5 >>= 0x4
    4409	25 04 05 00 0f 00 00 00	if r4 > 0xf goto +0x5 <LBB569_12>
    4410	bf 21 00 00 00 00 00 00	r1 = r2
    4411	07 01 00 00 80 00 00 00	r1 += 0x80
    4412	b7 04 00 00 81 00 00 00	r4 = 0x81
    4413	2d 14 21 00 00 00 00 00	if r4 > r1 goto +0x21 <LBB569_8>
    4414	05 00 14 00 00 00 00 00	goto +0x14 <LBB569_7>

00000000000089f8 <LBB569_12>
    4415	bf 54 00 00 00 00 00 00	r4 = r5
    4416	bf 40 00 00 00 00 00 00	r0 = r4
    4417	57 00 00 00 0f 00 00 00	r0 &= 0xf
    4418	b7 05 00 00 30 00 00 00	r5 = 0x30
    4419	2d 01 ed ff 00 00 00 00	if r1 > r0 goto -0x13 <LBB569_14>
    4420	b7 05 00 00 37 00 00 00	r5 = 0x37
    4421	05 00 eb ff 00 00 00 00	goto -0x15 <LBB569_14>

0000000000008a30 <LBB569_5>
    4422	0f 05 00 00 00 00 00 00	r5 += r0
    4423	bf a0 00 00 00 00 00 00	r0 = r10
    4424	07 00 00 00 80 ff ff ff	r0 += -0x80
    4425	0f 20 00 00 00 00 00 00	r0 += r2
    4426	73 50 7f 00 00 00 00 00	*(u8 *)(r0 + 0x7f) = r5
    4427	07 02 00 00 ff ff ff ff	r2 += -0x1
    4428	bf 45 00 00 00 00 00 00	r5 = r4
    4429	77 05 00 00 04 00 00 00	r5 >>= 0x4
    4430	25 04 09 00 0f 00 00 00	if r4 > 0xf goto +0x9 <LBB569_3>
    4431	bf 21 00 00 00 00 00 00	r1 = r2
    4432	07 01 00 00 80 00 00 00	r1 += 0x80
    4433	b7 04 00 00 81 00 00 00	r4 = 0x81
    4434	2d 14 0c 00 00 00 00 00	if r4 > r1 goto +0xc <LBB569_8>

0000000000008a98 <LBB569_7>
    4435	b7 02 00 00 80 00 00 00	r2 = 0x80
    4436	18 03 00 00 70 a5 00 00 00 00 00 00 00 00 00 00	r3 = 0xa570 ll
    4438	85 10 00 00 6a fc ff ff	call -0x396 ; <core::slice::index::slice_start_index_len_fail>
    4439	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000008ac0 <LBB569_3>
    4440	bf 54 00 00 00 00 00 00	r4 = r5
    4441	bf 40 00 00 00 00 00 00	r0 = r4
    4442	57 00 00 00 0f 00 00 00	r0 &= 0xf
    4443	b7 05 00 00 30 00 00 00	r5 = 0x30
    4444	2d 01 e9 ff 00 00 00 00	if r1 > r0 goto -0x17 <LBB569_5>
    4445	b7 05 00 00 57 00 00 00	r5 = 0x57
    4446	05 00 e7 ff 00 00 00 00	goto -0x19 <LBB569_5>

0000000000008af8 <LBB569_8>
    4447	bf 21 00 00 00 00 00 00	r1 = r2
    4448	87 01 00 00 00 00 00 00	r1 = -r1
    4449	7b 1a 08 f0 00 00 00 00	*(u64 *)(r10 - 0xff8) = r1
    4450	bf a1 00 00 00 00 00 00	r1 = r10
    4451	07 01 00 00 80 ff ff ff	r1 += -0x80
    4452	0f 21 00 00 00 00 00 00	r1 += r2
    4453	07 01 00 00 80 00 00 00	r1 += 0x80
    4454	7b 1a 00 f0 00 00 00 00	*(u64 *)(r10 - 0x1000) = r1
    4455	bf a5 00 00 00 00 00 00	r5 = r10
    4456	bf 31 00 00 00 00 00 00	r1 = r3
    4457	b7 02 00 00 01 00 00 00	r2 = 0x1
    4458	18 03 00 00 bf 97 00 00 00 00 00 00 00 00 00 00	r3 = 0x97bf ll
    4460	b7 04 00 00 02 00 00 00	r4 = 0x2
    4461	85 10 00 00 07 f8 ff ff	call -0x7f9 ; <core::fmt::Formatter::pad_integral>

0000000000008b70 <LBB569_9>
    4462	95 00 00 00 00 00 00 00	exit

0000000000008b78 <core::fmt::num::imp::fmt_u64>
    4463	b7 04 00 00 27 00 00 00	r4 = 0x27
    4464	b7 05 00 00 10 27 00 00	r5 = 0x2710
    4465	2d 15 20 00 00 00 00 00	if r5 > r1 goto +0x20 <LBB570_4>
    4466	b7 04 00 00 00 00 00 00	r4 = 0x0

0000000000008b98 <LBB570_2>
    4467	bf 15 00 00 00 00 00 00	r5 = r1
    4468	37 01 00 00 10 27 00 00	r1 /= 0x2710
    4469	bf 16 00 00 00 00 00 00	r6 = r1
    4470	27 06 00 00 10 27 00 00	r6 *= 0x2710
    4471	bf 50 00 00 00 00 00 00	r0 = r5
    4472	1f 60 00 00 00 00 00 00	r0 -= r6
    4473	bf 06 00 00 00 00 00 00	r6 = r0
    4474	57 06 00 00 ff ff 00 00	r6 &= 0xffff
    4475	37 06 00 00 64 00 00 00	r6 /= 0x64
    4476	bf 67 00 00 00 00 00 00	r7 = r6
    4477	27 07 00 00 64 00 00 00	r7 *= 0x64
    4478	1f 70 00 00 00 00 00 00	r0 -= r7
    4479	bf a7 00 00 00 00 00 00	r7 = r10
    4480	07 07 00 00 d9 ff ff ff	r7 += -0x27
    4481	0f 47 00 00 00 00 00 00	r7 += r4
    4482	67 06 00 00 01 00 00 00	r6 <<= 0x1
    4483	18 08 00 00 c1 97 00 00 00 00 00 00 00 00 00 00	r8 = 0x97c1 ll
    4485	0f 68 00 00 00 00 00 00	r8 += r6
    4486	69 86 00 00 00 00 00 00	r6 = *(u16 *)(r8 + 0x0)
    4487	6b 67 23 00 00 00 00 00	*(u16 *)(r7 + 0x23) = r6
    4488	67 00 00 00 01 00 00 00	r0 <<= 0x1
    4489	57 00 00 00 fe ff 00 00	r0 &= 0xfffe
    4490	18 06 00 00 c1 97 00 00 00 00 00 00 00 00 00 00	r6 = 0x97c1 ll
    4492	0f 06 00 00 00 00 00 00	r6 += r0
    4493	69 60 00 00 00 00 00 00	r0 = *(u16 *)(r6 + 0x0)
    4494	6b 07 25 00 00 00 00 00	*(u16 *)(r7 + 0x25) = r0
    4495	07 04 00 00 fc ff ff ff	r4 += -0x4
    4496	25 05 e2 ff ff e0 f5 05	if r5 > 0x5f5e0ff goto -0x1e <LBB570_2>
    4497	07 04 00 00 27 00 00 00	r4 += 0x27

0000000000008c90 <LBB570_4>
    4498	25 01 0a 00 63 00 00 00	if r1 > 0x63 goto +0xa <LBB570_6>

0000000000008c98 <LBB570_5>
    4499	b7 05 00 00 0a 00 00 00	r5 = 0xa
    4500	2d 15 01 00 00 00 00 00	if r5 > r1 goto +0x1 <LBB570_8>
    4501	05 00 1a 00 00 00 00 00	goto +0x1a <LBB570_7>

0000000000008cb0 <LBB570_8>
    4502	07 04 00 00 ff ff ff ff	r4 += -0x1
    4503	bf a5 00 00 00 00 00 00	r5 = r10
    4504	07 05 00 00 d9 ff ff ff	r5 += -0x27
    4505	0f 45 00 00 00 00 00 00	r5 += r4
    4506	07 01 00 00 30 00 00 00	r1 += 0x30
    4507	73 15 00 00 00 00 00 00	*(u8 *)(r5 + 0x0) = r1
    4508	05 00 1d 00 00 00 00 00	goto +0x1d <LBB570_9>

0000000000008ce8 <LBB570_6>
    4509	bf 15 00 00 00 00 00 00	r5 = r1
    4510	57 05 00 00 ff ff 00 00	r5 &= 0xffff
    4511	37 05 00 00 64 00 00 00	r5 /= 0x64
    4512	bf 50 00 00 00 00 00 00	r0 = r5
    4513	27 00 00 00 64 00 00 00	r0 *= 0x64
    4514	1f 01 00 00 00 00 00 00	r1 -= r0
    4515	67 01 00 00 01 00 00 00	r1 <<= 0x1
    4516	57 01 00 00 fe ff 00 00	r1 &= 0xfffe
    4517	18 00 00 00 c1 97 00 00 00 00 00 00 00 00 00 00	r0 = 0x97c1 ll
    4519	0f 10 00 00 00 00 00 00	r0 += r1
    4520	07 04 00 00 fe ff ff ff	r4 += -0x2
    4521	bf a1 00 00 00 00 00 00	r1 = r10
    4522	07 01 00 00 d9 ff ff ff	r1 += -0x27
    4523	0f 41 00 00 00 00 00 00	r1 += r4
    4524	69 00 00 00 00 00 00 00	r0 = *(u16 *)(r0 + 0x0)
    4525	6b 01 00 00 00 00 00 00	*(u16 *)(r1 + 0x0) = r0
    4526	bf 51 00 00 00 00 00 00	r1 = r5
    4527	05 00 e3 ff 00 00 00 00	goto -0x1d <LBB570_5>

0000000000008d80 <LBB570_7>
    4528	67 01 00 00 01 00 00 00	r1 <<= 0x1
    4529	18 05 00 00 c1 97 00 00 00 00 00 00 00 00 00 00	r5 = 0x97c1 ll
    4531	0f 15 00 00 00 00 00 00	r5 += r1
    4532	07 04 00 00 fe ff ff ff	r4 += -0x2
    4533	bf a1 00 00 00 00 00 00	r1 = r10
    4534	07 01 00 00 d9 ff ff ff	r1 += -0x27
    4535	0f 41 00 00 00 00 00 00	r1 += r4
    4536	69 55 00 00 00 00 00 00	r5 = *(u16 *)(r5 + 0x0)
    4537	6b 51 00 00 00 00 00 00	*(u16 *)(r1 + 0x0) = r5

0000000000008dd0 <LBB570_9>
    4538	bf a1 00 00 00 00 00 00	r1 = r10
    4539	07 01 00 00 d9 ff ff ff	r1 += -0x27
    4540	0f 41 00 00 00 00 00 00	r1 += r4
    4541	7b 1a 00 f0 00 00 00 00	*(u64 *)(r10 - 0x1000) = r1
    4542	b7 01 00 00 27 00 00 00	r1 = 0x27
    4543	1f 41 00 00 00 00 00 00	r1 -= r4
    4544	7b 1a 08 f0 00 00 00 00	*(u64 *)(r10 - 0xff8) = r1
    4545	bf a5 00 00 00 00 00 00	r5 = r10
    4546	bf 31 00 00 00 00 00 00	r1 = r3
    4547	18 03 00 00 e0 96 00 00 00 00 00 00 00 00 00 00	r3 = 0x96e0 ll
    4549	b7 04 00 00 00 00 00 00	r4 = 0x0
    4550	85 10 00 00 ae f7 ff ff	call -0x852 ; <core::fmt::Formatter::pad_integral>
    4551	95 00 00 00 00 00 00 00	exit

0000000000008e40 <core::fmt::num::imp::<impl core::fmt::Display for u32>::fmt>
    4552	bf 23 00 00 00 00 00 00	r3 = r2
    4553	61 11 00 00 00 00 00 00	r1 = *(u32 *)(r1 + 0x0)
    4554	b7 02 00 00 01 00 00 00	r2 = 0x1
    4555	85 10 00 00 a3 ff ff ff	call -0x5d ; <core::fmt::num::imp::fmt_u64>
    4556	95 00 00 00 00 00 00 00	exit

0000000000008e68 <core::fmt::num::imp::<impl core::fmt::Display for usize>::fmt>
    4557	bf 23 00 00 00 00 00 00	r3 = r2
    4558	79 11 00 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x0)
    4559	b7 02 00 00 01 00 00 00	r2 = 0x1
    4560	85 10 00 00 9e ff ff ff	call -0x62 ; <core::fmt::num::imp::fmt_u64>
    4561	95 00 00 00 00 00 00 00	exit

0000000000008e90 <<core::fmt::Error as core::fmt::Debug>::fmt>
    4562	79 21 00 00 00 00 00 00	r1 = *(u64 *)(r2 + 0x0)
    4563	79 22 08 00 00 00 00 00	r2 = *(u64 *)(r2 + 0x8)
    4564	79 24 18 00 00 00 00 00	r4 = *(u64 *)(r2 + 0x18)
    4565	18 02 00 00 47 9f 00 00 00 00 00 00 00 00 00 00	r2 = 0x9f47 ll
    4567	b7 03 00 00 05 00 00 00	r3 = 0x5
    4568	8d 00 00 00 04 00 00 00	callx r4
    4569	95 00 00 00 00 00 00 00	exit

0000000000008ed0 <<&T as core::fmt::Debug>::fmt>
    4570	79 13 00 00 00 00 00 00	r3 = *(u64 *)(r1 + 0x0)
    4571	79 11 08 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x8)
    4572	79 14 18 00 00 00 00 00	r4 = *(u64 *)(r1 + 0x18)
    4573	bf 31 00 00 00 00 00 00	r1 = r3
    4574	8d 00 00 00 04 00 00 00	callx r4
    4575	95 00 00 00 00 00 00 00	exit

0000000000008f00 <<&T as core::fmt::Display>::fmt>
    4576	bf 24 00 00 00 00 00 00	r4 = r2
    4577	79 13 08 00 00 00 00 00	r3 = *(u64 *)(r1 + 0x8)
    4578	79 12 00 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x0)
    4579	bf 41 00 00 00 00 00 00	r1 = r4
    4580	85 10 00 00 74 f8 ff ff	call -0x78c ; <core::fmt::Formatter::pad>
    4581	95 00 00 00 00 00 00 00	exit

0000000000008f30 <<&T as core::fmt::Display>::fmt>
    4582	79 26 08 00 00 00 00 00	r6 = *(u64 *)(r2 + 0x8)
    4583	79 27 00 00 00 00 00 00	r7 = *(u64 *)(r2 + 0x0)
    4584	79 12 00 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x0)
    4585	bf a8 00 00 00 00 00 00	r8 = r10
    4586	07 08 00 00 d0 ff ff ff	r8 += -0x30
    4587	bf 81 00 00 00 00 00 00	r1 = r8
    4588	b7 03 00 00 30 00 00 00	r3 = 0x30
    4589	85 10 00 00 72 00 00 00	call 0x72 ; <memcpy>
    4590	bf 71 00 00 00 00 00 00	r1 = r7
    4591	bf 62 00 00 00 00 00 00	r2 = r6
    4592	bf 83 00 00 00 00 00 00	r3 = r8
    4593	85 10 00 00 f5 f6 ff ff	call -0x90b ; <core::fmt::write>
    4594	95 00 00 00 00 00 00 00	exit

0000000000008f98 <<&T as core::fmt::Display>::fmt>
    4595	bf 24 00 00 00 00 00 00	r4 = r2
    4596	79 11 00 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x0)
    4597	79 13 08 00 00 00 00 00	r3 = *(u64 *)(r1 + 0x8)
    4598	79 12 00 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x0)
    4599	bf 41 00 00 00 00 00 00	r1 = r4
    4600	85 10 00 00 60 f8 ff ff	call -0x7a0 ; <core::fmt::Formatter::pad>
    4601	95 00 00 00 00 00 00 00	exit

0000000000008fd0 <core::unicode::unicode_data::grapheme_extend::lookup>
    4602	b7 02 00 00 00 00 00 00	r2 = 0x0
    4603	b7 03 00 00 21 00 00 00	r3 = 0x21
    4604	bf 14 00 00 00 00 00 00	r4 = r1
    4605	67 04 00 00 0b 00 00 00	r4 <<= 0xb
    4606	67 04 00 00 20 00 00 00	r4 <<= 0x20
    4607	77 04 00 00 20 00 00 00	r4 >>= 0x20
    4608	b7 05 00 00 21 00 00 00	r5 = 0x21
    4609	05 00 0a 00 00 00 00 00	goto +0xa <LBB730_1>

0000000000009010 <LBB730_5>
    4610	15 06 05 00 01 00 00 00	if r6 == 0x1 goto +0x5 <LBB730_8>
    4611	57 06 00 00 ff 00 00 00	r6 &= 0xff
    4612	55 06 19 00 ff 00 00 00	if r6 != 0xff goto +0x19 <LBB730_9>
    4613	bf 32 00 00 00 00 00 00	r2 = r3
    4614	07 02 00 00 01 00 00 00	r2 += 0x1
    4615	bf 53 00 00 00 00 00 00	r3 = r5

0000000000009040 <LBB730_8>
    4616	bf 35 00 00 00 00 00 00	r5 = r3
    4617	1f 23 00 00 00 00 00 00	r3 -= r2
    4618	2d 25 01 00 00 00 00 00	if r5 > r2 goto +0x1 <LBB730_1>
    4619	05 00 14 00 00 00 00 00	goto +0x14 <LBB730_10>

0000000000009060 <LBB730_1>
    4620	77 03 00 00 01 00 00 00	r3 >>= 0x1
    4621	0f 23 00 00 00 00 00 00	r3 += r2
    4622	bf 30 00 00 00 00 00 00	r0 = r3
    4623	67 00 00 00 02 00 00 00	r0 <<= 0x2
    4624	18 06 00 00 4c 9f 00 00 00 00 00 00 00 00 00 00	r6 = 0x9f4c ll
    4626	0f 06 00 00 00 00 00 00	r6 += r0
    4627	61 60 00 00 00 00 00 00	r0 = *(u32 *)(r6 + 0x0)
    4628	67 00 00 00 0b 00 00 00	r0 <<= 0xb
    4629	67 00 00 00 20 00 00 00	r0 <<= 0x20
    4630	77 00 00 00 20 00 00 00	r0 >>= 0x20
    4631	b7 07 00 00 01 00 00 00	r7 = 0x1
    4632	5d 40 01 00 00 00 00 00	if r0 != r4 goto +0x1 <LBB730_3>
    4633	b7 07 00 00 00 00 00 00	r7 = 0x0

00000000000090d0 <LBB730_3>
    4634	b7 06 00 00 ff ff ff ff	r6 = -0x1
    4635	2d 04 e6 ff 00 00 00 00	if r4 > r0 goto -0x1a <LBB730_5>
    4636	bf 76 00 00 00 00 00 00	r6 = r7
    4637	05 00 e4 ff 00 00 00 00	goto -0x1c <LBB730_5>

00000000000090f0 <LBB730_9>
    4638	07 03 00 00 01 00 00 00	r3 += 0x1
    4639	bf 32 00 00 00 00 00 00	r2 = r3

0000000000009100 <LBB730_10>
    4640	25 02 39 00 20 00 00 00	if r2 > 0x20 goto +0x39 <LBB730_12>
    4641	bf 27 00 00 00 00 00 00	r7 = r2
    4642	67 07 00 00 02 00 00 00	r7 <<= 0x2
    4643	18 04 00 00 4c 9f 00 00 00 00 00 00 00 00 00 00	r4 = 0x9f4c ll
    4645	18 05 00 00 4c 9f 00 00 00 00 00 00 00 00 00 00	r5 = 0x9f4c ll
    4647	0f 75 00 00 00 00 00 00	r5 += r7
    4648	b7 03 00 00 d7 02 00 00	r3 = 0x2d7
    4649	b7 06 00 00 1f 00 00 00	r6 = 0x1f
    4650	61 50 00 00 00 00 00 00	r0 = *(u32 *)(r5 + 0x0)
    4651	77 00 00 00 15 00 00 00	r0 >>= 0x15
    4652	15 02 07 00 20 00 00 00	if r2 == 0x20 goto +0x7 <LBB730_14>
    4653	0f 47 00 00 00 00 00 00	r7 += r4
    4654	b7 05 00 00 00 00 00 00	r5 = 0x0
    4655	bf 26 00 00 00 00 00 00	r6 = r2
    4656	07 06 00 00 ff ff ff ff	r6 += -0x1
    4657	61 73 04 00 00 00 00 00	r3 = *(u32 *)(r7 + 0x4)
    4658	77 03 00 00 15 00 00 00	r3 >>= 0x15
    4659	15 02 04 00 00 00 00 00	if r2 == 0x0 goto +0x4 <LBB730_15>

00000000000091a0 <LBB730_14>
    4660	67 06 00 00 02 00 00 00	r6 <<= 0x2
    4661	0f 64 00 00 00 00 00 00	r4 += r6
    4662	61 45 00 00 00 00 00 00	r5 = *(u32 *)(r4 + 0x0)
    4663	57 05 00 00 ff ff 1f 00	r5 &= 0x1fffff

00000000000091c0 <LBB730_15>
    4664	bf 02 00 00 00 00 00 00	r2 = r0
    4665	a7 02 00 00 ff ff ff ff	r2 ^= -0x1
    4666	0f 23 00 00 00 00 00 00	r3 += r2
    4667	15 03 16 00 00 00 00 00	if r3 == 0x0 goto +0x16 <LBB730_19>
    4668	1f 51 00 00 00 00 00 00	r1 -= r5
    4669	18 04 00 00 d0 9f 00 00 00 00 00 00 00 00 00 00	r4 = 0x9fd0 ll
    4671	0f 04 00 00 00 00 00 00	r4 += r0
    4672	b7 05 00 00 00 00 00 00	r5 = 0x0
    4673	67 01 00 00 20 00 00 00	r1 <<= 0x20
    4674	77 01 00 00 20 00 00 00	r1 >>= 0x20
    4675	b7 06 00 00 00 00 00 00	r6 = 0x0

0000000000009220 <LBB730_17>
    4676	bf 02 00 00 00 00 00 00	r2 = r0
    4677	0f 62 00 00 00 00 00 00	r2 += r6
    4678	25 02 0d 00 d6 02 00 00	if r2 > 0x2d6 goto +0xd <LBB730_21>
    4679	bf 42 00 00 00 00 00 00	r2 = r4
    4680	0f 62 00 00 00 00 00 00	r2 += r6
    4681	71 22 00 00 00 00 00 00	r2 = *(u8 *)(r2 + 0x0)
    4682	0f 25 00 00 00 00 00 00	r5 += r2
    4683	bf 52 00 00 00 00 00 00	r2 = r5
    4684	67 02 00 00 20 00 00 00	r2 <<= 0x20
    4685	77 02 00 00 20 00 00 00	r2 >>= 0x20
    4686	2d 12 02 00 00 00 00 00	if r2 > r1 goto +0x2 <LBB730_18>
    4687	07 06 00 00 01 00 00 00	r6 += 0x1
    4688	2d 63 f3 ff 00 00 00 00	if r3 > r6 goto -0xd <LBB730_17>

0000000000009288 <LBB730_18>
    4689	0f 60 00 00 00 00 00 00	r0 += r6

0000000000009290 <LBB730_19>
    4690	57 00 00 00 01 00 00 00	r0 &= 0x1
    4691	95 00 00 00 00 00 00 00	exit

00000000000092a0 <LBB730_21>
    4692	bf 21 00 00 00 00 00 00	r1 = r2
    4693	b7 02 00 00 d7 02 00 00	r2 = 0x2d7
    4694	18 03 00 00 80 a7 00 00 00 00 00 00 00 00 00 00	r3 = 0xa780 ll
    4696	85 10 00 00 dc f4 ff ff	call -0xb24 ; <core::panicking::panic_bounds_check>
    4697	85 10 00 00 ff ff ff ff	call -0x1 ; abort

00000000000092d0 <LBB730_12>
    4698	bf 21 00 00 00 00 00 00	r1 = r2
    4699	b7 02 00 00 21 00 00 00	r2 = 0x21
    4700	18 03 00 00 68 a7 00 00 00 00 00 00 00 00 00 00	r3 = 0xa768 ll
    4702	85 10 00 00 d6 f4 ff ff	call -0xb2a ; <core::panicking::panic_bounds_check>
    4703	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000009300 <memcpy>
    4704	bf 16 00 00 00 00 00 00	r6 = r1
    4705	bf 34 00 00 00 00 00 00	r4 = r3
    4706	77 04 00 00 03 00 00 00	r4 >>= 0x3
    4707	bf 41 00 00 00 00 00 00	r1 = r4
    4708	27 01 00 00 f9 ff ff ff	r1 *= -0x7
    4709	0f 31 00 00 00 00 00 00	r1 += r3
    4710	25 01 18 00 0f 00 00 00	if r1 > 0xf goto +0x18 <LBB0_6>
    4711	b7 01 00 00 00 00 00 00	r1 = 0x0
    4712	b7 05 00 00 08 00 00 00	r5 = 0x8
    4713	2d 35 0b 00 00 00 00 00	if r5 > r3 goto +0xb <LBB0_4>
    4714	b7 01 00 00 00 00 00 00	r1 = 0x0
    4715	b7 05 00 00 00 00 00 00	r5 = 0x0

0000000000009360 <LBB0_3>
    4716	bf 60 00 00 00 00 00 00	r0 = r6
    4717	0f 10 00 00 00 00 00 00	r0 += r1
    4718	bf 27 00 00 00 00 00 00	r7 = r2
    4719	0f 17 00 00 00 00 00 00	r7 += r1
    4720	79 77 00 00 00 00 00 00	r7 = *(u64 *)(r7 + 0x0)
    4721	7b 70 00 00 00 00 00 00	*(u64 *)(r0 + 0x0) = r7
    4722	07 01 00 00 08 00 00 00	r1 += 0x8
    4723	07 05 00 00 01 00 00 00	r5 += 0x1
    4724	2d 54 f7 ff 00 00 00 00	if r4 > r5 goto -0x9 <LBB0_3>

00000000000093a8 <LBB0_4>
    4725	7d 31 0b 00 00 00 00 00	if r1 s>= r3 goto +0xb <LBB0_7>

00000000000093b0 <LBB0_5>
    4726	bf 64 00 00 00 00 00 00	r4 = r6
    4727	0f 14 00 00 00 00 00 00	r4 += r1
    4728	bf 25 00 00 00 00 00 00	r5 = r2
    4729	0f 15 00 00 00 00 00 00	r5 += r1
    4730	71 55 00 00 00 00 00 00	r5 = *(u8 *)(r5 + 0x0)
    4731	73 54 00 00 00 00 00 00	*(u8 *)(r4 + 0x0) = r5
    4732	07 01 00 00 01 00 00 00	r1 += 0x1
    4733	6d 13 f8 ff 00 00 00 00	if r3 s> r1 goto -0x8 <LBB0_5>
    4734	05 00 02 00 00 00 00 00	goto +0x2 <LBB0_7>

00000000000093f8 <LBB0_6>
    4735	bf 61 00 00 00 00 00 00	r1 = r6
    4736	85 10 00 00 ff ff ff ff	call -0x1 ; sol_memcpy_

0000000000009408 <LBB0_7>
    4737	bf 60 00 00 00 00 00 00	r0 = r6
    4738	95 00 00 00 00 00 00 00	exit
